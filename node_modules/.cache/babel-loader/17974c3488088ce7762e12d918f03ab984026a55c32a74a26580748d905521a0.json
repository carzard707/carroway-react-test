{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useParams(opts) {\n  return useMatch({\n    ...opts,\n    select: match => {\n      return opts.select ? opts.select(match.params) : match.params;\n    }\n  });\n}\nexport { useParams };","map":{"version":3,"names":["useParams","opts","useMatch","select","match","params"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react/node_modules/@tanstack/react-router/src/useParams.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { AnyRoute } from './route'\nimport type { AllParams, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { StrictOrFrom } from './utils'\n\nexport type UseParamsOptions<\n  TFrom,\n  TStrict extends boolean,\n  TParams,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (params: TParams) => TSelected\n}\n\nexport function useParams<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TParams = TStrict extends false\n    ? AllParams<TRouteTree>\n    : RouteById<TRouteTree, TFrom>['types']['allParams'],\n  TSelected = TParams,\n>(opts: UseParamsOptions<TFrom, TStrict, TParams, TSelected>): TSelected {\n  return useMatch({\n    ...opts,\n    select: (match) => {\n      return opts.select ? opts.select(match.params as TParams) : match.params\n    },\n  }) as TSelected\n}\n"],"mappings":";AAeO,SAASA,UAQdC,IAAA,EAAuE;EACvE,OAAOC,QAAA,CAAS;IACd,GAAGD,IAAA;IACHE,MAAA,EAASC,KAAA,IAAU;MACjB,OAAOH,IAAA,CAAKE,MAAA,GAASF,IAAA,CAAKE,MAAA,CAAOC,KAAA,CAAMC,MAAiB,IAAID,KAAA,CAAMC,MAAA;IACpE;EAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}