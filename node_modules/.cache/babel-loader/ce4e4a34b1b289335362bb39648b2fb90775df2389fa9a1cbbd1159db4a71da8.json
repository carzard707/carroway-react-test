{"ast":null,"code":"import { createMemoryHistory, createBrowserHistory, parseHref } from \"@tanstack/history\";\nimport { Store } from \"@tanstack/react-store\";\nimport invariant from \"tiny-invariant\";\nimport warning from \"tiny-warning\";\nimport { rootRouteId } from \"./root.js\";\nimport { defaultStringifySearch, defaultParseSearch } from \"./searchParams.js\";\nimport { pick, createControlledPromise, deepEqual, replaceEqualDeep, last, functionalUpdate } from \"./utils.js\";\nimport { trimPath, trimPathLeft, parsePathname, resolvePath, cleanPath, matchPathname, trimPathRight, interpolatePath, joinPaths } from \"./path.js\";\nimport { isResolvedRedirect, isRedirect } from \"./redirects.js\";\nimport { isNotFound } from \"./not-found.js\";\nimport { defaultTransformer } from \"./transformer.js\";\nconst componentTypes = [\"component\", \"errorComponent\", \"pendingComponent\", \"notFoundComponent\"];\nfunction createRouter(options) {\n  return new Router(options);\n}\nclass Router {\n  /**\n   * @deprecated Use the `createRouter` function instead\n   */\n  constructor(options) {\n    this.tempLocationKey = `${Math.round(Math.random() * 1e7)}`;\n    this.resetNextScroll = true;\n    this.shouldViewTransition = void 0;\n    this.subscribers = /* @__PURE__ */new Set();\n    this.startReactTransition = fn => fn();\n    this.update = newOptions => {\n      if (newOptions.notFoundRoute) {\n        console.warn(\"The notFoundRoute API is deprecated and will be removed in the next major version. See https://tanstack.com/router/v1/docs/guide/not-found-errors#migrating-from-notfoundroute for more info.\");\n      }\n      const previousOptions = this.options;\n      this.options = {\n        ...this.options,\n        ...newOptions\n      };\n      this.isServer = this.options.isServer ?? typeof document === \"undefined\";\n      if (!this.basepath || newOptions.basepath && newOptions.basepath !== previousOptions.basepath) {\n        if (newOptions.basepath === void 0 || newOptions.basepath === \"\" || newOptions.basepath === \"/\") {\n          this.basepath = \"/\";\n        } else {\n          this.basepath = `/${trimPath(newOptions.basepath)}`;\n        }\n      }\n      if (\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      !this.history || this.options.history && this.options.history !== this.history) {\n        this.history = this.options.history ?? (this.isServer ? createMemoryHistory({\n          initialEntries: [this.basepath || \"/\"]\n        }) : createBrowserHistory());\n        this.latestLocation = this.parseLocation();\n      }\n      if (this.options.routeTree !== this.routeTree) {\n        this.routeTree = this.options.routeTree;\n        this.buildRouteTree();\n      }\n      if (!this.__store) {\n        this.__store = new Store(getInitialRouterState(this.latestLocation), {\n          onUpdate: () => {\n            this.__store.state = {\n              ...this.state,\n              cachedMatches: this.state.cachedMatches.filter(d => ![\"redirected\"].includes(d.status))\n            };\n          }\n        });\n      }\n    };\n    this.buildRouteTree = () => {\n      this.routesById = {};\n      this.routesByPath = {};\n      const notFoundRoute = this.options.notFoundRoute;\n      if (notFoundRoute) {\n        notFoundRoute.init({\n          originalIndex: 99999999999\n        });\n        this.routesById[notFoundRoute.id] = notFoundRoute;\n      }\n      const recurseRoutes = childRoutes => {\n        childRoutes.forEach((childRoute, i) => {\n          childRoute.init({\n            originalIndex: i\n          });\n          const existingRoute = this.routesById[childRoute.id];\n          invariant(!existingRoute, `Duplicate routes found with id: ${String(childRoute.id)}`);\n          this.routesById[childRoute.id] = childRoute;\n          if (!childRoute.isRoot && childRoute.path) {\n            const trimmedFullPath = trimPathRight(childRoute.fullPath);\n            if (!this.routesByPath[trimmedFullPath] || childRoute.fullPath.endsWith(\"/\")) {\n              this.routesByPath[trimmedFullPath] = childRoute;\n            }\n          }\n          const children = childRoute.children;\n          if (children == null ? void 0 : children.length) {\n            recurseRoutes(children);\n          }\n        });\n      };\n      recurseRoutes([this.routeTree]);\n      const scoredRoutes = [];\n      const routes = Object.values(this.routesById);\n      routes.forEach((d, i) => {\n        var _a;\n        if (d.isRoot || !d.path) {\n          return;\n        }\n        const trimmed = trimPathLeft(d.fullPath);\n        const parsed = parsePathname(trimmed);\n        while (parsed.length > 1 && ((_a = parsed[0]) == null ? void 0 : _a.value) === \"/\") {\n          parsed.shift();\n        }\n        const scores = parsed.map(segment => {\n          if (segment.value === \"/\") {\n            return 0.75;\n          }\n          if (segment.type === \"param\") {\n            return 0.5;\n          }\n          if (segment.type === \"wildcard\") {\n            return 0.25;\n          }\n          return 1;\n        });\n        scoredRoutes.push({\n          child: d,\n          trimmed,\n          parsed,\n          index: i,\n          scores\n        });\n      });\n      this.flatRoutes = scoredRoutes.sort((a, b) => {\n        const minLength = Math.min(a.scores.length, b.scores.length);\n        for (let i = 0; i < minLength; i++) {\n          if (a.scores[i] !== b.scores[i]) {\n            return b.scores[i] - a.scores[i];\n          }\n        }\n        if (a.scores.length !== b.scores.length) {\n          return b.scores.length - a.scores.length;\n        }\n        for (let i = 0; i < minLength; i++) {\n          if (a.parsed[i].value !== b.parsed[i].value) {\n            return a.parsed[i].value > b.parsed[i].value ? 1 : -1;\n          }\n        }\n        return a.index - b.index;\n      }).map((d, i) => {\n        d.child.rank = i;\n        return d.child;\n      });\n    };\n    this.subscribe = (eventType, fn) => {\n      const listener = {\n        eventType,\n        fn\n      };\n      this.subscribers.add(listener);\n      return () => {\n        this.subscribers.delete(listener);\n      };\n    };\n    this.emit = routerEvent => {\n      this.subscribers.forEach(listener => {\n        if (listener.eventType === routerEvent.type) {\n          listener.fn(routerEvent);\n        }\n      });\n    };\n    this.parseLocation = previousLocation => {\n      const parse = ({\n        pathname,\n        search,\n        hash,\n        state\n      }) => {\n        const parsedSearch = this.options.parseSearch(search);\n        const searchStr = this.options.stringifySearch(parsedSearch);\n        return {\n          pathname,\n          searchStr,\n          search: replaceEqualDeep(previousLocation == null ? void 0 : previousLocation.search, parsedSearch),\n          hash: hash.split(\"#\").reverse()[0] ?? \"\",\n          href: `${pathname}${searchStr}${hash}`,\n          state: replaceEqualDeep(previousLocation == null ? void 0 : previousLocation.state, state)\n        };\n      };\n      const location = parse(this.history.location);\n      const {\n        __tempLocation,\n        __tempKey\n      } = location.state;\n      if (__tempLocation && (!__tempKey || __tempKey === this.tempLocationKey)) {\n        const parsedTempLocation = parse(__tempLocation);\n        parsedTempLocation.state.key = location.state.key;\n        delete parsedTempLocation.state.__tempLocation;\n        return {\n          ...parsedTempLocation,\n          maskedLocation: location\n        };\n      }\n      return location;\n    };\n    this.resolvePathWithBase = (from, path) => {\n      const resolvedPath = resolvePath({\n        basepath: this.basepath,\n        base: from,\n        to: cleanPath(path),\n        trailingSlash: this.options.trailingSlash\n      });\n      return resolvedPath;\n    };\n    this.cancelMatch = id => {\n      const match = this.getMatch(id);\n      if (!match) return;\n      match.abortController.abort();\n      clearTimeout(match.pendingTimeout);\n    };\n    this.cancelMatches = () => {\n      var _a;\n      (_a = this.state.pendingMatches) == null ? void 0 : _a.forEach(match => {\n        this.cancelMatch(match.id);\n      });\n    };\n    this.buildLocation = opts => {\n      const build = (dest = {}, matches) => {\n        var _a, _b, _c;\n        const fromMatches = dest._fromLocation != null ? this.matchRoutes({\n          ...dest._fromLocation,\n          search: dest.fromSearch || dest._fromLocation.search\n        }) : this.state.matches;\n        const fromMatch = dest.from != null ? fromMatches.find(d => matchPathname(this.basepath, trimPathRight(d.pathname), {\n          to: dest.from,\n          caseSensitive: false,\n          fuzzy: false\n        })) : void 0;\n        const fromPath = (fromMatch == null ? void 0 : fromMatch.pathname) || this.latestLocation.pathname;\n        invariant(dest.from == null || fromMatch != null, \"Could not find match for from: \" + dest.from);\n        const fromSearch = ((_a = last(fromMatches)) == null ? void 0 : _a.search) || this.latestLocation.search;\n        const stayingMatches = matches == null ? void 0 : matches.filter(d => fromMatches.find(e => e.routeId === d.routeId));\n        const fromRouteByFromPathRouteId = this.routesById[(_b = stayingMatches == null ? void 0 : stayingMatches.find(d => d.pathname === fromPath)) == null ? void 0 : _b.routeId];\n        let pathname = dest.to ? this.resolvePathWithBase(fromPath, `${dest.to}`) : this.resolvePathWithBase(fromPath, (fromRouteByFromPathRouteId == null ? void 0 : fromRouteByFromPathRouteId.to) ?? fromPath);\n        const prevParams = {\n          ...((_c = last(fromMatches)) == null ? void 0 : _c.params)\n        };\n        let nextParams = (dest.params ?? true) === true ? prevParams : {\n          ...prevParams,\n          ...functionalUpdate(dest.params, prevParams)\n        };\n        if (Object.keys(nextParams).length > 0) {\n          matches == null ? void 0 : matches.map(d => {\n            var _a2;\n            const route = this.looseRoutesById[d.routeId];\n            return ((_a2 = route == null ? void 0 : route.options.params) == null ? void 0 : _a2.stringify) ?? route.options.stringifyParams;\n          }).filter(Boolean).forEach(fn => {\n            nextParams = {\n              ...nextParams,\n              ...fn(nextParams)\n            };\n          });\n        }\n        pathname = interpolatePath({\n          path: pathname,\n          params: nextParams ?? {},\n          leaveWildcards: false,\n          leaveParams: opts.leaveParams\n        });\n        const preSearchFilters = (stayingMatches == null ? void 0 : stayingMatches.map(match => this.looseRoutesById[match.routeId].options.preSearchFilters ?? []).flat().filter(Boolean)) ?? [];\n        const postSearchFilters = (stayingMatches == null ? void 0 : stayingMatches.map(match => this.looseRoutesById[match.routeId].options.postSearchFilters ?? []).flat().filter(Boolean)) ?? [];\n        const preFilteredSearch = preSearchFilters.length ? preSearchFilters.reduce((prev, next) => next(prev), fromSearch) : fromSearch;\n        const destSearch = dest.search === true ? preFilteredSearch : dest.search ? functionalUpdate(dest.search, preFilteredSearch) : preSearchFilters.length ? preFilteredSearch : {};\n        const postFilteredSearch = postSearchFilters.length ? postSearchFilters.reduce((prev, next) => next(prev), destSearch) : destSearch;\n        const search = replaceEqualDeep(fromSearch, postFilteredSearch);\n        const searchStr = this.options.stringifySearch(search);\n        const hash = dest.hash === true ? this.latestLocation.hash : dest.hash ? functionalUpdate(dest.hash, this.latestLocation.hash) : void 0;\n        const hashStr = hash ? `#${hash}` : \"\";\n        let nextState = dest.state === true ? this.latestLocation.state : dest.state ? functionalUpdate(dest.state, this.latestLocation.state) : {};\n        nextState = replaceEqualDeep(this.latestLocation.state, nextState);\n        return {\n          pathname,\n          search,\n          searchStr,\n          state: nextState,\n          hash: hash ?? \"\",\n          href: `${pathname}${searchStr}${hashStr}`,\n          unmaskOnReload: dest.unmaskOnReload\n        };\n      };\n      const buildWithMatches = (dest = {}, maskedDest) => {\n        var _a;\n        const next = build(dest);\n        let maskedNext = maskedDest ? build(maskedDest) : void 0;\n        if (!maskedNext) {\n          let params = {};\n          const foundMask = (_a = this.options.routeMasks) == null ? void 0 : _a.find(d => {\n            const match = matchPathname(this.basepath, next.pathname, {\n              to: d.from,\n              caseSensitive: false,\n              fuzzy: false\n            });\n            if (match) {\n              params = match;\n              return true;\n            }\n            return false;\n          });\n          if (foundMask) {\n            const {\n              from,\n              ...maskProps\n            } = foundMask;\n            maskedDest = {\n              ...pick(opts, [\"from\"]),\n              ...maskProps,\n              params\n            };\n            maskedNext = build(maskedDest);\n          }\n        }\n        const nextMatches = this.matchRoutes(next);\n        const maskedMatches = maskedNext ? this.matchRoutes(maskedNext) : void 0;\n        const maskedFinal = maskedNext ? build(maskedDest, maskedMatches) : void 0;\n        const final = build(dest, nextMatches);\n        if (maskedFinal) {\n          final.maskedLocation = maskedFinal;\n        }\n        return final;\n      };\n      if (opts.mask) {\n        return buildWithMatches(opts, {\n          ...pick(opts, [\"from\"]),\n          ...opts.mask\n        });\n      }\n      return buildWithMatches(opts);\n    };\n    this.commitLocation = ({\n      viewTransition,\n      ignoreBlocker,\n      ...next\n    }) => {\n      const isSameState = () => {\n        next.state.key = this.latestLocation.state.key;\n        const isEqual = deepEqual(next.state, this.latestLocation.state);\n        delete next.state.key;\n        return isEqual;\n      };\n      const isSameUrl = this.latestLocation.href === next.href;\n      const previousCommitPromise = this.commitLocationPromise;\n      this.commitLocationPromise = createControlledPromise(() => {\n        previousCommitPromise == null ? void 0 : previousCommitPromise.resolve();\n      });\n      if (isSameUrl && isSameState()) {\n        this.load();\n      } else {\n        let {\n          maskedLocation,\n          ...nextHistory\n        } = next;\n        if (maskedLocation) {\n          nextHistory = {\n            ...maskedLocation,\n            state: {\n              ...maskedLocation.state,\n              __tempKey: void 0,\n              __tempLocation: {\n                ...nextHistory,\n                search: nextHistory.searchStr,\n                state: {\n                  ...nextHistory.state,\n                  __tempKey: void 0,\n                  __tempLocation: void 0,\n                  key: void 0\n                }\n              }\n            }\n          };\n          if (nextHistory.unmaskOnReload ?? this.options.unmaskOnReload ?? false) {\n            nextHistory.state.__tempKey = this.tempLocationKey;\n          }\n        }\n        this.shouldViewTransition = viewTransition;\n        this.history[next.replace ? \"replace\" : \"push\"](nextHistory.href, nextHistory.state, {\n          ignoreBlocker\n        });\n      }\n      this.resetNextScroll = next.resetScroll ?? true;\n      if (!this.history.subscribers.size) {\n        this.load();\n      }\n      return this.commitLocationPromise;\n    };\n    this.buildAndCommitLocation = ({\n      replace,\n      resetScroll,\n      viewTransition,\n      ignoreBlocker,\n      ...rest\n    } = {}) => {\n      const href = rest.href;\n      if (href) {\n        const parsed = parseHref(href, {});\n        rest.to = parsed.pathname;\n        rest.search = this.options.parseSearch(parsed.search);\n        rest.hash = parsed.hash;\n      }\n      const location = this.buildLocation(rest);\n      return this.commitLocation({\n        ...location,\n        viewTransition,\n        replace,\n        resetScroll,\n        ignoreBlocker\n      });\n    };\n    this.navigate = ({\n      to,\n      __isRedirect,\n      ...rest\n    }) => {\n      const toString = String(to);\n      let isExternal;\n      try {\n        new URL(`${toString}`);\n        isExternal = true;\n      } catch (e) {}\n      invariant(!isExternal, \"Attempting to navigate to external url with router.navigate!\");\n      return this.buildAndCommitLocation({\n        ...rest,\n        to\n        // to: toString,\n      });\n    };\n    this.load = async () => {\n      this.latestLocation = this.parseLocation(this.latestLocation);\n      this.__store.setState(s => ({\n        ...s,\n        loadedAt: Date.now()\n      }));\n      let redirect;\n      let notFound;\n      let loadPromise;\n      loadPromise = new Promise(resolve => {\n        this.startReactTransition(async () => {\n          var _a;\n          try {\n            const next = this.latestLocation;\n            const prevLocation = this.state.resolvedLocation;\n            const pathDidChange = prevLocation.href !== next.href;\n            this.cancelMatches();\n            let pendingMatches;\n            this.__store.batch(() => {\n              pendingMatches = this.matchRoutes(next);\n              this.__store.setState(s => ({\n                ...s,\n                status: \"pending\",\n                isLoading: true,\n                location: next,\n                pendingMatches,\n                // If a cached moved to pendingMatches, remove it from cachedMatches\n                cachedMatches: s.cachedMatches.filter(d => {\n                  return !pendingMatches.find(e => e.id === d.id);\n                })\n              }));\n            });\n            if (!this.state.redirect) {\n              this.emit({\n                type: \"onBeforeNavigate\",\n                fromLocation: prevLocation,\n                toLocation: next,\n                pathChanged: pathDidChange\n              });\n            }\n            this.emit({\n              type: \"onBeforeLoad\",\n              fromLocation: prevLocation,\n              toLocation: next,\n              pathChanged: pathDidChange\n            });\n            await this.loadMatches({\n              matches: pendingMatches,\n              location: next,\n              // eslint-disable-next-line @typescript-eslint/require-await\n              onReady: async () => {\n                this.startViewTransition(async () => {\n                  let exitingMatches;\n                  let enteringMatches;\n                  let stayingMatches;\n                  this.__store.batch(() => {\n                    this.__store.setState(s => {\n                      const previousMatches = s.matches;\n                      const newMatches = s.pendingMatches || s.matches;\n                      exitingMatches = previousMatches.filter(match => !newMatches.find(d => d.id === match.id));\n                      enteringMatches = newMatches.filter(match => !previousMatches.find(d => d.id === match.id));\n                      stayingMatches = previousMatches.filter(match => newMatches.find(d => d.id === match.id));\n                      return {\n                        ...s,\n                        isLoading: false,\n                        matches: newMatches,\n                        pendingMatches: void 0,\n                        cachedMatches: [...s.cachedMatches, ...exitingMatches.filter(d => d.status !== \"error\")]\n                      };\n                    });\n                    this.cleanCache();\n                  });\n                  [[exitingMatches, \"onLeave\"], [enteringMatches, \"onEnter\"], [stayingMatches, \"onStay\"]].forEach(([matches, hook]) => {\n                    matches.forEach(match => {\n                      var _a2, _b;\n                      (_b = (_a2 = this.looseRoutesById[match.routeId].options)[hook]) == null ? void 0 : _b.call(_a2, match);\n                    });\n                  });\n                });\n              }\n            });\n          } catch (err) {\n            if (isResolvedRedirect(err)) {\n              redirect = err;\n              if (!this.isServer) {\n                this.navigate({\n                  ...err,\n                  replace: true,\n                  __isRedirect: true\n                });\n              }\n            } else if (isNotFound(err)) {\n              notFound = err;\n            }\n            this.__store.setState(s => ({\n              ...s,\n              statusCode: redirect ? redirect.statusCode : notFound ? 404 : s.matches.some(d => d.status === \"error\") ? 500 : 200,\n              redirect\n            }));\n          }\n          if (this.latestLoadPromise === loadPromise) {\n            (_a = this.commitLocationPromise) == null ? void 0 : _a.resolve();\n            this.latestLoadPromise = void 0;\n            this.commitLocationPromise = void 0;\n          }\n          resolve();\n        });\n      });\n      this.latestLoadPromise = loadPromise;\n      await loadPromise;\n      while (this.latestLoadPromise && loadPromise !== this.latestLoadPromise) {\n        await this.latestLoadPromise;\n      }\n    };\n    this.startViewTransition = fn => {\n      var _a, _b;\n      const shouldViewTransition = this.shouldViewTransition ?? this.options.defaultViewTransition;\n      delete this.shouldViewTransition;\n      ((_b = (_a = shouldViewTransition && typeof document !== \"undefined\" ? document : void 0) == null ? void 0 : _a.startViewTransition) == null ? void 0 : _b.call(_a, fn)) || fn();\n    };\n    this.updateMatch = (id, updater) => {\n      var _a;\n      let updated;\n      const isPending = (_a = this.state.pendingMatches) == null ? void 0 : _a.find(d => d.id === id);\n      const isMatched = this.state.matches.find(d => d.id === id);\n      const matchesKey = isPending ? \"pendingMatches\" : isMatched ? \"matches\" : \"cachedMatches\";\n      this.__store.setState(s => {\n        var _a2;\n        return {\n          ...s,\n          [matchesKey]: (_a2 = s[matchesKey]) == null ? void 0 : _a2.map(d => d.id === id ? updated = updater(d) : d)\n        };\n      });\n      return updated;\n    };\n    this.getMatch = matchId => {\n      return [...this.state.cachedMatches, ...(this.state.pendingMatches ?? []), ...this.state.matches].find(d => d.id === matchId);\n    };\n    this.loadMatches = async ({\n      location,\n      matches,\n      preload,\n      onReady,\n      updateMatch = this.updateMatch\n    }) => {\n      let firstBadMatchIndex;\n      let rendered = false;\n      const triggerOnReady = async () => {\n        if (!rendered) {\n          rendered = true;\n          await (onReady == null ? void 0 : onReady());\n        }\n      };\n      if (!this.isServer && !this.state.matches.length) {\n        triggerOnReady();\n      }\n      const handleRedirectAndNotFound = (match, err) => {\n        var _a, _b, _c;\n        if (isResolvedRedirect(err)) throw err;\n        if (isRedirect(err) || isNotFound(err)) {\n          updateMatch(match.id, prev => ({\n            ...prev,\n            status: isRedirect(err) ? \"redirected\" : isNotFound(err) ? \"notFound\" : \"error\",\n            isFetching: false,\n            error: err,\n            beforeLoadPromise: void 0,\n            loaderPromise: void 0\n          }));\n          if (!err.routeId) {\n            err.routeId = match.routeId;\n          }\n          (_a = match.beforeLoadPromise) == null ? void 0 : _a.resolve();\n          (_b = match.loaderPromise) == null ? void 0 : _b.resolve();\n          (_c = match.loadPromise) == null ? void 0 : _c.resolve();\n          if (isRedirect(err)) {\n            rendered = true;\n            err = this.resolveRedirect({\n              ...err,\n              _fromLocation: location\n            });\n            throw err;\n          } else if (isNotFound(err)) {\n            this._handleNotFound(matches, err, {\n              updateMatch\n            });\n            throw err;\n          }\n        }\n      };\n      try {\n        await new Promise((resolveAll, rejectAll) => {\n          ;\n          (async () => {\n            var _a, _b, _c;\n            try {\n              const handleSerialError = (index, err, routerCode) => {\n                var _a2, _b2;\n                const {\n                  id: matchId,\n                  routeId\n                } = matches[index];\n                const route = this.looseRoutesById[routeId];\n                if (err instanceof Promise) {\n                  throw err;\n                }\n                err.routerCode = routerCode;\n                firstBadMatchIndex = firstBadMatchIndex ?? index;\n                handleRedirectAndNotFound(this.getMatch(matchId), err);\n                try {\n                  (_b2 = (_a2 = route.options).onError) == null ? void 0 : _b2.call(_a2, err);\n                } catch (errorHandlerErr) {\n                  err = errorHandlerErr;\n                  handleRedirectAndNotFound(this.getMatch(matchId), err);\n                }\n                updateMatch(matchId, prev => {\n                  var _a3;\n                  (_a3 = prev.beforeLoadPromise) == null ? void 0 : _a3.resolve();\n                  return {\n                    ...prev,\n                    error: err,\n                    status: \"error\",\n                    isFetching: false,\n                    updatedAt: Date.now(),\n                    abortController: new AbortController(),\n                    beforeLoadPromise: void 0\n                  };\n                });\n              };\n              for (const [index, {\n                id: matchId,\n                routeId\n              }] of matches.entries()) {\n                const existingMatch = this.getMatch(matchId);\n                const parentMatchId = (_a = matches[index - 1]) == null ? void 0 : _a.id;\n                if (\n                // If we are in the middle of a load, either of these will be present\n                // (not to be confused with `loadPromise`, which is always defined)\n                existingMatch.beforeLoadPromise || existingMatch.loaderPromise) {\n                  await existingMatch.beforeLoadPromise;\n                } else {\n                  try {\n                    updateMatch(matchId, prev => ({\n                      ...prev,\n                      loadPromise: createControlledPromise(() => {\n                        var _a2;\n                        (_a2 = prev.loadPromise) == null ? void 0 : _a2.resolve();\n                      }),\n                      beforeLoadPromise: createControlledPromise()\n                    }));\n                    const route = this.looseRoutesById[routeId];\n                    const abortController = new AbortController();\n                    const pendingMs = route.options.pendingMs ?? this.options.defaultPendingMs;\n                    const shouldPending = !!(onReady && !this.isServer && !preload && (route.options.loader || route.options.beforeLoad) && typeof pendingMs === \"number\" && pendingMs !== Infinity && (route.options.pendingComponent ?? this.options.defaultPendingComponent));\n                    let pendingTimeout;\n                    if (shouldPending) {\n                      pendingTimeout = setTimeout(() => {\n                        try {\n                          triggerOnReady();\n                        } catch {}\n                      }, pendingMs);\n                    }\n                    const {\n                      paramsError,\n                      searchError\n                    } = this.getMatch(matchId);\n                    if (paramsError) {\n                      handleSerialError(index, paramsError, \"PARSE_PARAMS\");\n                    }\n                    if (searchError) {\n                      handleSerialError(index, searchError, \"VALIDATE_SEARCH\");\n                    }\n                    const getParentMatchContext = () => parentMatchId ? this.getMatch(parentMatchId).context : this.options.context ?? {};\n                    updateMatch(matchId, prev => ({\n                      ...prev,\n                      isFetching: \"beforeLoad\",\n                      fetchCount: prev.fetchCount + 1,\n                      abortController,\n                      pendingTimeout,\n                      context: {\n                        ...getParentMatchContext(),\n                        ...prev.__routeContext,\n                        ...prev.__beforeLoadContext\n                      }\n                    }));\n                    const {\n                      search,\n                      params,\n                      context,\n                      cause\n                    } = this.getMatch(matchId);\n                    const beforeLoadFnContext = {\n                      search,\n                      abortController,\n                      params,\n                      preload: !!preload,\n                      context,\n                      location,\n                      navigate: opts => this.navigate({\n                        ...opts,\n                        _fromLocation: location\n                      }),\n                      buildLocation: this.buildLocation,\n                      cause: preload ? \"preload\" : cause\n                    };\n                    let beforeLoadContext = (await ((_c = (_b = route.options).beforeLoad) == null ? void 0 : _c.call(_b, beforeLoadFnContext))) ?? {};\n                    if (this.serializeLoaderData) {\n                      beforeLoadContext = this.serializeLoaderData(\"__beforeLoadContext\", beforeLoadContext, {\n                        router: this,\n                        match: this.getMatch(matchId)\n                      });\n                    }\n                    if (isRedirect(beforeLoadContext) || isNotFound(beforeLoadContext)) {\n                      handleSerialError(index, beforeLoadContext, \"BEFORE_LOAD\");\n                    }\n                    updateMatch(matchId, prev => {\n                      return {\n                        ...prev,\n                        __beforeLoadContext: beforeLoadContext,\n                        context: {\n                          ...getParentMatchContext(),\n                          ...prev.__routeContext,\n                          ...beforeLoadContext\n                        },\n                        abortController\n                      };\n                    });\n                  } catch (err) {\n                    handleSerialError(index, err, \"BEFORE_LOAD\");\n                  }\n                  updateMatch(matchId, prev => {\n                    var _a2;\n                    (_a2 = prev.beforeLoadPromise) == null ? void 0 : _a2.resolve();\n                    return {\n                      ...prev,\n                      beforeLoadPromise: void 0,\n                      isFetching: false\n                    };\n                  });\n                }\n              }\n              const validResolvedMatches = matches.slice(0, firstBadMatchIndex);\n              const matchPromises = [];\n              validResolvedMatches.forEach(({\n                id: matchId,\n                routeId\n              }, index) => {\n                matchPromises.push((async () => {\n                  const {\n                    loaderPromise: prevLoaderPromise\n                  } = this.getMatch(matchId);\n                  if (prevLoaderPromise) {\n                    await prevLoaderPromise;\n                  } else {\n                    const parentMatchPromise = matchPromises[index - 1];\n                    const route = this.looseRoutesById[routeId];\n                    const getLoaderContext = () => {\n                      const {\n                        params,\n                        loaderDeps,\n                        abortController,\n                        context,\n                        cause\n                      } = this.getMatch(matchId);\n                      return {\n                        params,\n                        deps: loaderDeps,\n                        preload: !!preload,\n                        parentMatchPromise,\n                        abortController,\n                        context,\n                        location,\n                        navigate: opts => this.navigate({\n                          ...opts,\n                          _fromLocation: location\n                        }),\n                        cause: preload ? \"preload\" : cause,\n                        route\n                      };\n                    };\n                    const age = Date.now() - this.getMatch(matchId).updatedAt;\n                    const staleAge = preload ? route.options.preloadStaleTime ?? this.options.defaultPreloadStaleTime ?? 3e4 : route.options.staleTime ?? this.options.defaultStaleTime ?? 0;\n                    const shouldReloadOption = route.options.shouldReload;\n                    const shouldReload = typeof shouldReloadOption === \"function\" ? shouldReloadOption(getLoaderContext()) : shouldReloadOption;\n                    updateMatch(matchId, prev => ({\n                      ...prev,\n                      loaderPromise: createControlledPromise(),\n                      preload: !!preload && !this.state.matches.find(d => d.id === matchId)\n                    }));\n                    const runLoader = async () => {\n                      var _a2, _b2, _c2, _d, _e, _f, _g, _h;\n                      try {\n                        const potentialPendingMinPromise = async () => {\n                          const latestMatch = this.getMatch(matchId);\n                          if (latestMatch.minPendingPromise) {\n                            await latestMatch.minPendingPromise;\n                          }\n                        };\n                        try {\n                          route._lazyPromise = route._lazyPromise || (route.lazyFn ? route.lazyFn().then(lazyRoute => {\n                            Object.assign(route.options, lazyRoute.options);\n                          }) : Promise.resolve());\n                          const componentsPromise = this.getMatch(matchId).componentsPromise || route._lazyPromise.then(() => Promise.all(componentTypes.map(async type => {\n                            const component = route.options[type];\n                            if (component == null ? void 0 : component.preload) {\n                              await component.preload();\n                            }\n                          })));\n                          updateMatch(matchId, prev => ({\n                            ...prev,\n                            isFetching: \"loader\",\n                            componentsPromise\n                          }));\n                          await route._lazyPromise;\n                          let loaderData = await ((_b2 = (_a2 = route.options).loader) == null ? void 0 : _b2.call(_a2, getLoaderContext()));\n                          if (this.serializeLoaderData) {\n                            loaderData = this.serializeLoaderData(\"loaderData\", loaderData, {\n                              router: this,\n                              match: this.getMatch(matchId)\n                            });\n                          }\n                          handleRedirectAndNotFound(this.getMatch(matchId), loaderData);\n                          await potentialPendingMinPromise();\n                          const meta = (_d = (_c2 = route.options).meta) == null ? void 0 : _d.call(_c2, {\n                            matches,\n                            match: this.getMatch(matchId),\n                            params: this.getMatch(matchId).params,\n                            loaderData\n                          });\n                          const headers = (_f = (_e = route.options).headers) == null ? void 0 : _f.call(_e, {\n                            loaderData\n                          });\n                          updateMatch(matchId, prev => ({\n                            ...prev,\n                            error: void 0,\n                            status: \"success\",\n                            isFetching: false,\n                            updatedAt: Date.now(),\n                            loaderData,\n                            meta,\n                            headers\n                          }));\n                        } catch (e) {\n                          let error = e;\n                          await potentialPendingMinPromise();\n                          handleRedirectAndNotFound(this.getMatch(matchId), e);\n                          try {\n                            (_h = (_g = route.options).onError) == null ? void 0 : _h.call(_g, e);\n                          } catch (onErrorError) {\n                            error = onErrorError;\n                            handleRedirectAndNotFound(this.getMatch(matchId), onErrorError);\n                          }\n                          updateMatch(matchId, prev => ({\n                            ...prev,\n                            error,\n                            status: \"error\",\n                            isFetching: false\n                          }));\n                        }\n                        await this.getMatch(matchId).componentsPromise;\n                      } catch (err) {\n                        handleRedirectAndNotFound(this.getMatch(matchId), err);\n                      }\n                    };\n                    const {\n                      status,\n                      invalid\n                    } = this.getMatch(matchId);\n                    if (preload && route.options.preload === false) {} else if (status === \"success\" && (invalid || (shouldReload ?? age > staleAge))) {\n                      ;\n                      (async () => {\n                        try {\n                          await runLoader();\n                        } catch (err) {}\n                      })();\n                    } else if (status !== \"success\") {\n                      await runLoader();\n                    }\n                    const {\n                      loaderPromise,\n                      loadPromise\n                    } = this.getMatch(matchId);\n                    loaderPromise == null ? void 0 : loaderPromise.resolve();\n                    loadPromise == null ? void 0 : loadPromise.resolve();\n                  }\n                  updateMatch(matchId, prev => ({\n                    ...prev,\n                    isFetching: false,\n                    loaderPromise: void 0\n                  }));\n                })());\n              });\n              await Promise.all(matchPromises);\n              resolveAll();\n            } catch (err) {\n              rejectAll(err);\n            }\n          })();\n        });\n        await triggerOnReady();\n      } catch (err) {\n        if (isRedirect(err) || isNotFound(err)) {\n          if (isNotFound(err) && !preload) {\n            await triggerOnReady();\n          }\n          throw err;\n        }\n      }\n      return matches;\n    };\n    this.invalidate = () => {\n      const invalidate = d => ({\n        ...d,\n        invalid: true,\n        ...(d.status === \"error\" ? {\n          status: \"pending\",\n          error: void 0\n        } : {})\n      });\n      this.__store.setState(s => {\n        var _a;\n        return {\n          ...s,\n          matches: s.matches.map(invalidate),\n          cachedMatches: s.cachedMatches.map(invalidate),\n          pendingMatches: (_a = s.pendingMatches) == null ? void 0 : _a.map(invalidate)\n        };\n      });\n      return this.load();\n    };\n    this.resolveRedirect = err => {\n      const redirect = err;\n      if (!redirect.href) {\n        redirect.href = this.buildLocation(redirect).href;\n      }\n      return redirect;\n    };\n    this.cleanCache = () => {\n      this.__store.setState(s => {\n        return {\n          ...s,\n          cachedMatches: s.cachedMatches.filter(d => {\n            const route = this.looseRoutesById[d.routeId];\n            if (!route.options.loader) {\n              return false;\n            }\n            const gcTime = (d.preload ? route.options.preloadGcTime ?? this.options.defaultPreloadGcTime : route.options.gcTime ?? this.options.defaultGcTime) ?? 5 * 60 * 1e3;\n            return d.status !== \"error\" && Date.now() - d.updatedAt < gcTime;\n          })\n        };\n      });\n    };\n    this.preloadRoute = async opts => {\n      const next = this.buildLocation(opts);\n      let matches = this.matchRoutes(next, {\n        throwOnError: true,\n        preload: true\n      });\n      const loadedMatchIds = Object.fromEntries([...this.state.matches, ...(this.state.pendingMatches ?? []), ...this.state.cachedMatches].map(d => [d.id, true]));\n      this.__store.batch(() => {\n        matches.forEach(match => {\n          if (!loadedMatchIds[match.id]) {\n            this.__store.setState(s => ({\n              ...s,\n              cachedMatches: [...s.cachedMatches, match]\n            }));\n          }\n        });\n      });\n      const activeMatchIds = new Set([...this.state.matches, ...(this.state.pendingMatches ?? [])].map(d => d.id));\n      try {\n        matches = await this.loadMatches({\n          matches,\n          location: next,\n          preload: true,\n          updateMatch: (id, updater) => {\n            if (activeMatchIds.has(id)) {\n              matches = matches.map(d => d.id === id ? updater(d) : d);\n            } else {\n              this.updateMatch(id, updater);\n            }\n          }\n        });\n        return matches;\n      } catch (err) {\n        if (isRedirect(err)) {\n          return await this.preloadRoute({\n            ...err,\n            _fromLocation: next\n          });\n        }\n        console.error(err);\n        return void 0;\n      }\n    };\n    this.matchRoute = (location, opts) => {\n      const matchLocation = {\n        ...location,\n        to: location.to ? this.resolvePathWithBase(location.from || \"\", location.to) : void 0,\n        params: location.params || {},\n        leaveParams: true\n      };\n      const next = this.buildLocation(matchLocation);\n      if ((opts == null ? void 0 : opts.pending) && this.state.status !== \"pending\") {\n        return false;\n      }\n      const pending = (opts == null ? void 0 : opts.pending) === void 0 ? !this.state.isLoading : opts.pending;\n      const baseLocation = pending ? this.latestLocation : this.state.resolvedLocation;\n      const match = matchPathname(this.basepath, baseLocation.pathname, {\n        ...opts,\n        to: next.pathname\n      });\n      if (!match) {\n        return false;\n      }\n      if (location.params) {\n        if (!deepEqual(match, location.params, true)) {\n          return false;\n        }\n      }\n      if (match && ((opts == null ? void 0 : opts.includeSearch) ?? true)) {\n        return deepEqual(baseLocation.search, next.search, true) ? match : false;\n      }\n      return match;\n    };\n    this.dehydrate = () => {\n      var _a;\n      const pickError = ((_a = this.options.errorSerializer) == null ? void 0 : _a.serialize) ?? defaultSerializeError;\n      return {\n        state: {\n          dehydratedMatches: this.state.matches.map(d => {\n            return {\n              ...pick(d, [\"id\", \"status\", \"updatedAt\"]),\n              // If an error occurs server-side during SSRing,\n              // send a small subset of the error to the client\n              error: d.error ? {\n                data: pickError(d.error),\n                __isServerError: true\n              } : void 0\n              // NOTE: We don't send the loader data here, because\n              // there is a potential that it needs to be streamed.\n              // Instead, we render it next to the route match in the HTML\n              // which gives us the potential to stream it via suspense.\n            };\n          })\n        },\n        manifest: this.manifest\n      };\n    };\n    this.hydrate = () => {\n      var _a, _b, _c;\n      let ctx;\n      if (typeof document !== \"undefined\") {\n        ctx = this.options.transformer.parse((_a = window.__TSR__) == null ? void 0 : _a.dehydrated);\n      }\n      invariant(ctx, \"Expected to find a dehydrated data on window.__TSR__.dehydrated... but we did not. Please file an issue!\");\n      this.dehydratedData = ctx.payload;\n      (_c = (_b = this.options).hydrate) == null ? void 0 : _c.call(_b, ctx.payload);\n      const dehydratedState = ctx.router.state;\n      const matches = this.matchRoutes(this.state.location).map(match => {\n        const dehydratedMatch = dehydratedState.dehydratedMatches.find(d => d.id === match.id);\n        invariant(dehydratedMatch, `Could not find a client-side match for dehydrated match with id: ${match.id}!`);\n        return {\n          ...match,\n          ...dehydratedMatch\n        };\n      });\n      this.__store.setState(s => {\n        return {\n          ...s,\n          matches\n        };\n      });\n      this.manifest = ctx.router.manifest;\n    };\n    this.injectedHtml = [];\n    this.injectHtml = html => {\n      const cb = () => {\n        this.injectedHtml = this.injectedHtml.filter(d => d !== cb);\n        return html;\n      };\n      this.injectedHtml.push(cb);\n    };\n    this.streamedKeys = /* @__PURE__ */new Set();\n    this.getStreamedValue = key => {\n      var _a;\n      if (this.isServer) {\n        return void 0;\n      }\n      const streamedValue = (_a = window.__TSR__) == null ? void 0 : _a.streamedValues[key];\n      if (!streamedValue) {\n        return;\n      }\n      if (!streamedValue.parsed) {\n        streamedValue.parsed = this.options.transformer.parse(streamedValue.value);\n      }\n      return streamedValue.parsed;\n    };\n    this.streamValue = (key, value) => {\n      var _a;\n      warning(!this.streamedKeys.has(key), \"Key has already been streamed: \" + key);\n      this.streamedKeys.add(key);\n      const children = `__TSR__.streamedValues['${key}'] = { value: ${(_a = this.serializer) == null ? void 0 : _a.call(this, this.options.transformer.stringify(value))}}`;\n      this.injectHtml(`<script class='tsr-once'>${children}${process.env.NODE_ENV === \"development\" ? `; console.info(\\`Injected From Server:\n        ${children}\\`)` : \"\"}; __TSR__.cleanScripts()<\\/script>`);\n    };\n    this._handleNotFound = (matches, err, {\n      updateMatch = this.updateMatch\n    } = {}) => {\n      const matchesByRouteId = Object.fromEntries(matches.map(match2 => [match2.routeId, match2]));\n      let routeCursor = (err.global ? this.looseRoutesById[rootRouteId] : this.looseRoutesById[err.routeId]) || this.looseRoutesById[rootRouteId];\n      while (!routeCursor.options.notFoundComponent && !this.options.defaultNotFoundComponent && routeCursor.id !== rootRouteId) {\n        routeCursor = routeCursor.parentRoute;\n        invariant(routeCursor, \"Found invalid route tree while trying to find not-found handler.\");\n      }\n      const match = matchesByRouteId[routeCursor.id];\n      invariant(match, \"Could not find match for route: \" + routeCursor.id);\n      updateMatch(match.id, prev => ({\n        ...prev,\n        status: \"notFound\",\n        error: err,\n        isFetching: false\n      }));\n      if (err.routerCode === \"BEFORE_LOAD\" && routeCursor.parentRoute) {\n        err.routeId = routeCursor.parentRoute.id;\n        this._handleNotFound(matches, err, {\n          updateMatch\n        });\n      }\n    };\n    this.hasNotFoundMatch = () => {\n      return this.__store.state.matches.some(d => d.status === \"notFound\" || d.globalNotFound);\n    };\n    this.update({\n      defaultPreloadDelay: 50,\n      defaultPendingMs: 1e3,\n      defaultPendingMinMs: 500,\n      context: void 0,\n      ...options,\n      notFoundMode: options.notFoundMode ?? \"fuzzy\",\n      stringifySearch: options.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options.parseSearch ?? defaultParseSearch,\n      transformer: options.transformer ?? defaultTransformer\n    });\n    if (typeof document !== \"undefined\") {\n      window.__TSR__ROUTER__ = this;\n    }\n  }\n  get state() {\n    return this.__store.state;\n  }\n  get looseRoutesById() {\n    return this.routesById;\n  }\n  matchRoutes(pathnameOrNext, locationSearchOrOpts, opts) {\n    if (typeof pathnameOrNext === \"string\") {\n      return this.matchRoutesInternal({\n        pathname: pathnameOrNext,\n        search: locationSearchOrOpts\n      }, opts);\n    } else {\n      return this.matchRoutesInternal(pathnameOrNext, locationSearchOrOpts);\n    }\n  }\n  matchRoutesInternal(next, opts) {\n    let routeParams = {};\n    const foundRoute = this.flatRoutes.find(route => {\n      const matchedParams = matchPathname(this.basepath, trimPathRight(next.pathname), {\n        to: route.fullPath,\n        caseSensitive: route.options.caseSensitive ?? this.options.caseSensitive,\n        fuzzy: true\n      });\n      if (matchedParams) {\n        routeParams = matchedParams;\n        return true;\n      }\n      return false;\n    });\n    let routeCursor = foundRoute || this.routesById[rootRouteId];\n    const matchedRoutes = [routeCursor];\n    let isGlobalNotFound = false;\n    if (\n    // If we found a route, and it's not an index route and we have left over path\n    foundRoute ? foundRoute.path !== \"/\" && routeParams[\"**\"] :\n    // Or if we didn't find a route and we have left over path\n    trimPathRight(next.pathname)) {\n      if (this.options.notFoundRoute) {\n        matchedRoutes.push(this.options.notFoundRoute);\n      } else {\n        isGlobalNotFound = true;\n      }\n    }\n    while (routeCursor.parentRoute) {\n      routeCursor = routeCursor.parentRoute;\n      matchedRoutes.unshift(routeCursor);\n    }\n    const globalNotFoundRouteId = (() => {\n      if (!isGlobalNotFound) {\n        return void 0;\n      }\n      if (this.options.notFoundMode !== \"root\") {\n        for (let i = matchedRoutes.length - 1; i >= 0; i--) {\n          const route = matchedRoutes[i];\n          if (route.children) {\n            return route.id;\n          }\n        }\n      }\n      return rootRouteId;\n    })();\n    const parseErrors = matchedRoutes.map(route => {\n      var _a;\n      let parsedParamsError;\n      const parseParams = ((_a = route.options.params) == null ? void 0 : _a.parse) ?? route.options.parseParams;\n      if (parseParams) {\n        try {\n          const parsedParams = parseParams(routeParams);\n          Object.assign(routeParams, parsedParams);\n        } catch (err) {\n          parsedParamsError = new PathParamError(err.message, {\n            cause: err\n          });\n          if (opts == null ? void 0 : opts.throwOnError) {\n            throw parsedParamsError;\n          }\n          return parsedParamsError;\n        }\n      }\n      return;\n    });\n    const matches = [];\n    matchedRoutes.forEach((route, index) => {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;\n      const parentMatch = matches[index - 1];\n      const [preMatchSearch, searchError] = (() => {\n        const parentSearch = (parentMatch == null ? void 0 : parentMatch.search) ?? next.search;\n        try {\n          const validator = typeof route.options.validateSearch === \"object\" ? route.options.validateSearch.parse : route.options.validateSearch;\n          const search = (validator == null ? void 0 : validator(parentSearch)) ?? {};\n          return [{\n            ...parentSearch,\n            ...search\n          }, void 0];\n        } catch (err) {\n          const searchParamError = new SearchParamError(err.message, {\n            cause: err\n          });\n          if (opts == null ? void 0 : opts.throwOnError) {\n            throw searchParamError;\n          }\n          return [parentSearch, searchParamError];\n        }\n      })();\n      const loaderDeps = ((_b = (_a = route.options).loaderDeps) == null ? void 0 : _b.call(_a, {\n        search: preMatchSearch\n      })) ?? \"\";\n      const loaderDepsHash = loaderDeps ? JSON.stringify(loaderDeps) : \"\";\n      const interpolatedPath = interpolatePath({\n        path: route.fullPath,\n        params: routeParams\n      });\n      const matchId = interpolatePath({\n        path: route.id,\n        params: routeParams,\n        leaveWildcards: true\n      }) + loaderDepsHash;\n      const existingMatch = this.getMatch(matchId);\n      const cause = this.state.matches.find(d => d.id === matchId) ? \"stay\" : \"enter\";\n      let match;\n      if (existingMatch) {\n        match = {\n          ...existingMatch,\n          cause,\n          params: routeParams\n        };\n      } else {\n        const status = route.options.loader || route.options.beforeLoad || route.lazyFn ? \"pending\" : \"success\";\n        match = {\n          id: matchId,\n          index,\n          routeId: route.id,\n          params: routeParams,\n          pathname: joinPaths([this.basepath, interpolatedPath]),\n          updatedAt: Date.now(),\n          search: {},\n          searchError: void 0,\n          status,\n          isFetching: false,\n          error: void 0,\n          paramsError: parseErrors[index],\n          __routeContext: {},\n          __beforeLoadContext: {},\n          context: {},\n          abortController: new AbortController(),\n          fetchCount: 0,\n          cause,\n          loaderDeps,\n          invalid: false,\n          preload: false,\n          links: (_d = (_c = route.options).links) == null ? void 0 : _d.call(_c),\n          scripts: (_f = (_e = route.options).scripts) == null ? void 0 : _f.call(_e),\n          staticData: route.options.staticData || {},\n          loadPromise: createControlledPromise(),\n          fullPath: route.fullPath\n        };\n      }\n      if (match.status === \"success\") {\n        match.meta = (_h = (_g = route.options).meta) == null ? void 0 : _h.call(_g, {\n          matches,\n          match,\n          params: match.params,\n          loaderData: match.loaderData\n        });\n        match.headers = (_j = (_i = route.options).headers) == null ? void 0 : _j.call(_i, {\n          loaderData: match.loaderData\n        });\n      }\n      if (!(opts == null ? void 0 : opts.preload)) {\n        match.globalNotFound = globalNotFoundRouteId === route.id;\n      }\n      match.search = replaceEqualDeep(match.search, preMatchSearch);\n      match.searchError = searchError;\n      const parentMatchId = parentMatch == null ? void 0 : parentMatch.id;\n      const parentContext = !parentMatchId ? this.options.context ?? {} : parentMatch.context ?? this.options.context ?? {};\n      match.context = {\n        ...parentContext,\n        ...match.__routeContext,\n        ...match.__beforeLoadContext\n      };\n      const contextFnContext = {\n        search: match.search,\n        params: match.params,\n        context: match.context,\n        location: next,\n        navigate: opts2 => this.navigate({\n          ...opts2,\n          _fromLocation: next\n        }),\n        buildLocation: this.buildLocation,\n        cause: match.cause,\n        abortController: match.abortController,\n        preload: !!match.preload\n      };\n      match.__routeContext = ((_l = (_k = route.options).context) == null ? void 0 : _l.call(_k, contextFnContext)) ?? {};\n      match.context = {\n        ...parentContext,\n        ...match.__routeContext,\n        ...match.__beforeLoadContext\n      };\n      matches.push(match);\n    });\n    return matches;\n  }\n}\nfunction lazyFn(fn, key) {\n  return async (...args) => {\n    const imported = await fn();\n    return imported[key || \"default\"](...args);\n  };\n}\nclass SearchParamError extends Error {}\nclass PathParamError extends Error {}\nfunction getInitialRouterState(location) {\n  return {\n    loadedAt: 0,\n    isLoading: false,\n    isTransitioning: false,\n    status: \"idle\",\n    resolvedLocation: {\n      ...location\n    },\n    location,\n    matches: [],\n    pendingMatches: [],\n    cachedMatches: [],\n    statusCode: 200\n  };\n}\nfunction defaultSerializeError(err) {\n  if (err instanceof Error) {\n    const obj = {\n      name: err.name,\n      message: err.message\n    };\n    if (process.env.NODE_ENV === \"development\") {\n      obj.stack = err.stack;\n    }\n    return obj;\n  }\n  return {\n    data: err\n  };\n}\nexport { PathParamError, Router, SearchParamError, componentTypes, createRouter, defaultSerializeError, getInitialRouterState, lazyFn };","map":{"version":3,"names":["componentTypes","createRouter","options","Router","constructor","tempLocationKey","Math","round","random","resetNextScroll","shouldViewTransition","subscribers","Set","startReactTransition","fn","update","newOptions","notFoundRoute","console","warn","previousOptions","isServer","document","basepath","trimPath","history","createMemoryHistory","initialEntries","createBrowserHistory","latestLocation","parseLocation","routeTree","buildRouteTree","__store","Store","getInitialRouterState","onUpdate","state","cachedMatches","filter","d","includes","status","routesById","routesByPath","init","originalIndex","id","recurseRoutes","childRoutes","forEach","childRoute","i","existingRoute","invariant","String","isRoot","path","trimmedFullPath","trimPathRight","fullPath","endsWith","children","length","scoredRoutes","routes","Object","values","trimmed","trimPathLeft","parsed","parsePathname","_a","value","shift","scores","map","segment","type","push","child","index","flatRoutes","sort","a","b","minLength","min","rank","subscribe","eventType","listener","add","delete","emit","routerEvent","previousLocation","parse","pathname","search","hash","parsedSearch","parseSearch","searchStr","stringifySearch","replaceEqualDeep","split","reverse","href","location","__tempLocation","__tempKey","parsedTempLocation","key","maskedLocation","resolvePathWithBase","from","resolvedPath","resolvePath","base","to","cleanPath","trailingSlash","cancelMatch","match","getMatch","abortController","abort","clearTimeout","pendingTimeout","cancelMatches","pendingMatches","buildLocation","opts","build","dest","matches","fromMatches","_fromLocation","matchRoutes","fromSearch","fromMatch","find","matchPathname","caseSensitive","fuzzy","fromPath","last","stayingMatches","e","routeId","fromRouteByFromPathRouteId","_b","prevParams","_c","params","nextParams","functionalUpdate","keys","route","looseRoutesById","_a2","stringify","stringifyParams","Boolean","interpolatePath","leaveWildcards","leaveParams","preSearchFilters","flat","postSearchFilters","preFilteredSearch","reduce","prev","next","destSearch","postFilteredSearch","hashStr","nextState","unmaskOnReload","buildWithMatches","maskedDest","maskedNext","foundMask","routeMasks","maskProps","pick","nextMatches","maskedMatches","maskedFinal","final","mask","commitLocation","viewTransition","ignoreBlocker","isSameState","isEqual","deepEqual","isSameUrl","previousCommitPromise","commitLocationPromise","createControlledPromise","resolve","load","nextHistory","replace","resetScroll","size","buildAndCommitLocation","rest","parseHref","navigate","__isRedirect","toString","isExternal","URL","setState","s","loadedAt","Date","now","redirect","notFound","loadPromise","Promise","prevLocation","resolvedLocation","pathDidChange","batch","isLoading","fromLocation","toLocation","pathChanged","loadMatches","onReady","startViewTransition","exitingMatches","enteringMatches","previousMatches","newMatches","cleanCache","hook","call","err","isResolvedRedirect","isNotFound","statusCode","some","latestLoadPromise","defaultViewTransition","updateMatch","updater","updated","isPending","isMatched","matchesKey","matchId","preload","firstBadMatchIndex","rendered","triggerOnReady","handleRedirectAndNotFound","isRedirect","isFetching","error","beforeLoadPromise","loaderPromise","resolveRedirect","_handleNotFound","resolveAll","rejectAll","handleSerialError","routerCode","_b2","onError","errorHandlerErr","_a3","updatedAt","AbortController","entries","existingMatch","parentMatchId","pendingMs","defaultPendingMs","shouldPending","loader","beforeLoad","Infinity","pendingComponent","defaultPendingComponent","setTimeout","paramsError","searchError","getParentMatchContext","context","fetchCount","__routeContext","__beforeLoadContext","cause","beforeLoadFnContext","beforeLoadContext","serializeLoaderData","router","validResolvedMatches","slice","matchPromises","prevLoaderPromise","parentMatchPromise","getLoaderContext","loaderDeps","deps","age","staleAge","preloadStaleTime","defaultPreloadStaleTime","staleTime","defaultStaleTime","shouldReloadOption","shouldReload","runLoader","potentialPendingMinPromise","latestMatch","minPendingPromise","_lazyPromise","lazyFn","then","lazyRoute","assign","componentsPromise","all","component","loaderData","meta","_d","_c2","headers","_f","_e","_h","_g","onErrorError","invalid","invalidate","gcTime","preloadGcTime","defaultPreloadGcTime","defaultGcTime","preloadRoute","throwOnError","loadedMatchIds","fromEntries","activeMatchIds","has","matchRoute","matchLocation","pending","baseLocation","includeSearch","dehydrate","pickError","errorSerializer","serialize","defaultSerializeError","dehydratedMatches","data","__isServerError","manifest","hydrate","ctx","transformer","window","__TSR__","dehydrated","dehydratedData","payload","dehydratedState","dehydratedMatch","injectedHtml","injectHtml","html","cb","streamedKeys","getStreamedValue","streamedValue","streamedValues","streamValue","warning","serializer","process","env","NODE_ENV","matchesByRouteId","match2","routeCursor","global","rootRouteId","notFoundComponent","defaultNotFoundComponent","parentRoute","hasNotFoundMatch","globalNotFound","defaultPreloadDelay","defaultPendingMinMs","notFoundMode","defaultStringifySearch","defaultParseSearch","defaultTransformer","__TSR__ROUTER__","pathnameOrNext","locationSearchOrOpts","matchRoutesInternal","routeParams","foundRoute","matchedParams","matchedRoutes","isGlobalNotFound","unshift","globalNotFoundRouteId","parseErrors","parsedParamsError","parseParams","parsedParams","PathParamError","message","parentMatch","preMatchSearch","parentSearch","validator","validateSearch","searchParamError","SearchParamError","loaderDepsHash","JSON","interpolatedPath","joinPaths","links","scripts","staticData","_j","_i","parentContext","contextFnContext","opts2","_l","_k","args","imported","Error","isTransitioning","obj","name","stack"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/node_modules/@tanstack/react-router/src/router.ts"],"sourcesContent":["import {\n  createBrowserHistory,\n  createMemoryHistory,\n  parseHref,\n} from '@tanstack/history'\nimport { Store } from '@tanstack/react-store'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { rootRouteId } from './root'\nimport { defaultParseSearch, defaultStringifySearch } from './searchParams'\nimport {\n  createControlledPromise,\n  deepEqual,\n  functionalUpdate,\n  last,\n  pick,\n  replaceEqualDeep,\n} from './utils'\nimport {\n  cleanPath,\n  interpolatePath,\n  joinPaths,\n  matchPathname,\n  parsePathname,\n  resolvePath,\n  trimPath,\n  trimPathLeft,\n  trimPathRight,\n} from './path'\nimport { isRedirect, isResolvedRedirect } from './redirects'\nimport { isNotFound } from './not-found'\nimport { defaultTransformer } from './transformer'\nimport type * as React from 'react'\nimport type {\n  HistoryLocation,\n  HistoryState,\n  RouterHistory,\n} from '@tanstack/history'\nimport type { NoInfer } from '@tanstack/react-store'\nimport type { Manifest } from './manifest'\nimport type {\n  AnyContext,\n  AnyRoute,\n  AnyRouteWithContext,\n  AnySearchSchema,\n  BeforeLoadContextOptions,\n  ErrorRouteComponent,\n  LoaderFnContext,\n  NotFoundRouteComponent,\n  RootRoute,\n  RouteComponent,\n  RouteContextOptions,\n  RouteMask,\n} from './route'\nimport type {\n  FullSearchSchema,\n  RouteById,\n  RoutePaths,\n  RoutesById,\n  RoutesByPath,\n} from './routeInfo'\nimport type {\n  ControlledPromise,\n  NonNullableUpdater,\n  PickAsRequired,\n  Updater,\n} from './utils'\nimport type {\n  AnyRouteMatch,\n  MakeRouteMatch,\n  MatchRouteOptions,\n} from './Matches'\nimport type { ParsedLocation } from './location'\nimport type { SearchParser, SearchSerializer } from './searchParams'\nimport type {\n  BuildLocationFn,\n  CommitLocationOptions,\n  NavigateFn,\n} from './RouterProvider'\nimport type { AnyRedirect, ResolvedRedirect } from './redirects'\nimport type { NotFoundError } from './not-found'\nimport type { NavigateOptions, ResolveRelativePath, ToOptions } from './link'\nimport type { RouterTransformer } from './transformer'\n\n//\n\ndeclare global {\n  interface Window {\n    __TSR__?: {\n      matches: Array<{\n        __beforeLoadContext?: string\n        loaderData?: string\n        extracted?: Array<ExtractedEntry>\n      }>\n      streamedValues: Record<\n        string,\n        {\n          value: any\n          parsed: any\n        }\n      >\n      cleanScripts: () => void\n      dehydrated?: any\n    }\n    __TSR_ROUTER_CONTEXT__?: React.Context<Router<any, any>>\n  }\n}\n\nexport interface Register {\n  // router: Router\n}\n\nexport type AnyRouter = Router<any, any, any, any>\n\nexport type AnyRouterWithContext<TContext> = Router<\n  AnyRouteWithContext<TContext>,\n  any,\n  any,\n  any\n>\n\nexport type RegisteredRouter = Register extends {\n  router: infer TRouter extends AnyRouter\n}\n  ? TRouter\n  : AnyRouter\n\nexport type HydrationCtx = {\n  router: DehydratedRouter\n  payload: Record<string, any>\n}\n\nexport type InferRouterContext<TRouteTree extends AnyRoute> =\n  TRouteTree extends RootRoute<\n    any,\n    infer TRouterContext extends AnyContext,\n    any,\n    any,\n    any,\n    any,\n    any\n  >\n    ? TRouterContext\n    : AnyContext\n\nexport type ExtractedEntry = {\n  dataType: '__beforeLoadContext' | 'loaderData'\n  type: 'promise' | 'stream'\n  path: Array<string>\n  value: any\n  id: number\n  streamState?: StreamState\n  matchIndex: number\n}\n\nexport type StreamState = {\n  promises: Array<ControlledPromise<string | null>>\n}\n\nexport type RouterContextOptions<TRouteTree extends AnyRoute> =\n  AnyContext extends InferRouterContext<TRouteTree>\n    ? {\n        context?: InferRouterContext<TRouteTree>\n      }\n    : {\n        context: InferRouterContext<TRouteTree>\n      }\n\nexport type TrailingSlashOption = 'always' | 'never' | 'preserve'\n\nexport interface RouterOptions<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n  TSerializedError extends Record<string, any> = Record<string, any>,\n> {\n  /**\n   * The history object that will be used to manage the browser history.\n   *\n   * If not provided, a new createBrowserHistory instance will be created and used.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#history-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/history-types)\n   */\n  history?: RouterHistory\n  /**\n   * A function that will be used to stringify search params when generating links.\n   *\n   * @default defaultStringifySearch\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#stringifysearch-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/custom-search-param-serialization)\n   */\n  stringifySearch?: SearchSerializer\n  /**\n   * A function that will be used to parse search params when parsing the current location.\n   *\n   * @default defaultParseSearch\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#parsesearch-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/custom-search-param-serialization)\n   */\n  parseSearch?: SearchParser\n  /**\n   * If `false`, routes will not be preloaded by default in any way.\n   *\n   * If `'intent'`, routes will be preloaded by default when the user hovers over a link or a `touchstart` event is detected on a `<Link>`.\n   *\n   * If `'viewport'`, routes will be preloaded by default when they are within the viewport.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreload-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreload?: false | 'intent' | 'viewport'\n  /**\n   * The delay in milliseconds that a route must be hovered over or touched before it is preloaded.\n   *\n   * @default 50\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloaddelay-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading#preload-delay)\n   */\n  defaultPreloadDelay?: number\n  /**\n   * The default `component` a route should use if no component is provided.\n   *\n   * @default Outlet\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultcomponent-property)\n   */\n  defaultComponent?: RouteComponent\n  /**\n   * The default `errorComponent` a route should use if no error component is provided.\n   *\n   * @default ErrorComponent\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaulterrorcomponent-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#handling-errors-with-routeoptionserrorcomponent)\n   */\n  defaultErrorComponent?: ErrorRouteComponent\n  /**\n   * The default `pendingComponent` a route should use if no pending component is provided.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpendingcomponent-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#showing-a-pending-component)\n   */\n  defaultPendingComponent?: RouteComponent\n  /**\n   * The default `pendingMs` a route should use if no pendingMs is provided.\n   *\n   * @default 1000\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpendingms-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#avoiding-pending-component-flash)\n   */\n  defaultPendingMs?: number\n  /**\n   * The default `pendingMinMs` a route should use if no pendingMinMs is provided.\n   *\n   * @default 500\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpendingminms-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#avoiding-pending-component-flash)\n   */\n  defaultPendingMinMs?: number\n  /**\n   * The default `staleTime` a route should use if no staleTime is provided. This is the time in milliseconds that a route will be considered fresh.\n   *\n   * @default 0\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultstaletime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#key-options)\n   */\n  defaultStaleTime?: number\n  /**\n   * The default `preloadStaleTime` a route should use if no preloadStaleTime is provided.\n   *\n   * @default 30_000 `(30 seconds)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloadstaletime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreloadStaleTime?: number\n  /**\n   * The default `defaultPreloadGcTime` a route should use if no preloadGcTime is provided.\n   *\n   * @default 1_800_000 `(30 minutes)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultpreloadgctime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/preloading)\n   */\n  defaultPreloadGcTime?: number\n  /**\n   * The default `onCatch` handler for errors caught by the Router ErrorBoundary\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultoncatch-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#handling-errors-with-routeoptionsoncatch)\n   */\n  defaultOnCatch?: (error: Error, errorInfo: React.ErrorInfo) => void\n  /**\n   * If `true`, route navigations will called using `document.startViewTransition()`.\n   *\n   * If the browser does not support this api, this option will be ignored.\n   *\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/startViewTransition) for more information on how this function works.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultviewtransition-property)\n   */\n  defaultViewTransition?: boolean\n  /**\n   * @default 'fuzzy'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#notfoundmode-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/not-found-errors#the-notfoundmode-option)\n   */\n  notFoundMode?: 'root' | 'fuzzy'\n  /**\n   * The default `gcTime` a route should use if no\n   *\n   * @default 1_800_000 `(30 minutes)`\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultgctime-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/data-loading#key-options)\n   */\n  defaultGcTime?: number\n  /**\n   * If `true`, all routes will be matched as case-sensitive.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#casesensitive-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-trees#case-sensitivity)\n   */\n  caseSensitive?: boolean\n  /**\n   * __Required*__\n   *\n   * The route tree that will be used to configure the router instance.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#routetree-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-trees)\n   */\n  routeTree?: TRouteTree\n  /**\n   * The basepath for then entire router. This is useful for mounting a router instance at a subpath.\n   *\n   * @default '/'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#basepath-property)\n   */\n  basepath?: string\n  /**\n   * The root context that will be provided to all routes in the route tree.\n   *\n   * This can be used to provide a context to all routes in the tree without having to provide it to each route individually.\n   *\n   * Optional or required if the root route was created with [`createRootRouteWithContext()`](https://tanstack.com/router/latest/docs/framework/react/api/router/createRootRouteWithContextFunction).\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#context-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/router-context)\n   */\n  context?: InferRouterContext<TRouteTree>\n  /**\n   * A function that will be called when the router is dehydrated.\n   *\n   * The return value of this function will be serialized and stored in the router's dehydrated state.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#dehydrate-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/external-data-loading#critical-dehydrationhydration)\n   */\n  dehydrate?: () => TDehydrated\n  /**\n   * A function that will be called when the router is hydrated.\n   *\n   * The return value of this function will be serialized and stored in the router's dehydrated state.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#hydrate-method)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/external-data-loading#critical-dehydrationhydration)\n   */\n  hydrate?: (dehydrated: TDehydrated) => void\n  /**\n   * An array of route masks that will be used to mask routes in the route tree.\n   *\n   * Route masking is when you display a route at a different path than the one it is configured to match, like a modal popup that when shared will unmask to the modal's content instead of the modal's context.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#routemasks-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-masking)\n   */\n  routeMasks?: Array<RouteMask<TRouteTree>>\n  /**\n   * If `true`, route masks will, by default, be removed when the page is reloaded.\n   *\n   * This can be overridden on a per-mask basis by setting the `unmaskOnReload` option on the mask, or on a per-navigation basis by setting the `unmaskOnReload` option in the `Navigate` options.\n   *\n   * @default false\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#unmaskonreload-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/route-masking#unmasking-on-page-reload)\n   */\n  unmaskOnReload?: boolean\n  /**\n   * A component that will be used to wrap the entire router.\n   *\n   * This is useful for providing a context to the entire router.\n   *\n   * Only non-DOM-rendering components like providers should be used, anything else will cause a hydration error.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#wrap-property)\n   */\n  Wrap?: (props: { children: any }) => React.JSX.Element\n  /**\n   * A component that will be used to wrap the inner contents of the router.\n   *\n   * This is useful for providing a context to the inner contents of the router where you also need access to the router context and hooks.\n   *\n   * Only non-DOM-rendering components like providers should be used, anything else will cause a hydration error.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#innerwrap-property)\n   */\n  InnerWrap?: (props: { children: any }) => React.JSX.Element\n  /**\n   * Use `notFoundComponent` instead.\n   *\n   * @deprecated\n   * See https://tanstack.com/router/v1/docs/guide/not-found-errors#migrating-from-notfoundroute for more info.\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#notfoundroute-property)\n   */\n  notFoundRoute?: AnyRoute\n  /**\n   * The default `notFoundComponent` a route should use if no notFound component is provided.\n   *\n   * @default NotFound\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#defaultnotfoundcomponent-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/not-found-errors#default-router-wide-not-found-handling)\n   */\n  defaultNotFoundComponent?: NotFoundRouteComponent\n  /**\n   * The transformer that will be used when sending data between the server and the client during SSR.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#transformer-property)\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/guide/ssr#data-transformers)\n   */\n  transformer?: RouterTransformer\n  /**\n   * The serializer object that will be used to determine how errors are serialized and deserialized between the server and the client.\n   *\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#errorserializer-property)\n   */\n  errorSerializer?: RouterErrorSerializer<TSerializedError>\n  /**\n   * Configures how trailing slashes are treated.\n   *\n   * - `'always'` will add a trailing slash if not present\n   * - `'never'` will remove the trailing slash if present\n   * - `'preserve'` will not modify the trailing slash.\n   *\n   * @default 'never'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#trailingslash-property)\n   */\n  trailingSlash?: TTrailingSlashOption\n  /**\n   * While usually automatic, sometimes it can be useful to force the router into a server-side state, e.g. when using the router in a non-browser environment that has access to a global.document object.\n   *\n   * @default typeof document !== 'undefined'\n   * @link [API Docs](https://tanstack.com/router/latest/docs/framework/react/api/router/RouterOptionsType#isserver property)\n   */\n  isServer?: boolean\n}\n\nexport interface RouterErrorSerializer<TSerializedError> {\n  serialize: (err: unknown) => TSerializedError\n  deserialize: (err: TSerializedError) => unknown\n}\n\nexport interface RouterState<\n  TRouteTree extends AnyRoute = AnyRoute,\n  TRouteMatch = MakeRouteMatch<TRouteTree>,\n> {\n  status: 'pending' | 'idle'\n  loadedAt: number\n  isLoading: boolean\n  isTransitioning: boolean\n  matches: Array<TRouteMatch>\n  pendingMatches?: Array<TRouteMatch>\n  cachedMatches: Array<TRouteMatch>\n  location: ParsedLocation<FullSearchSchema<TRouteTree>>\n  resolvedLocation: ParsedLocation<FullSearchSchema<TRouteTree>>\n  statusCode: number\n  redirect?: ResolvedRedirect\n}\n\nexport type ListenerFn<TEvent extends RouterEvent> = (event: TEvent) => void\n\nexport interface BuildNextOptions {\n  to?: string | number | null\n  params?: true | Updater<unknown>\n  search?: true | Updater<unknown>\n  hash?: true | Updater<string>\n  state?: true | NonNullableUpdater<HistoryState>\n  mask?: {\n    to?: string | number | null\n    params?: true | Updater<unknown>\n    search?: true | Updater<unknown>\n    hash?: true | Updater<string>\n    state?: true | NonNullableUpdater<HistoryState>\n    unmaskOnReload?: boolean\n  }\n  from?: string\n  fromSearch?: unknown\n  _fromLocation?: ParsedLocation\n}\n\nexport interface DehydratedRouterState {\n  dehydratedMatches: Array<DehydratedRouteMatch>\n}\n\nexport type DehydratedRouteMatch = Pick<\n  MakeRouteMatch,\n  'id' | 'status' | 'updatedAt' | 'loaderData'\n>\n\nexport interface DehydratedRouter {\n  state: DehydratedRouterState\n  manifest?: Manifest\n}\n\nexport type RouterConstructorOptions<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDehydrated extends Record<string, any>,\n  TSerializedError extends Record<string, any>,\n> = Omit<\n  RouterOptions<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDehydrated,\n    TSerializedError\n  >,\n  'context'\n> &\n  RouterContextOptions<TRouteTree>\n\nexport const componentTypes = [\n  'component',\n  'errorComponent',\n  'pendingComponent',\n  'notFoundComponent',\n] as const\n\nexport type RouterEvents = {\n  onBeforeNavigate: {\n    type: 'onBeforeNavigate'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n  onBeforeLoad: {\n    type: 'onBeforeLoad'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n  onLoad: {\n    type: 'onLoad'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n  onResolved: {\n    type: 'onResolved'\n    fromLocation: ParsedLocation\n    toLocation: ParsedLocation\n    pathChanged: boolean\n  }\n}\n\nexport type RouterEvent = RouterEvents[keyof RouterEvents]\n\nexport type RouterListener<TRouterEvent extends RouterEvent> = {\n  eventType: TRouterEvent['type']\n  fn: ListenerFn<TRouterEvent>\n}\n\nexport function createRouter<\n  TRouteTree extends AnyRoute,\n  TTrailingSlashOption extends TrailingSlashOption,\n  TDehydrated extends Record<string, any> = Record<string, any>,\n  TSerializedError extends Record<string, any> = Record<string, any>,\n>(\n  options: RouterConstructorOptions<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDehydrated,\n    TSerializedError\n  >,\n) {\n  return new Router<\n    TRouteTree,\n    TTrailingSlashOption,\n    TDehydrated,\n    TSerializedError\n  >(options)\n}\n\ntype MatchRoutesOpts = { preload?: boolean; throwOnError?: boolean }\n\nexport class Router<\n  in out TRouteTree extends AnyRoute,\n  in out TTrailingSlashOption extends TrailingSlashOption,\n  in out TDehydrated extends Record<string, any> = Record<string, any>,\n  in out TSerializedError extends Record<string, any> = Record<string, any>,\n> {\n  // Option-independent properties\n  tempLocationKey: string | undefined = `${Math.round(\n    Math.random() * 10000000,\n  )}`\n  resetNextScroll = true\n  shouldViewTransition?: boolean = undefined\n  subscribers = new Set<RouterListener<RouterEvent>>()\n  dehydratedData?: TDehydrated\n  viewTransitionPromise?: ControlledPromise<true>\n  manifest?: Manifest\n  AfterEachMatch?: (props: {\n    match: Pick<\n      AnyRouteMatch,\n      'id' | 'status' | 'error' | 'loadPromise' | 'minPendingPromise'\n    >\n    matchIndex: number\n  }) => any\n  serializeLoaderData?: (\n    type: '__beforeLoadContext' | 'loaderData',\n    loaderData: any,\n    ctx: {\n      router: AnyRouter\n      match: AnyRouteMatch\n    },\n  ) => any\n  serializer?: (data: any) => string\n\n  // Must build in constructor\n  __store!: Store<RouterState<TRouteTree>>\n  options!: PickAsRequired<\n    Omit<\n      RouterOptions<\n        TRouteTree,\n        TTrailingSlashOption,\n        TDehydrated,\n        TSerializedError\n      >,\n      'transformer'\n    > & {\n      transformer: RouterTransformer\n    },\n    'stringifySearch' | 'parseSearch' | 'context'\n  >\n  history!: RouterHistory\n  latestLocation!: ParsedLocation<FullSearchSchema<TRouteTree>>\n  basepath!: string\n  routeTree!: TRouteTree\n  routesById!: RoutesById<TRouteTree>\n  routesByPath!: RoutesByPath<TRouteTree>\n  flatRoutes!: Array<AnyRoute>\n  isServer!: boolean\n\n  /**\n   * @deprecated Use the `createRouter` function instead\n   */\n  constructor(\n    options: RouterConstructorOptions<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDehydrated,\n      TSerializedError\n    >,\n  ) {\n    this.update({\n      defaultPreloadDelay: 50,\n      defaultPendingMs: 1000,\n      defaultPendingMinMs: 500,\n      context: undefined!,\n      ...options,\n      notFoundMode: options.notFoundMode ?? 'fuzzy',\n      stringifySearch: options.stringifySearch ?? defaultStringifySearch,\n      parseSearch: options.parseSearch ?? defaultParseSearch,\n      transformer: options.transformer ?? defaultTransformer,\n    })\n\n    if (typeof document !== 'undefined') {\n      ;(window as any).__TSR__ROUTER__ = this\n    }\n  }\n\n  // These are default implementations that can optionally be overridden\n  // by the router provider once rendered. We provide these so that the\n  // router can be used in a non-react environment if necessary\n  startReactTransition: (fn: () => void) => void = (fn) => fn()\n\n  update = (\n    newOptions: RouterConstructorOptions<\n      TRouteTree,\n      TTrailingSlashOption,\n      TDehydrated,\n      TSerializedError\n    >,\n  ) => {\n    if (newOptions.notFoundRoute) {\n      console.warn(\n        'The notFoundRoute API is deprecated and will be removed in the next major version. See https://tanstack.com/router/v1/docs/guide/not-found-errors#migrating-from-notfoundroute for more info.',\n      )\n    }\n\n    const previousOptions = this.options\n    this.options = {\n      ...this.options,\n      ...newOptions,\n    }\n\n    this.isServer = this.options.isServer ?? typeof document === 'undefined'\n\n    if (\n      !this.basepath ||\n      (newOptions.basepath && newOptions.basepath !== previousOptions.basepath)\n    ) {\n      if (\n        newOptions.basepath === undefined ||\n        newOptions.basepath === '' ||\n        newOptions.basepath === '/'\n      ) {\n        this.basepath = '/'\n      } else {\n        this.basepath = `/${trimPath(newOptions.basepath)}`\n      }\n    }\n\n    if (\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      !this.history ||\n      (this.options.history && this.options.history !== this.history)\n    ) {\n      this.history =\n        this.options.history ??\n        (this.isServer\n          ? createMemoryHistory({\n              initialEntries: [this.basepath || '/'],\n            })\n          : createBrowserHistory())\n      this.latestLocation = this.parseLocation()\n    }\n\n    if (this.options.routeTree !== this.routeTree) {\n      this.routeTree = this.options.routeTree as TRouteTree\n      this.buildRouteTree()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!this.__store) {\n      this.__store = new Store(getInitialRouterState(this.latestLocation), {\n        onUpdate: () => {\n          this.__store.state = {\n            ...this.state,\n            cachedMatches: this.state.cachedMatches.filter(\n              (d) => !['redirected'].includes(d.status),\n            ),\n          }\n        },\n      })\n    }\n  }\n\n  get state() {\n    return this.__store.state\n  }\n\n  buildRouteTree = () => {\n    this.routesById = {} as RoutesById<TRouteTree>\n    this.routesByPath = {} as RoutesByPath<TRouteTree>\n\n    const notFoundRoute = this.options.notFoundRoute\n    if (notFoundRoute) {\n      notFoundRoute.init({ originalIndex: 99999999999 })\n      ;(this.routesById as any)[notFoundRoute.id] = notFoundRoute\n    }\n\n    const recurseRoutes = (childRoutes: Array<AnyRoute>) => {\n      childRoutes.forEach((childRoute, i) => {\n        childRoute.init({ originalIndex: i })\n\n        const existingRoute = (this.routesById as any)[childRoute.id]\n\n        invariant(\n          !existingRoute,\n          `Duplicate routes found with id: ${String(childRoute.id)}`,\n        )\n        ;(this.routesById as any)[childRoute.id] = childRoute\n\n        if (!childRoute.isRoot && childRoute.path) {\n          const trimmedFullPath = trimPathRight(childRoute.fullPath)\n          if (\n            !(this.routesByPath as any)[trimmedFullPath] ||\n            childRoute.fullPath.endsWith('/')\n          ) {\n            ;(this.routesByPath as any)[trimmedFullPath] = childRoute\n          }\n        }\n\n        const children = childRoute.children\n\n        if (children?.length) {\n          recurseRoutes(children)\n        }\n      })\n    }\n\n    recurseRoutes([this.routeTree])\n\n    const scoredRoutes: Array<{\n      child: AnyRoute\n      trimmed: string\n      parsed: ReturnType<typeof parsePathname>\n      index: number\n      scores: Array<number>\n    }> = []\n\n    const routes: Array<AnyRoute> = Object.values(this.routesById)\n\n    routes.forEach((d, i) => {\n      if (d.isRoot || !d.path) {\n        return\n      }\n\n      const trimmed = trimPathLeft(d.fullPath)\n      const parsed = parsePathname(trimmed)\n\n      while (parsed.length > 1 && parsed[0]?.value === '/') {\n        parsed.shift()\n      }\n\n      const scores = parsed.map((segment) => {\n        if (segment.value === '/') {\n          return 0.75\n        }\n\n        if (segment.type === 'param') {\n          return 0.5\n        }\n\n        if (segment.type === 'wildcard') {\n          return 0.25\n        }\n\n        return 1\n      })\n\n      scoredRoutes.push({ child: d, trimmed, parsed, index: i, scores })\n    })\n\n    this.flatRoutes = scoredRoutes\n      .sort((a, b) => {\n        const minLength = Math.min(a.scores.length, b.scores.length)\n\n        // Sort by min available score\n        for (let i = 0; i < minLength; i++) {\n          if (a.scores[i] !== b.scores[i]) {\n            return b.scores[i]! - a.scores[i]!\n          }\n        }\n\n        // Sort by length of score\n        if (a.scores.length !== b.scores.length) {\n          return b.scores.length - a.scores.length\n        }\n\n        // Sort by min available parsed value\n        for (let i = 0; i < minLength; i++) {\n          if (a.parsed[i]!.value !== b.parsed[i]!.value) {\n            return a.parsed[i]!.value > b.parsed[i]!.value ? 1 : -1\n          }\n        }\n\n        // Sort by original index\n        return a.index - b.index\n      })\n      .map((d, i) => {\n        d.child.rank = i\n        return d.child\n      })\n  }\n\n  subscribe = <TType extends keyof RouterEvents>(\n    eventType: TType,\n    fn: ListenerFn<RouterEvents[TType]>,\n  ) => {\n    const listener: RouterListener<any> = {\n      eventType,\n      fn,\n    }\n\n    this.subscribers.add(listener)\n\n    return () => {\n      this.subscribers.delete(listener)\n    }\n  }\n\n  emit = (routerEvent: RouterEvent) => {\n    this.subscribers.forEach((listener) => {\n      if (listener.eventType === routerEvent.type) {\n        listener.fn(routerEvent)\n      }\n    })\n  }\n\n  parseLocation = (\n    previousLocation?: ParsedLocation<FullSearchSchema<TRouteTree>>,\n  ): ParsedLocation<FullSearchSchema<TRouteTree>> => {\n    const parse = ({\n      pathname,\n      search,\n      hash,\n      state,\n    }: HistoryLocation): ParsedLocation<FullSearchSchema<TRouteTree>> => {\n      const parsedSearch = this.options.parseSearch(search)\n      const searchStr = this.options.stringifySearch(parsedSearch)\n\n      return {\n        pathname,\n        searchStr,\n        search: replaceEqualDeep(previousLocation?.search, parsedSearch) as any,\n        hash: hash.split('#').reverse()[0] ?? '',\n        href: `${pathname}${searchStr}${hash}`,\n        state: replaceEqualDeep(previousLocation?.state, state),\n      }\n    }\n\n    const location = parse(this.history.location)\n\n    const { __tempLocation, __tempKey } = location.state\n\n    if (__tempLocation && (!__tempKey || __tempKey === this.tempLocationKey)) {\n      // Sync up the location keys\n      const parsedTempLocation = parse(__tempLocation) as any\n      parsedTempLocation.state.key = location.state.key\n\n      delete parsedTempLocation.state.__tempLocation\n\n      return {\n        ...parsedTempLocation,\n        maskedLocation: location,\n      }\n    }\n\n    return location\n  }\n\n  resolvePathWithBase = (from: string, path: string) => {\n    const resolvedPath = resolvePath({\n      basepath: this.basepath,\n      base: from,\n      to: cleanPath(path),\n      trailingSlash: this.options.trailingSlash,\n    })\n    return resolvedPath\n  }\n\n  get looseRoutesById() {\n    return this.routesById as Record<string, AnyRoute>\n  }\n\n  /** \n  @deprecated use the following signature instead\n  ```ts\n  matchRoutes (\n    next: ParsedLocation,\n    opts?: { preload?: boolean; throwOnError?: boolean },\n  ): Array<AnyRouteMatch>;\n  ```\n*/\n  public matchRoutes(\n    pathname: string,\n    locationSearch: AnySearchSchema,\n    opts?: MatchRoutesOpts,\n  ): Array<AnyRouteMatch>\n  public matchRoutes(\n    next: ParsedLocation,\n    opts?: MatchRoutesOpts,\n  ): Array<AnyRouteMatch>\n\n  public matchRoutes(\n    pathnameOrNext: string | ParsedLocation,\n    locationSearchOrOpts?:\n      | AnySearchSchema\n      | { preload?: boolean; throwOnError?: boolean },\n    opts?: { preload?: boolean; throwOnError?: boolean },\n  ) {\n    if (typeof pathnameOrNext === 'string') {\n      return this.matchRoutesInternal(\n        {\n          pathname: pathnameOrNext,\n          search: locationSearchOrOpts,\n        } as ParsedLocation,\n        opts,\n      )\n    } else {\n      return this.matchRoutesInternal(pathnameOrNext, locationSearchOrOpts)\n    }\n  }\n\n  private matchRoutesInternal(\n    next: ParsedLocation,\n    opts?: { preload?: boolean; throwOnError?: boolean },\n  ): Array<AnyRouteMatch> {\n    let routeParams: Record<string, string> = {}\n\n    const foundRoute = this.flatRoutes.find((route) => {\n      const matchedParams = matchPathname(\n        this.basepath,\n        trimPathRight(next.pathname),\n        {\n          to: route.fullPath,\n          caseSensitive:\n            route.options.caseSensitive ?? this.options.caseSensitive,\n          fuzzy: true,\n        },\n      )\n\n      if (matchedParams) {\n        routeParams = matchedParams\n        return true\n      }\n\n      return false\n    })\n\n    let routeCursor: AnyRoute =\n      foundRoute || (this.routesById as any)[rootRouteId]\n\n    const matchedRoutes: Array<AnyRoute> = [routeCursor]\n\n    let isGlobalNotFound = false\n\n    // Check to see if the route needs a 404 entry\n    if (\n      // If we found a route, and it's not an index route and we have left over path\n      foundRoute\n        ? foundRoute.path !== '/' && routeParams['**']\n        : // Or if we didn't find a route and we have left over path\n          trimPathRight(next.pathname)\n    ) {\n      // If the user has defined an (old) 404 route, use it\n      if (this.options.notFoundRoute) {\n        matchedRoutes.push(this.options.notFoundRoute)\n      } else {\n        // If there is no routes found during path matching\n        isGlobalNotFound = true\n      }\n    }\n\n    while (routeCursor.parentRoute) {\n      routeCursor = routeCursor.parentRoute\n      matchedRoutes.unshift(routeCursor)\n    }\n\n    const globalNotFoundRouteId = (() => {\n      if (!isGlobalNotFound) {\n        return undefined\n      }\n\n      if (this.options.notFoundMode !== 'root') {\n        for (let i = matchedRoutes.length - 1; i >= 0; i--) {\n          const route = matchedRoutes[i]!\n          if (route.children) {\n            return route.id\n          }\n        }\n      }\n\n      return rootRouteId\n    })()\n\n    // Existing matches are matches that are already loaded along with\n    // pending matches that are still loading\n\n    const parseErrors = matchedRoutes.map((route) => {\n      let parsedParamsError\n\n      const parseParams =\n        route.options.params?.parse ?? route.options.parseParams\n\n      if (parseParams) {\n        try {\n          const parsedParams = parseParams(routeParams)\n          // Add the parsed params to the accumulated params bag\n          Object.assign(routeParams, parsedParams)\n        } catch (err: any) {\n          parsedParamsError = new PathParamError(err.message, {\n            cause: err,\n          })\n\n          if (opts?.throwOnError) {\n            throw parsedParamsError\n          }\n\n          return parsedParamsError\n        }\n      }\n\n      return\n    })\n\n    const matches: Array<AnyRouteMatch> = []\n\n    matchedRoutes.forEach((route, index) => {\n      // Take each matched route and resolve + validate its search params\n      // This has to happen serially because each route's search params\n      // can depend on the parent route's search params\n      // It must also happen before we create the match so that we can\n      // pass the search params to the route's potential key function\n      // which is used to uniquely identify the route match in state\n\n      const parentMatch = matches[index - 1]\n\n      const [preMatchSearch, searchError]: [Record<string, any>, any] = (() => {\n        // Validate the search params and stabilize them\n        const parentSearch = parentMatch?.search ?? next.search\n\n        try {\n          const validator =\n            typeof route.options.validateSearch === 'object'\n              ? route.options.validateSearch.parse\n              : route.options.validateSearch\n\n          const search = validator?.(parentSearch) ?? {}\n\n          return [\n            {\n              ...parentSearch,\n              ...search,\n            },\n            undefined,\n          ]\n        } catch (err: any) {\n          const searchParamError = new SearchParamError(err.message, {\n            cause: err,\n          })\n\n          if (opts?.throwOnError) {\n            throw searchParamError\n          }\n\n          return [parentSearch, searchParamError]\n        }\n      })()\n\n      // This is where we need to call route.options.loaderDeps() to get any additional\n      // deps that the route's loader function might need to run. We need to do this\n      // before we create the match so that we can pass the deps to the route's\n      // potential key function which is used to uniquely identify the route match in state\n\n      const loaderDeps =\n        route.options.loaderDeps?.({\n          search: preMatchSearch,\n        }) ?? ''\n\n      const loaderDepsHash = loaderDeps ? JSON.stringify(loaderDeps) : ''\n\n      const interpolatedPath = interpolatePath({\n        path: route.fullPath,\n        params: routeParams,\n      })\n\n      const matchId =\n        interpolatePath({\n          path: route.id,\n          params: routeParams,\n          leaveWildcards: true,\n        }) + loaderDepsHash\n\n      // Waste not, want not. If we already have a match for this route,\n      // reuse it. This is important for layout routes, which might stick\n      // around between navigation actions that only change leaf routes.\n      const existingMatch = this.getMatch(matchId)\n\n      const cause = this.state.matches.find((d) => d.id === matchId)\n        ? 'stay'\n        : 'enter'\n\n      let match: AnyRouteMatch\n\n      if (existingMatch) {\n        match = {\n          ...existingMatch,\n          cause,\n          params: routeParams,\n        }\n      } else {\n        const status =\n          route.options.loader || route.options.beforeLoad || route.lazyFn\n            ? 'pending'\n            : 'success'\n\n        match = {\n          id: matchId,\n          index,\n          routeId: route.id,\n          params: routeParams,\n          pathname: joinPaths([this.basepath, interpolatedPath]),\n          updatedAt: Date.now(),\n          search: {} as any,\n          searchError: undefined,\n          status,\n          isFetching: false,\n          error: undefined,\n          paramsError: parseErrors[index],\n          __routeContext: {},\n          __beforeLoadContext: {},\n          context: {},\n          abortController: new AbortController(),\n          fetchCount: 0,\n          cause,\n          loaderDeps,\n          invalid: false,\n          preload: false,\n          links: route.options.links?.(),\n          scripts: route.options.scripts?.(),\n          staticData: route.options.staticData || {},\n          loadPromise: createControlledPromise(),\n          fullPath: route.fullPath,\n        }\n      }\n\n      // If it's already a success, update the meta and headers\n      // These may get updated again if the match is refreshed\n      // due to being stale\n      if (match.status === 'success') {\n        match.meta = route.options.meta?.({\n          matches,\n          match,\n          params: match.params,\n          loaderData: match.loaderData,\n        })\n\n        match.headers = route.options.headers?.({\n          loaderData: match.loaderData,\n        })\n      }\n\n      if (!opts?.preload) {\n        // If we have a global not found, mark the right match as global not found\n        match.globalNotFound = globalNotFoundRouteId === route.id\n      }\n\n      // Regardless of whether we're reusing an existing match or creating\n      // a new one, we need to update the match's search params\n      match.search = replaceEqualDeep(match.search, preMatchSearch)\n      // And also update the searchError if there is one\n      match.searchError = searchError\n\n      const parentMatchId = parentMatch?.id\n\n      const parentContext = !parentMatchId\n        ? ((this.options.context as any) ?? {})\n        : (parentMatch.context ?? this.options.context ?? {})\n\n      match.context = {\n        ...parentContext,\n        ...match.__routeContext,\n        ...match.__beforeLoadContext,\n      }\n\n      // Update the match's context\n      const contextFnContext: RouteContextOptions<any, any, any, any> = {\n        search: match.search,\n        params: match.params,\n        context: match.context,\n        location: next,\n        navigate: (opts: any) =>\n          this.navigate({ ...opts, _fromLocation: next }),\n        buildLocation: this.buildLocation,\n        cause: match.cause,\n        abortController: match.abortController,\n        preload: !!match.preload,\n      }\n\n      // Get the route context\n      match.__routeContext = route.options.context?.(contextFnContext) ?? {}\n\n      match.context = {\n        ...parentContext,\n        ...match.__routeContext,\n        ...match.__beforeLoadContext,\n      }\n\n      matches.push(match)\n    })\n\n    return matches as any\n  }\n\n  cancelMatch = (id: string) => {\n    const match = this.getMatch(id)\n\n    if (!match) return\n\n    match.abortController.abort()\n    clearTimeout(match.pendingTimeout)\n  }\n\n  cancelMatches = () => {\n    this.state.pendingMatches?.forEach((match) => {\n      this.cancelMatch(match.id)\n    })\n  }\n\n  buildLocation: BuildLocationFn = (opts) => {\n    const build = (\n      dest: BuildNextOptions & {\n        unmaskOnReload?: boolean\n      } = {},\n      matches?: Array<MakeRouteMatch<TRouteTree>>,\n    ): ParsedLocation => {\n      const fromMatches =\n        dest._fromLocation != null\n          ? this.matchRoutes({\n              ...dest._fromLocation,\n              search: dest.fromSearch || dest._fromLocation.search,\n            })\n          : this.state.matches\n\n      const fromMatch =\n        dest.from != null\n          ? fromMatches.find((d) =>\n              matchPathname(this.basepath, trimPathRight(d.pathname), {\n                to: dest.from,\n                caseSensitive: false,\n                fuzzy: false,\n              }),\n            )\n          : undefined\n\n      const fromPath = fromMatch?.pathname || this.latestLocation.pathname\n\n      invariant(\n        dest.from == null || fromMatch != null,\n        'Could not find match for from: ' + dest.from,\n      )\n\n      const fromSearch = last(fromMatches)?.search || this.latestLocation.search\n\n      const stayingMatches = matches?.filter((d) =>\n        fromMatches.find((e) => e.routeId === d.routeId),\n      )\n\n      const fromRouteByFromPathRouteId =\n        this.routesById[\n          stayingMatches?.find((d) => d.pathname === fromPath)?.routeId\n        ]\n\n      let pathname = dest.to\n        ? this.resolvePathWithBase(fromPath, `${dest.to}`)\n        : this.resolvePathWithBase(\n            fromPath,\n            fromRouteByFromPathRouteId?.to ?? fromPath,\n          )\n\n      const prevParams = { ...last(fromMatches)?.params }\n\n      let nextParams =\n        (dest.params ?? true) === true\n          ? prevParams\n          : { ...prevParams, ...functionalUpdate(dest.params, prevParams) }\n\n      if (Object.keys(nextParams).length > 0) {\n        matches\n          ?.map((d) => {\n            const route = this.looseRoutesById[d.routeId]\n            return (\n              route?.options.params?.stringify ?? route!.options.stringifyParams\n            )\n          })\n          .filter(Boolean)\n          .forEach((fn) => {\n            nextParams = { ...nextParams!, ...fn!(nextParams) }\n          })\n      }\n\n      pathname = interpolatePath({\n        path: pathname,\n        params: nextParams ?? {},\n        leaveWildcards: false,\n        leaveParams: opts.leaveParams,\n      })\n\n      const preSearchFilters =\n        stayingMatches\n          ?.map(\n            (match) =>\n              this.looseRoutesById[match.routeId]!.options.preSearchFilters ??\n              [],\n          )\n          .flat()\n          .filter(Boolean) ?? []\n\n      const postSearchFilters =\n        stayingMatches\n          ?.map(\n            (match) =>\n              this.looseRoutesById[match.routeId]!.options.postSearchFilters ??\n              [],\n          )\n          .flat()\n          .filter(Boolean) ?? []\n\n      // Pre filters first\n      const preFilteredSearch = preSearchFilters.length\n        ? preSearchFilters.reduce((prev, next) => next(prev), fromSearch)\n        : fromSearch\n\n      // Then the link/navigate function\n      const destSearch =\n        dest.search === true\n          ? preFilteredSearch // Preserve resolvedFrom true\n          : dest.search\n            ? functionalUpdate(dest.search, preFilteredSearch) // Updater\n            : preSearchFilters.length\n              ? preFilteredSearch // Preserve resolvedFrom filters\n              : {}\n\n      // Then post filters\n      const postFilteredSearch = postSearchFilters.length\n        ? postSearchFilters.reduce((prev, next) => next(prev), destSearch)\n        : destSearch\n\n      const search = replaceEqualDeep(fromSearch, postFilteredSearch)\n\n      const searchStr = this.options.stringifySearch(search)\n\n      const hash =\n        dest.hash === true\n          ? this.latestLocation.hash\n          : dest.hash\n            ? functionalUpdate(dest.hash, this.latestLocation.hash)\n            : undefined\n\n      const hashStr = hash ? `#${hash}` : ''\n\n      let nextState =\n        dest.state === true\n          ? this.latestLocation.state\n          : dest.state\n            ? functionalUpdate(dest.state, this.latestLocation.state)\n            : {}\n\n      nextState = replaceEqualDeep(this.latestLocation.state, nextState)\n\n      return {\n        pathname,\n        search,\n        searchStr,\n        state: nextState as any,\n        hash: hash ?? '',\n        href: `${pathname}${searchStr}${hashStr}`,\n        unmaskOnReload: dest.unmaskOnReload,\n      }\n    }\n\n    const buildWithMatches = (\n      dest: BuildNextOptions = {},\n      maskedDest?: BuildNextOptions,\n    ) => {\n      const next = build(dest)\n      let maskedNext = maskedDest ? build(maskedDest) : undefined\n\n      if (!maskedNext) {\n        let params = {}\n\n        const foundMask = this.options.routeMasks?.find((d) => {\n          const match = matchPathname(this.basepath, next.pathname, {\n            to: d.from,\n            caseSensitive: false,\n            fuzzy: false,\n          })\n\n          if (match) {\n            params = match\n            return true\n          }\n\n          return false\n        })\n\n        if (foundMask) {\n          const { from, ...maskProps } = foundMask\n          maskedDest = {\n            ...pick(opts, ['from']),\n            ...maskProps,\n            params,\n          }\n          maskedNext = build(maskedDest)\n        }\n      }\n\n      const nextMatches = this.matchRoutes(next)\n      const maskedMatches = maskedNext\n        ? this.matchRoutes(maskedNext)\n        : undefined\n      const maskedFinal = maskedNext\n        ? build(maskedDest, maskedMatches)\n        : undefined\n\n      const final = build(dest, nextMatches)\n\n      if (maskedFinal) {\n        final.maskedLocation = maskedFinal\n      }\n\n      return final\n    }\n\n    if (opts.mask) {\n      return buildWithMatches(opts, {\n        ...pick(opts, ['from']),\n        ...opts.mask,\n      })\n    }\n\n    return buildWithMatches(opts)\n  }\n\n  commitLocationPromise: undefined | ControlledPromise<void>\n\n  commitLocation = ({\n    viewTransition,\n    ignoreBlocker,\n    ...next\n  }: ParsedLocation & CommitLocationOptions): Promise<void> => {\n    const isSameState = () => {\n      // `state.key` is ignored but may still be provided when navigating,\n      // temporarily add the previous key to the next state so it doesn't affect\n      // the comparison\n\n      next.state.key = this.latestLocation.state.key\n      const isEqual = deepEqual(next.state, this.latestLocation.state)\n      delete next.state.key\n      return isEqual\n    }\n\n    const isSameUrl = this.latestLocation.href === next.href\n\n    const previousCommitPromise = this.commitLocationPromise\n    this.commitLocationPromise = createControlledPromise<void>(() => {\n      previousCommitPromise?.resolve()\n    })\n\n    // Don't commit to history if nothing changed\n    if (isSameUrl && isSameState()) {\n      this.load()\n    } else {\n      // eslint-disable-next-line prefer-const\n      let { maskedLocation, ...nextHistory } = next\n\n      if (maskedLocation) {\n        nextHistory = {\n          ...maskedLocation,\n          state: {\n            ...maskedLocation.state,\n            __tempKey: undefined,\n            __tempLocation: {\n              ...nextHistory,\n              search: nextHistory.searchStr,\n              state: {\n                ...nextHistory.state,\n                __tempKey: undefined!,\n                __tempLocation: undefined!,\n                key: undefined!,\n              },\n            },\n          },\n        }\n\n        if (\n          nextHistory.unmaskOnReload ??\n          this.options.unmaskOnReload ??\n          false\n        ) {\n          nextHistory.state.__tempKey = this.tempLocationKey\n        }\n      }\n\n      this.shouldViewTransition = viewTransition\n\n      this.history[next.replace ? 'replace' : 'push'](\n        nextHistory.href,\n        nextHistory.state,\n        { ignoreBlocker },\n      )\n    }\n\n    this.resetNextScroll = next.resetScroll ?? true\n\n    if (!this.history.subscribers.size) {\n      this.load()\n    }\n\n    return this.commitLocationPromise\n  }\n\n  buildAndCommitLocation = ({\n    replace,\n    resetScroll,\n    viewTransition,\n    ignoreBlocker,\n    ...rest\n  }: BuildNextOptions & CommitLocationOptions = {}) => {\n    const href = (rest as any).href\n    if (href) {\n      const parsed = parseHref(href, {})\n      rest.to = parsed.pathname\n      rest.search = this.options.parseSearch(parsed.search)\n      rest.hash = parsed.hash\n    }\n\n    const location = this.buildLocation(rest as any)\n    return this.commitLocation({\n      ...location,\n      viewTransition,\n      replace,\n      resetScroll,\n      ignoreBlocker,\n    })\n  }\n\n  navigate: NavigateFn = ({ to, __isRedirect, ...rest }) => {\n    // If this link simply reloads the current route,\n    // make sure it has a new key so it will trigger a data refresh\n\n    // If this `to` is a valid external URL, return\n    // null for LinkUtils\n    const toString = String(to)\n    let isExternal\n\n    try {\n      new URL(`${toString}`)\n      isExternal = true\n    } catch (e) {}\n\n    invariant(\n      !isExternal,\n      'Attempting to navigate to external url with router.navigate!',\n    )\n\n    return this.buildAndCommitLocation({\n      ...rest,\n      to,\n      // to: toString,\n    })\n  }\n\n  latestLoadPromise: undefined | Promise<void>\n\n  load = async (): Promise<void> => {\n    this.latestLocation = this.parseLocation(this.latestLocation)\n\n    this.__store.setState((s) => ({\n      ...s,\n      loadedAt: Date.now(),\n    }))\n\n    let redirect: ResolvedRedirect | undefined\n    let notFound: NotFoundError | undefined\n\n    let loadPromise: Promise<void>\n\n    // eslint-disable-next-line prefer-const\n    loadPromise = new Promise<void>((resolve) => {\n      this.startReactTransition(async () => {\n        try {\n          const next = this.latestLocation\n          const prevLocation = this.state.resolvedLocation\n          const pathDidChange = prevLocation.href !== next.href\n\n          // Cancel any pending matches\n          this.cancelMatches()\n\n          let pendingMatches!: Array<AnyRouteMatch>\n\n          this.__store.batch(() => {\n            // this call breaks a route context of destination route after a redirect\n            // we should be fine not eagerly calling this since we call it later\n            // this.cleanCache()\n\n            // Match the routes\n            pendingMatches = this.matchRoutes(next)\n\n            // Ingest the new matches\n            this.__store.setState((s) => ({\n              ...s,\n              status: 'pending',\n              isLoading: true,\n              location: next,\n              pendingMatches,\n              // If a cached moved to pendingMatches, remove it from cachedMatches\n              cachedMatches: s.cachedMatches.filter((d) => {\n                return !pendingMatches.find((e) => e.id === d.id)\n              }),\n            }))\n          })\n\n          if (!this.state.redirect) {\n            this.emit({\n              type: 'onBeforeNavigate',\n              fromLocation: prevLocation,\n              toLocation: next,\n              pathChanged: pathDidChange,\n            })\n          }\n\n          this.emit({\n            type: 'onBeforeLoad',\n            fromLocation: prevLocation,\n            toLocation: next,\n            pathChanged: pathDidChange,\n          })\n\n          await this.loadMatches({\n            matches: pendingMatches,\n            location: next,\n            // eslint-disable-next-line @typescript-eslint/require-await\n            onReady: async () => {\n              // eslint-disable-next-line @typescript-eslint/require-await\n              this.startViewTransition(async () => {\n                // this.viewTransitionPromise = createControlledPromise<true>()\n\n                // Commit the pending matches. If a previous match was\n                // removed, place it in the cachedMatches\n                let exitingMatches!: Array<AnyRouteMatch>\n                let enteringMatches!: Array<AnyRouteMatch>\n                let stayingMatches!: Array<AnyRouteMatch>\n\n                this.__store.batch(() => {\n                  this.__store.setState((s) => {\n                    const previousMatches = s.matches\n                    const newMatches = s.pendingMatches || s.matches\n\n                    exitingMatches = previousMatches.filter(\n                      (match) => !newMatches.find((d) => d.id === match.id),\n                    )\n                    enteringMatches = newMatches.filter(\n                      (match) =>\n                        !previousMatches.find((d) => d.id === match.id),\n                    )\n                    stayingMatches = previousMatches.filter((match) =>\n                      newMatches.find((d) => d.id === match.id),\n                    )\n\n                    return {\n                      ...s,\n                      isLoading: false,\n                      matches: newMatches,\n                      pendingMatches: undefined,\n                      cachedMatches: [\n                        ...s.cachedMatches,\n                        ...exitingMatches.filter((d) => d.status !== 'error'),\n                      ],\n                    }\n                  })\n                  this.cleanCache()\n                })\n\n                //\n                ;(\n                  [\n                    [exitingMatches, 'onLeave'],\n                    [enteringMatches, 'onEnter'],\n                    [stayingMatches, 'onStay'],\n                  ] as const\n                ).forEach(([matches, hook]) => {\n                  matches.forEach((match) => {\n                    this.looseRoutesById[match.routeId]!.options[hook]?.(match)\n                  })\n                })\n              })\n            },\n          })\n        } catch (err) {\n          if (isResolvedRedirect(err)) {\n            redirect = err\n            if (!this.isServer) {\n              this.navigate({ ...err, replace: true, __isRedirect: true })\n            }\n          } else if (isNotFound(err)) {\n            notFound = err\n          }\n\n          this.__store.setState((s) => ({\n            ...s,\n            statusCode: redirect\n              ? redirect.statusCode\n              : notFound\n                ? 404\n                : s.matches.some((d) => d.status === 'error')\n                  ? 500\n                  : 200,\n            redirect,\n          }))\n        }\n\n        if (this.latestLoadPromise === loadPromise) {\n          this.commitLocationPromise?.resolve()\n          this.latestLoadPromise = undefined\n          this.commitLocationPromise = undefined\n        }\n        resolve()\n      })\n    })\n\n    this.latestLoadPromise = loadPromise\n\n    await loadPromise\n\n    while (\n      (this.latestLoadPromise as any) &&\n      loadPromise !== this.latestLoadPromise\n    ) {\n      await this.latestLoadPromise\n    }\n  }\n\n  startViewTransition = (fn: () => Promise<void>) => {\n    // Determine if we should start a view transition from the navigation\n    // or from the router default\n    const shouldViewTransition =\n      this.shouldViewTransition ?? this.options.defaultViewTransition\n\n    // Reset the view transition flag\n    delete this.shouldViewTransition\n    // Attempt to start a view transition (or just apply the changes if we can't)\n    ;(shouldViewTransition && typeof document !== 'undefined'\n      ? document\n      : undefined\n    )\n      // @ts-expect-error\n      ?.startViewTransition?.(fn) || fn()\n  }\n\n  updateMatch = (\n    id: string,\n    updater: (match: AnyRouteMatch) => AnyRouteMatch,\n  ) => {\n    let updated!: AnyRouteMatch\n    const isPending = this.state.pendingMatches?.find((d) => d.id === id)\n    const isMatched = this.state.matches.find((d) => d.id === id)\n\n    const matchesKey = isPending\n      ? 'pendingMatches'\n      : isMatched\n        ? 'matches'\n        : 'cachedMatches'\n\n    this.__store.setState((s) => ({\n      ...s,\n      [matchesKey]: s[matchesKey]?.map((d) =>\n        d.id === id ? (updated = updater(d)) : d,\n      ),\n    }))\n\n    return updated\n  }\n\n  getMatch = (matchId: string) => {\n    return [\n      ...this.state.cachedMatches,\n      ...(this.state.pendingMatches ?? []),\n      ...this.state.matches,\n    ].find((d) => d.id === matchId)\n  }\n\n  loadMatches = async ({\n    location,\n    matches,\n    preload,\n    onReady,\n    updateMatch = this.updateMatch,\n  }: {\n    location: ParsedLocation\n    matches: Array<AnyRouteMatch>\n    preload?: boolean\n    onReady?: () => Promise<void>\n    updateMatch?: (\n      id: string,\n      updater: (match: AnyRouteMatch) => AnyRouteMatch,\n    ) => void\n    getMatch?: (matchId: string) => AnyRouteMatch | undefined\n  }): Promise<Array<MakeRouteMatch>> => {\n    let firstBadMatchIndex: number | undefined\n    let rendered = false\n\n    const triggerOnReady = async () => {\n      if (!rendered) {\n        rendered = true\n        await onReady?.()\n      }\n    }\n\n    if (!this.isServer && !this.state.matches.length) {\n      triggerOnReady()\n    }\n\n    const handleRedirectAndNotFound = (match: AnyRouteMatch, err: any) => {\n      if (isResolvedRedirect(err)) throw err\n\n      if (isRedirect(err) || isNotFound(err)) {\n        updateMatch(match.id, (prev) => ({\n          ...prev,\n          status: isRedirect(err)\n            ? 'redirected'\n            : isNotFound(err)\n              ? 'notFound'\n              : 'error',\n          isFetching: false,\n          error: err,\n          beforeLoadPromise: undefined,\n          loaderPromise: undefined,\n        }))\n\n        if (!(err as any).routeId) {\n          ;(err as any).routeId = match.routeId\n        }\n\n        match.beforeLoadPromise?.resolve()\n        match.loaderPromise?.resolve()\n        match.loadPromise?.resolve()\n\n        if (isRedirect(err)) {\n          rendered = true\n          err = this.resolveRedirect({ ...err, _fromLocation: location })\n          throw err\n        } else if (isNotFound(err)) {\n          this._handleNotFound(matches, err, {\n            updateMatch,\n          })\n          throw err\n        }\n      }\n    }\n\n    try {\n      await new Promise<void>((resolveAll, rejectAll) => {\n        ;(async () => {\n          try {\n            const handleSerialError = (\n              index: number,\n              err: any,\n              routerCode: string,\n            ) => {\n              const { id: matchId, routeId } = matches[index]!\n              const route = this.looseRoutesById[routeId]!\n\n              // Much like suspense, we use a promise here to know if\n              // we've been outdated by a new loadMatches call and\n              // should abort the current async operation\n              if (err instanceof Promise) {\n                throw err\n              }\n\n              err.routerCode = routerCode\n              firstBadMatchIndex = firstBadMatchIndex ?? index\n              handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n\n              try {\n                route.options.onError?.(err)\n              } catch (errorHandlerErr) {\n                err = errorHandlerErr\n                handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n              }\n\n              updateMatch(matchId, (prev) => {\n                prev.beforeLoadPromise?.resolve()\n\n                return {\n                  ...prev,\n                  error: err,\n                  status: 'error',\n                  isFetching: false,\n                  updatedAt: Date.now(),\n                  abortController: new AbortController(),\n                  beforeLoadPromise: undefined,\n                }\n              })\n            }\n\n            for (const [index, { id: matchId, routeId }] of matches.entries()) {\n              const existingMatch = this.getMatch(matchId)!\n              const parentMatchId = matches[index - 1]?.id\n\n              if (\n                // If we are in the middle of a load, either of these will be present\n                // (not to be confused with `loadPromise`, which is always defined)\n                existingMatch.beforeLoadPromise ||\n                existingMatch.loaderPromise\n              ) {\n                // Wait for the beforeLoad to resolve before we continue\n                await existingMatch.beforeLoadPromise\n              } else {\n                // If we are not in the middle of a load, start it\n                try {\n                  updateMatch(matchId, (prev) => ({\n                    ...prev,\n                    loadPromise: createControlledPromise<void>(() => {\n                      prev.loadPromise?.resolve()\n                    }),\n                    beforeLoadPromise: createControlledPromise<void>(),\n                  }))\n\n                  const route = this.looseRoutesById[routeId]!\n                  const abortController = new AbortController()\n\n                  const pendingMs =\n                    route.options.pendingMs ?? this.options.defaultPendingMs\n\n                  const shouldPending = !!(\n                    onReady &&\n                    !this.isServer &&\n                    !preload &&\n                    (route.options.loader || route.options.beforeLoad) &&\n                    typeof pendingMs === 'number' &&\n                    pendingMs !== Infinity &&\n                    (route.options.pendingComponent ??\n                      this.options.defaultPendingComponent)\n                  )\n\n                  let pendingTimeout: ReturnType<typeof setTimeout>\n\n                  if (shouldPending) {\n                    // If we might show a pending component, we need to wait for the\n                    // pending promise to resolve before we start showing that state\n                    pendingTimeout = setTimeout(() => {\n                      try {\n                        // Update the match and prematurely resolve the loadMatches promise so that\n                        // the pending component can start rendering\n                        triggerOnReady()\n                      } catch {}\n                    }, pendingMs)\n                  }\n\n                  const { paramsError, searchError } = this.getMatch(matchId)!\n\n                  if (paramsError) {\n                    handleSerialError(index, paramsError, 'PARSE_PARAMS')\n                  }\n\n                  if (searchError) {\n                    handleSerialError(index, searchError, 'VALIDATE_SEARCH')\n                  }\n\n                  const getParentMatchContext = () =>\n                    parentMatchId\n                      ? this.getMatch(parentMatchId)!.context\n                      : (this.options.context ?? {})\n\n                  updateMatch(matchId, (prev) => ({\n                    ...prev,\n                    isFetching: 'beforeLoad',\n                    fetchCount: prev.fetchCount + 1,\n                    abortController,\n                    pendingTimeout,\n                    context: {\n                      ...getParentMatchContext(),\n                      ...prev.__routeContext,\n                      ...prev.__beforeLoadContext,\n                    },\n                  }))\n\n                  const { search, params, context, cause } =\n                    this.getMatch(matchId)!\n\n                  const beforeLoadFnContext: BeforeLoadContextOptions<\n                    any,\n                    any,\n                    any,\n                    any,\n                    any\n                  > = {\n                    search,\n                    abortController,\n                    params,\n                    preload: !!preload,\n                    context,\n                    location,\n                    navigate: (opts: any) =>\n                      this.navigate({ ...opts, _fromLocation: location }),\n                    buildLocation: this.buildLocation,\n                    cause: preload ? 'preload' : cause,\n                  }\n\n                  let beforeLoadContext =\n                    (await route.options.beforeLoad?.(beforeLoadFnContext)) ??\n                    {}\n\n                  if (this.serializeLoaderData) {\n                    beforeLoadContext = this.serializeLoaderData(\n                      '__beforeLoadContext',\n                      beforeLoadContext,\n                      {\n                        router: this,\n                        match: this.getMatch(matchId)!,\n                      },\n                    )\n                  }\n\n                  if (\n                    isRedirect(beforeLoadContext) ||\n                    isNotFound(beforeLoadContext)\n                  ) {\n                    handleSerialError(index, beforeLoadContext, 'BEFORE_LOAD')\n                  }\n\n                  updateMatch(matchId, (prev) => {\n                    return {\n                      ...prev,\n                      __beforeLoadContext: beforeLoadContext,\n                      context: {\n                        ...getParentMatchContext(),\n                        ...prev.__routeContext,\n                        ...beforeLoadContext,\n                      },\n                      abortController,\n                    }\n                  })\n                } catch (err) {\n                  handleSerialError(index, err, 'BEFORE_LOAD')\n                }\n\n                updateMatch(matchId, (prev) => {\n                  prev.beforeLoadPromise?.resolve()\n\n                  return {\n                    ...prev,\n                    beforeLoadPromise: undefined,\n                    isFetching: false,\n                  }\n                })\n              }\n            }\n\n            const validResolvedMatches = matches.slice(0, firstBadMatchIndex)\n            const matchPromises: Array<Promise<any>> = []\n\n            validResolvedMatches.forEach(({ id: matchId, routeId }, index) => {\n              matchPromises.push(\n                (async () => {\n                  const { loaderPromise: prevLoaderPromise } =\n                    this.getMatch(matchId)!\n\n                  if (prevLoaderPromise) {\n                    await prevLoaderPromise\n                  } else {\n                    const parentMatchPromise = matchPromises[index - 1]\n                    const route = this.looseRoutesById[routeId]!\n\n                    const getLoaderContext = (): LoaderFnContext => {\n                      const {\n                        params,\n                        loaderDeps,\n                        abortController,\n                        context,\n                        cause,\n                      } = this.getMatch(matchId)!\n\n                      return {\n                        params,\n                        deps: loaderDeps,\n                        preload: !!preload,\n                        parentMatchPromise,\n                        abortController: abortController,\n                        context,\n                        location,\n                        navigate: (opts) =>\n                          this.navigate({ ...opts, _fromLocation: location }),\n                        cause: preload ? 'preload' : cause,\n                        route,\n                      }\n                    }\n\n                    // This is where all of the stale-while-revalidate magic happens\n                    const age = Date.now() - this.getMatch(matchId)!.updatedAt\n\n                    const staleAge = preload\n                      ? (route.options.preloadStaleTime ??\n                        this.options.defaultPreloadStaleTime ??\n                        30_000) // 30 seconds for preloads by default\n                      : (route.options.staleTime ??\n                        this.options.defaultStaleTime ??\n                        0)\n\n                    const shouldReloadOption = route.options.shouldReload\n\n                    // Default to reloading the route all the time\n                    // Allow shouldReload to get the last say,\n                    // if provided.\n                    const shouldReload =\n                      typeof shouldReloadOption === 'function'\n                        ? shouldReloadOption(getLoaderContext())\n                        : shouldReloadOption\n\n                    updateMatch(matchId, (prev) => ({\n                      ...prev,\n                      loaderPromise: createControlledPromise<void>(),\n                      preload:\n                        !!preload &&\n                        !this.state.matches.find((d) => d.id === matchId),\n                    }))\n\n                    const runLoader = async () => {\n                      try {\n                        // If the Matches component rendered\n                        // the pending component and needs to show it for\n                        // a minimum duration, we''ll wait for it to resolve\n                        // before committing to the match and resolving\n                        // the loadPromise\n                        const potentialPendingMinPromise = async () => {\n                          const latestMatch = this.getMatch(matchId)!\n\n                          if (latestMatch.minPendingPromise) {\n                            await latestMatch.minPendingPromise\n                          }\n                        }\n\n                        // Actually run the loader and handle the result\n                        try {\n                          route._lazyPromise =\n                            route._lazyPromise ||\n                            (route.lazyFn\n                              ? route.lazyFn().then((lazyRoute) => {\n                                  Object.assign(\n                                    route.options,\n                                    lazyRoute.options,\n                                  )\n                                })\n                              : Promise.resolve())\n\n                          // If for some reason lazy resolves more lazy components...\n                          // We'll wait for that before pre attempt to preload any\n                          // components themselves.\n                          const componentsPromise =\n                            this.getMatch(matchId)!.componentsPromise ||\n                            route._lazyPromise.then(() =>\n                              Promise.all(\n                                componentTypes.map(async (type) => {\n                                  const component = route.options[type]\n\n                                  if ((component as any)?.preload) {\n                                    await (component as any).preload()\n                                  }\n                                }),\n                              ),\n                            )\n\n                          // Otherwise, load the route\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            isFetching: 'loader',\n                            componentsPromise,\n                          }))\n\n                          // Lazy option can modify the route options,\n                          // so we need to wait for it to resolve before\n                          // we can use the options\n                          await route._lazyPromise\n\n                          // Kick off the loader!\n                          let loaderData =\n                            await route.options.loader?.(getLoaderContext())\n\n                          if (this.serializeLoaderData) {\n                            loaderData = this.serializeLoaderData(\n                              'loaderData',\n                              loaderData,\n                              {\n                                router: this,\n                                match: this.getMatch(matchId)!,\n                              },\n                            )\n                          }\n\n                          handleRedirectAndNotFound(\n                            this.getMatch(matchId)!,\n                            loaderData,\n                          )\n\n                          await potentialPendingMinPromise()\n\n                          const meta = route.options.meta?.({\n                            matches,\n                            match: this.getMatch(matchId)!,\n                            params: this.getMatch(matchId)!.params,\n                            loaderData,\n                          })\n\n                          const headers = route.options.headers?.({\n                            loaderData,\n                          })\n\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            error: undefined,\n                            status: 'success',\n                            isFetching: false,\n                            updatedAt: Date.now(),\n                            loaderData,\n                            meta,\n                            headers,\n                          }))\n                        } catch (e) {\n                          let error = e\n\n                          await potentialPendingMinPromise()\n\n                          handleRedirectAndNotFound(this.getMatch(matchId)!, e)\n\n                          try {\n                            route.options.onError?.(e)\n                          } catch (onErrorError) {\n                            error = onErrorError\n                            handleRedirectAndNotFound(\n                              this.getMatch(matchId)!,\n                              onErrorError,\n                            )\n                          }\n\n                          updateMatch(matchId, (prev) => ({\n                            ...prev,\n                            error,\n                            status: 'error',\n                            isFetching: false,\n                          }))\n                        }\n\n                        // Last but not least, wait for the the component\n                        // to be preloaded before we resolve the match\n                        await this.getMatch(matchId)!.componentsPromise\n                      } catch (err) {\n                        handleRedirectAndNotFound(this.getMatch(matchId)!, err)\n                      }\n                    }\n\n                    // If the route is successful and still fresh, just resolve\n                    const { status, invalid } = this.getMatch(matchId)!\n\n                    if (preload && route.options.preload === false) {\n                      // Do nothing\n                    } else if (\n                      status === 'success' &&\n                      (invalid || (shouldReload ?? age > staleAge))\n                    ) {\n                      ;(async () => {\n                        try {\n                          await runLoader()\n                        } catch (err) {}\n                      })()\n                    } else if (status !== 'success') {\n                      await runLoader()\n                    }\n\n                    const { loaderPromise, loadPromise } =\n                      this.getMatch(matchId)!\n\n                    loaderPromise?.resolve()\n                    loadPromise?.resolve()\n                  }\n\n                  updateMatch(matchId, (prev) => ({\n                    ...prev,\n                    isFetching: false,\n                    loaderPromise: undefined,\n                  }))\n                })(),\n              )\n            })\n\n            await Promise.all(matchPromises)\n\n            resolveAll()\n          } catch (err) {\n            rejectAll(err)\n          }\n        })()\n      })\n      await triggerOnReady()\n    } catch (err) {\n      if (isRedirect(err) || isNotFound(err)) {\n        if (isNotFound(err) && !preload) {\n          await triggerOnReady()\n        }\n        throw err\n      }\n    }\n\n    return matches\n  }\n\n  invalidate = () => {\n    const invalidate = (d: MakeRouteMatch<TRouteTree>) => ({\n      ...d,\n      invalid: true,\n      ...(d.status === 'error'\n        ? ({ status: 'pending', error: undefined } as const)\n        : {}),\n    })\n\n    this.__store.setState((s) => ({\n      ...s,\n      matches: s.matches.map(invalidate),\n      cachedMatches: s.cachedMatches.map(invalidate),\n      pendingMatches: s.pendingMatches?.map(invalidate),\n    }))\n\n    return this.load()\n  }\n\n  resolveRedirect = (err: AnyRedirect): ResolvedRedirect => {\n    const redirect = err as ResolvedRedirect\n\n    if (!redirect.href) {\n      redirect.href = this.buildLocation(redirect as any).href\n    }\n\n    return redirect\n  }\n\n  cleanCache = () => {\n    // This is where all of the garbage collection magic happens\n    this.__store.setState((s) => {\n      return {\n        ...s,\n        cachedMatches: s.cachedMatches.filter((d) => {\n          const route = this.looseRoutesById[d.routeId]!\n\n          if (!route.options.loader) {\n            return false\n          }\n\n          // If the route was preloaded, use the preloadGcTime\n          // otherwise, use the gcTime\n          const gcTime =\n            (d.preload\n              ? (route.options.preloadGcTime ??\n                this.options.defaultPreloadGcTime)\n              : (route.options.gcTime ?? this.options.defaultGcTime)) ??\n            5 * 60 * 1000\n\n          return d.status !== 'error' && Date.now() - d.updatedAt < gcTime\n        }),\n      }\n    })\n  }\n\n  preloadRoute = async <\n    TFrom extends RoutePaths<TRouteTree> | string = string,\n    TTo extends string = '',\n    TMaskFrom extends RoutePaths<TRouteTree> | string = TFrom,\n    TMaskTo extends string = '',\n  >(\n    opts: NavigateOptions<\n      Router<TRouteTree, TTrailingSlashOption, TDehydrated, TSerializedError>,\n      TFrom,\n      TTo,\n      TMaskFrom,\n      TMaskTo\n    >,\n  ): Promise<Array<AnyRouteMatch> | undefined> => {\n    const next = this.buildLocation(opts as any)\n\n    let matches = this.matchRoutes(next, {\n      throwOnError: true,\n      preload: true,\n    })\n\n    const loadedMatchIds = Object.fromEntries(\n      [\n        ...this.state.matches,\n        ...(this.state.pendingMatches ?? []),\n        ...this.state.cachedMatches,\n      ].map((d) => [d.id, true]),\n    )\n\n    this.__store.batch(() => {\n      matches.forEach((match) => {\n        if (!loadedMatchIds[match.id]) {\n          this.__store.setState((s) => ({\n            ...s,\n            cachedMatches: [...(s.cachedMatches as any), match],\n          }))\n        }\n      })\n    })\n\n    const activeMatchIds = new Set(\n      [...this.state.matches, ...(this.state.pendingMatches ?? [])].map(\n        (d) => d.id,\n      ),\n    )\n\n    try {\n      matches = await this.loadMatches({\n        matches,\n        location: next,\n        preload: true,\n        updateMatch: (id, updater) => {\n          if (activeMatchIds.has(id)) {\n            matches = matches.map((d) => (d.id === id ? updater(d) : d))\n          } else {\n            this.updateMatch(id, updater)\n          }\n        },\n      })\n\n      return matches\n    } catch (err) {\n      if (isRedirect(err)) {\n        return await this.preloadRoute({\n          ...(err as any),\n          _fromLocation: next,\n        })\n      }\n      // Preload errors are not fatal, but we should still log them\n      console.error(err)\n      return undefined\n    }\n  }\n\n  matchRoute = <\n    TFrom extends RoutePaths<TRouteTree> = '/',\n    TTo extends string = '',\n    TResolved = ResolveRelativePath<TFrom, NoInfer<TTo>>,\n  >(\n    location: ToOptions<\n      Router<TRouteTree, TTrailingSlashOption, TDehydrated, TSerializedError>,\n      TFrom,\n      TTo\n    >,\n    opts?: MatchRouteOptions,\n  ): false | RouteById<TRouteTree, TResolved>['types']['allParams'] => {\n    const matchLocation = {\n      ...location,\n      to: location.to\n        ? this.resolvePathWithBase((location.from || '') as string, location.to)\n        : undefined,\n      params: location.params || {},\n      leaveParams: true,\n    }\n    const next = this.buildLocation(matchLocation as any)\n\n    if (opts?.pending && this.state.status !== 'pending') {\n      return false\n    }\n\n    const pending =\n      opts?.pending === undefined ? !this.state.isLoading : opts.pending\n\n    const baseLocation = pending\n      ? this.latestLocation\n      : this.state.resolvedLocation\n\n    const match = matchPathname(this.basepath, baseLocation.pathname, {\n      ...opts,\n      to: next.pathname,\n    }) as any\n\n    if (!match) {\n      return false\n    }\n    if (location.params) {\n      if (!deepEqual(match, location.params, true)) {\n        return false\n      }\n    }\n\n    if (match && (opts?.includeSearch ?? true)) {\n      return deepEqual(baseLocation.search, next.search, true) ? match : false\n    }\n\n    return match\n  }\n\n  dehydrate = (): DehydratedRouter => {\n    const pickError =\n      this.options.errorSerializer?.serialize ?? defaultSerializeError\n\n    return {\n      state: {\n        dehydratedMatches: this.state.matches.map((d) => {\n          return {\n            ...pick(d, ['id', 'status', 'updatedAt']),\n            // If an error occurs server-side during SSRing,\n            // send a small subset of the error to the client\n            error: d.error\n              ? {\n                  data: pickError(d.error),\n                  __isServerError: true,\n                }\n              : undefined,\n            // NOTE: We don't send the loader data here, because\n            // there is a potential that it needs to be streamed.\n            // Instead, we render it next to the route match in the HTML\n            // which gives us the potential to stream it via suspense.\n          }\n        }),\n      },\n      manifest: this.manifest,\n    }\n  }\n\n  hydrate = () => {\n    // Client hydrates from window\n    let ctx: HydrationCtx | undefined\n\n    if (typeof document !== 'undefined') {\n      ctx = this.options.transformer.parse(window.__TSR__?.dehydrated) as any\n    }\n\n    invariant(\n      ctx,\n      'Expected to find a dehydrated data on window.__TSR__.dehydrated... but we did not. Please file an issue!',\n    )\n\n    this.dehydratedData = ctx.payload as any\n    this.options.hydrate?.(ctx.payload as any)\n    const dehydratedState = ctx.router.state\n\n    const matches = this.matchRoutes(this.state.location).map((match) => {\n      const dehydratedMatch = dehydratedState.dehydratedMatches.find(\n        (d) => d.id === match.id,\n      )\n\n      invariant(\n        dehydratedMatch,\n        `Could not find a client-side match for dehydrated match with id: ${match.id}!`,\n      )\n\n      return {\n        ...match,\n        ...dehydratedMatch,\n      }\n    })\n\n    this.__store.setState((s) => {\n      return {\n        ...s,\n        matches: matches as any,\n      }\n    })\n\n    this.manifest = ctx.router.manifest\n  }\n\n  injectedHtml: Array<() => string> = []\n  injectHtml: (html: string) => void = (html) => {\n    const cb = () => {\n      this.injectedHtml = this.injectedHtml.filter((d) => d !== cb)\n      return html\n    }\n\n    this.injectedHtml.push(cb)\n  }\n  streamedKeys: Set<string> = new Set()\n\n  getStreamedValue = <T>(key: string): T | undefined => {\n    if (this.isServer) {\n      return undefined\n    }\n\n    const streamedValue = window.__TSR__?.streamedValues[key]\n\n    if (!streamedValue) {\n      return\n    }\n\n    if (!streamedValue.parsed) {\n      streamedValue.parsed = this.options.transformer.parse(streamedValue.value)\n    }\n\n    return streamedValue.parsed\n  }\n\n  streamValue = (key: string, value: any) => {\n    warning(\n      !this.streamedKeys.has(key),\n      'Key has already been streamed: ' + key,\n    )\n\n    this.streamedKeys.add(key)\n    const children = `__TSR__.streamedValues['${key}'] = { value: ${this.serializer?.(this.options.transformer.stringify(value))}}`\n\n    this.injectHtml(\n      `<script class='tsr-once'>${children}${\n        process.env.NODE_ENV === 'development'\n          ? `; console.info(\\`Injected From Server:\n        ${children}\\`)`\n          : ''\n      }; __TSR__.cleanScripts()</script>`,\n    )\n  }\n\n  _handleNotFound = (\n    matches: Array<AnyRouteMatch>,\n    err: NotFoundError,\n    {\n      updateMatch = this.updateMatch,\n    }: {\n      updateMatch?: (\n        id: string,\n        updater: (match: AnyRouteMatch) => AnyRouteMatch,\n      ) => void\n    } = {},\n  ) => {\n    const matchesByRouteId = Object.fromEntries(\n      matches.map((match) => [match.routeId, match]),\n    ) as Record<string, AnyRouteMatch>\n\n    // Start at the route that errored or default to the root route\n    let routeCursor =\n      (err.global\n        ? this.looseRoutesById[rootRouteId]\n        : this.looseRoutesById[err.routeId]) ||\n      this.looseRoutesById[rootRouteId]!\n\n    // Go up the tree until we find a route with a notFoundComponent or we hit the root\n    while (\n      !routeCursor.options.notFoundComponent &&\n      !this.options.defaultNotFoundComponent &&\n      routeCursor.id !== rootRouteId\n    ) {\n      routeCursor = routeCursor.parentRoute\n\n      invariant(\n        routeCursor,\n        'Found invalid route tree while trying to find not-found handler.',\n      )\n    }\n\n    const match = matchesByRouteId[routeCursor.id]\n\n    invariant(match, 'Could not find match for route: ' + routeCursor.id)\n\n    // Assign the error to the match\n\n    updateMatch(match.id, (prev) => ({\n      ...prev,\n      status: 'notFound',\n      error: err,\n      isFetching: false,\n    }))\n\n    if ((err as any).routerCode === 'BEFORE_LOAD' && routeCursor.parentRoute) {\n      err.routeId = routeCursor.parentRoute.id\n      this._handleNotFound(matches, err, {\n        updateMatch,\n      })\n    }\n  }\n\n  hasNotFoundMatch = () => {\n    return this.__store.state.matches.some(\n      (d) => d.status === 'notFound' || d.globalNotFound,\n    )\n  }\n}\n\n// A function that takes an import() argument which is a function and returns a new function that will\n// proxy arguments from the caller to the imported function, retaining all type\n// information along the way\nexport function lazyFn<\n  T extends Record<string, (...args: Array<any>) => any>,\n  TKey extends keyof T = 'default',\n>(fn: () => Promise<T>, key?: TKey) {\n  return async (\n    ...args: Parameters<T[TKey]>\n  ): Promise<Awaited<ReturnType<T[TKey]>>> => {\n    const imported = await fn()\n    return imported[key || 'default'](...args)\n  }\n}\n\nexport class SearchParamError extends Error {}\n\nexport class PathParamError extends Error {}\n\nexport function getInitialRouterState(\n  location: ParsedLocation,\n): RouterState<any> {\n  return {\n    loadedAt: 0,\n    isLoading: false,\n    isTransitioning: false,\n    status: 'idle',\n    resolvedLocation: { ...location },\n    location,\n    matches: [],\n    pendingMatches: [],\n    cachedMatches: [],\n    statusCode: 200,\n  }\n}\n\nexport function defaultSerializeError(err: unknown) {\n  if (err instanceof Error) {\n    const obj = {\n      name: err.name,\n      message: err.message,\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      ;(obj as any).stack = err.stack\n    }\n\n    return obj\n  }\n\n  return {\n    data: err,\n  }\n}\n"],"mappings":";;;;;;;;;;;AAghBO,MAAMA,cAAA,GAAiB,CAC5B,aACA,kBACA,oBACA,oBACF;AAoCO,SAASC,aAMdC,OAAA,EAMA;EACO,WAAIC,MAAA,CAKTD,OAAO;AACX;AAIO,MAAMC,MAAA,CAKX;EAAA;AAAA;AAAA;EAwDAC,YACEF,OAAA,EAMA;IA7DF,KAAAG,eAAA,GAAsC,GAAGC,IAAA,CAAKC,KAAA,CAC5CD,IAAA,CAAKE,MAAA,KAAW,GACjB;IACiB,KAAAC,eAAA;IACe,KAAAC,oBAAA;IACjC,KAAAC,WAAA,sBAAkBC,GAAA;IA6E+B,KAAAC,oBAAA,GAACC,EAAA,IAAOA,EAAA,CAAG;IAE5D,KAAAC,MAAA,GACEC,UAAA,IAMG;MACH,IAAIA,UAAA,CAAWC,aAAA,EAAe;QACpBC,OAAA,CAAAC,IAAA,CACN;MAEJ;MAEA,MAAMC,eAAA,GAAkB,KAAKlB,OAAA;MAC7B,KAAKA,OAAA,GAAU;QACb,GAAG,KAAKA,OAAA;QACR,GAAGc;MAAA;MAGL,KAAKK,QAAA,GAAW,KAAKnB,OAAA,CAAQmB,QAAA,IAAY,OAAOC,QAAA,KAAa;MAG3D,KAAC,KAAKC,QAAA,IACLP,UAAA,CAAWO,QAAA,IAAYP,UAAA,CAAWO,QAAA,KAAaH,eAAA,CAAgBG,QAAA,EAChE;QAEE,IAAAP,UAAA,CAAWO,QAAA,KAAa,UACxBP,UAAA,CAAWO,QAAA,KAAa,MACxBP,UAAA,CAAWO,QAAA,KAAa,KACxB;UACA,KAAKA,QAAA,GAAW;QAAA,OACX;UACL,KAAKA,QAAA,GAAW,IAAIC,QAAA,CAASR,UAAA,CAAWO,QAAQ,CAAC;QACnD;MACF;MAEA;MAAA;MAEE,CAAC,KAAKE,OAAA,IACL,KAAKvB,OAAA,CAAQuB,OAAA,IAAW,KAAKvB,OAAA,CAAQuB,OAAA,KAAY,KAAKA,OAAA,EACvD;QACA,KAAKA,OAAA,GACH,KAAKvB,OAAA,CAAQuB,OAAA,KACZ,KAAKJ,QAAA,GACFK,mBAAA,CAAoB;UAClBC,cAAA,EAAgB,CAAC,KAAKJ,QAAA,IAAY,GAAG;QAAA,CACtC,IACDK,oBAAA,CAAqB;QACtB,KAAAC,cAAA,GAAiB,KAAKC,aAAA;MAC7B;MAEA,IAAI,KAAK5B,OAAA,CAAQ6B,SAAA,KAAc,KAAKA,SAAA,EAAW;QACxC,KAAAA,SAAA,GAAY,KAAK7B,OAAA,CAAQ6B,SAAA;QAC9B,KAAKC,cAAA,CAAe;MACtB;MAGI,KAAC,KAAKC,OAAA,EAAS;QACjB,KAAKA,OAAA,GAAU,IAAIC,KAAA,CAAMC,qBAAA,CAAsB,KAAKN,cAAc,GAAG;UACnEO,QAAA,EAAUA,CAAA,KAAM;YACd,KAAKH,OAAA,CAAQI,KAAA,GAAQ;cACnB,GAAG,KAAKA,KAAA;cACRC,aAAA,EAAe,KAAKD,KAAA,CAAMC,aAAA,CAAcC,MAAA,CACrCC,CAAA,IAAM,CAAC,CAAC,YAAY,EAAEC,QAAA,CAASD,CAAA,CAAEE,MAAM,CAC1C;YAAA;UAEJ;QAAA,CACD;MACH;IAAA;IAOF,KAAAV,cAAA,GAAiB,MAAM;MACrB,KAAKW,UAAA,GAAa;MAClB,KAAKC,YAAA,GAAe;MAEd,MAAA3B,aAAA,GAAgB,KAAKf,OAAA,CAAQe,aAAA;MACnC,IAAIA,aAAA,EAAe;QACjBA,aAAA,CAAc4B,IAAA,CAAK;UAAEC,aAAA,EAAe;QAAa;QAC/C,KAAKH,UAAA,CAAmB1B,aAAA,CAAc8B,EAAE,IAAI9B,aAAA;MAChD;MAEM,MAAA+B,aAAA,GAAiBC,WAAA,IAAiC;QAC1CA,WAAA,CAAAC,OAAA,CAAQ,CAACC,UAAA,EAAYC,CAAA,KAAM;UACrCD,UAAA,CAAWN,IAAA,CAAK;YAAEC,aAAA,EAAeM;UAAG;UAEpC,MAAMC,aAAA,GAAiB,KAAKV,UAAA,CAAmBQ,UAAA,CAAWJ,EAAE;UAE5DO,SAAA,CACE,CAACD,aAAA,EACD,mCAAmCE,MAAA,CAAOJ,UAAA,CAAWJ,EAAE,CAAC;UAExD,KAAKJ,UAAA,CAAmBQ,UAAA,CAAWJ,EAAE,IAAII,UAAA;UAE3C,IAAI,CAACA,UAAA,CAAWK,MAAA,IAAUL,UAAA,CAAWM,IAAA,EAAM;YACnC,MAAAC,eAAA,GAAkBC,aAAA,CAAcR,UAAA,CAAWS,QAAQ;YAEvD,KAAE,KAAKhB,YAAA,CAAqBc,eAAe,KAC3CP,UAAA,CAAWS,QAAA,CAASC,QAAA,CAAS,GAAG,GAChC;cACE,KAAKjB,YAAA,CAAqBc,eAAe,IAAIP,UAAA;YACjD;UACF;UAEA,MAAMW,QAAA,GAAWX,UAAA,CAAWW,QAAA;UAE5B,IAAIA,QAAA,oBAAAA,QAAA,CAAUC,MAAA,EAAQ;YACpBf,aAAA,CAAcc,QAAQ;UACxB;QAAA,CACD;MAAA;MAGWd,aAAA,EAAC,KAAKjB,SAAS,CAAC;MAE9B,MAAMiC,YAAA,GAMD;MAEL,MAAMC,MAAA,GAA0BC,MAAA,CAAOC,MAAA,CAAO,KAAKxB,UAAU;MAEtDsB,MAAA,CAAAf,OAAA,CAAQ,CAACV,CAAA,EAAGY,CAAA,KAAM;;QACvB,IAAIZ,CAAA,CAAEgB,MAAA,IAAU,CAAChB,CAAA,CAAEiB,IAAA,EAAM;UACvB;QACF;QAEM,MAAAW,OAAA,GAAUC,YAAA,CAAa7B,CAAA,CAAEoB,QAAQ;QACjC,MAAAU,MAAA,GAASC,aAAA,CAAcH,OAAO;QAEpC,OAAOE,MAAA,CAAOP,MAAA,GAAS,OAAKS,EAAA,GAAAF,MAAA,CAAO,CAAC,MAAR,gBAAAE,EAAA,CAAWC,KAAA,MAAU,KAAK;UACpDH,MAAA,CAAOI,KAAA,CAAM;QACf;QAEA,MAAMC,MAAA,GAASL,MAAA,CAAOM,GAAA,CAAKC,OAAA,IAAY;UACjC,IAAAA,OAAA,CAAQJ,KAAA,KAAU,KAAK;YAClB;UACT;UAEI,IAAAI,OAAA,CAAQC,IAAA,KAAS,SAAS;YACrB;UACT;UAEI,IAAAD,OAAA,CAAQC,IAAA,KAAS,YAAY;YACxB;UACT;UAEO;QAAA,CACR;QAEYd,YAAA,CAAAe,IAAA,CAAK;UAAEC,KAAA,EAAOxC,CAAA;UAAG4B,OAAA;UAASE,MAAA;UAAQW,KAAA,EAAO7B,CAAA;UAAGuB;QAAA,CAAQ;MAAA,CAClE;MAED,KAAKO,UAAA,GAAalB,YAAA,CACfmB,IAAA,CAAK,CAACC,CAAA,EAAGC,CAAA,KAAM;QACR,MAAAC,SAAA,GAAYhF,IAAA,CAAKiF,GAAA,CAAIH,CAAA,CAAET,MAAA,CAAOZ,MAAA,EAAQsB,CAAA,CAAEV,MAAA,CAAOZ,MAAM;QAG3D,SAASX,CAAA,GAAI,GAAGA,CAAA,GAAIkC,SAAA,EAAWlC,CAAA,IAAK;UAClC,IAAIgC,CAAA,CAAET,MAAA,CAAOvB,CAAC,MAAMiC,CAAA,CAAEV,MAAA,CAAOvB,CAAC,GAAG;YAC/B,OAAOiC,CAAA,CAAEV,MAAA,CAAOvB,CAAC,IAAKgC,CAAA,CAAET,MAAA,CAAOvB,CAAC;UAClC;QACF;QAGA,IAAIgC,CAAA,CAAET,MAAA,CAAOZ,MAAA,KAAWsB,CAAA,CAAEV,MAAA,CAAOZ,MAAA,EAAQ;UACvC,OAAOsB,CAAA,CAAEV,MAAA,CAAOZ,MAAA,GAASqB,CAAA,CAAET,MAAA,CAAOZ,MAAA;QACpC;QAGA,SAASX,CAAA,GAAI,GAAGA,CAAA,GAAIkC,SAAA,EAAWlC,CAAA,IAAK;UAC9B,IAAAgC,CAAA,CAAEd,MAAA,CAAOlB,CAAC,EAAGqB,KAAA,KAAUY,CAAA,CAAEf,MAAA,CAAOlB,CAAC,EAAGqB,KAAA,EAAO;YACtC,OAAAW,CAAA,CAAEd,MAAA,CAAOlB,CAAC,EAAGqB,KAAA,GAAQY,CAAA,CAAEf,MAAA,CAAOlB,CAAC,EAAGqB,KAAA,GAAQ,IAAI;UACvD;QACF;QAGO,OAAAW,CAAA,CAAEH,KAAA,GAAQI,CAAA,CAAEJ,KAAA;MACpB,GACAL,GAAA,CAAI,CAACpC,CAAA,EAAGY,CAAA,KAAM;QACbZ,CAAA,CAAEwC,KAAA,CAAMQ,IAAA,GAAOpC,CAAA;QACf,OAAOZ,CAAA,CAAEwC,KAAA;MAAA,CACV;IAAA;IAGO,KAAAS,SAAA,IACVC,SAAA,EACA5E,EAAA,KACG;MACH,MAAM6E,QAAA,GAAgC;QACpCD,SAAA;QACA5E;MAAA;MAGG,KAAAH,WAAA,CAAYiF,GAAA,CAAID,QAAQ;MAE7B,OAAO,MAAM;QACN,KAAAhF,WAAA,CAAYkF,MAAA,CAAOF,QAAQ;MAAA;IAClC;IAGF,KAAAG,IAAA,GAAQC,WAAA,IAA6B;MAC9B,KAAApF,WAAA,CAAYuC,OAAA,CAASyC,QAAA,IAAa;QACjC,IAAAA,QAAA,CAASD,SAAA,KAAcK,WAAA,CAAYjB,IAAA,EAAM;UAC3Ca,QAAA,CAAS7E,EAAA,CAAGiF,WAAW;QACzB;MAAA,CACD;IAAA;IAGH,KAAAjE,aAAA,GACEkE,gBAAA,IACiD;MACjD,MAAMC,KAAA,GAAQA,CAAC;QACbC,QAAA;QACAC,MAAA;QACAC,IAAA;QACA/D;MAAA,MACmE;QACnE,MAAMgE,YAAA,GAAe,KAAKnG,OAAA,CAAQoG,WAAA,CAAYH,MAAM;QACpD,MAAMI,SAAA,GAAY,KAAKrG,OAAA,CAAQsG,eAAA,CAAgBH,YAAY;QAEpD;UACLH,QAAA;UACAK,SAAA;UACAJ,MAAA,EAAQM,gBAAA,CAAiBT,gBAAA,oBAAAA,gBAAA,CAAkBG,MAAA,EAAQE,YAAY;UAC/DD,IAAA,EAAMA,IAAA,CAAKM,KAAA,CAAM,GAAG,EAAEC,OAAA,CAAQ,EAAE,CAAC,KAAK;UACtCC,IAAA,EAAM,GAAGV,QAAQ,GAAGK,SAAS,GAAGH,IAAI;UACpC/D,KAAA,EAAOoE,gBAAA,CAAiBT,gBAAA,oBAAAA,gBAAA,CAAkB3D,KAAA,EAAOA,KAAK;QAAA;MACxD;MAGF,MAAMwE,QAAA,GAAWZ,KAAA,CAAM,KAAKxE,OAAA,CAAQoF,QAAQ;MAE5C,MAAM;QAAEC,cAAA;QAAgBC;MAAA,IAAcF,QAAA,CAASxE,KAAA;MAE/C,IAAIyE,cAAA,KAAmB,CAACC,SAAA,IAAaA,SAAA,KAAc,KAAK1G,eAAA,GAAkB;QAElE,MAAA2G,kBAAA,GAAqBf,KAAA,CAAMa,cAAc;QAC5BE,kBAAA,CAAA3E,KAAA,CAAM4E,GAAA,GAAMJ,QAAA,CAASxE,KAAA,CAAM4E,GAAA;QAE9C,OAAOD,kBAAA,CAAmB3E,KAAA,CAAMyE,cAAA;QAEzB;UACL,GAAGE,kBAAA;UACHE,cAAA,EAAgBL;QAAA;MAEpB;MAEO,OAAAA,QAAA;IAAA;IAGa,KAAAM,mBAAA,IAACC,IAAA,EAAc3D,IAAA,KAAiB;MACpD,MAAM4D,YAAA,GAAeC,WAAA,CAAY;QAC/B/F,QAAA,EAAU,KAAKA,QAAA;QACfgG,IAAA,EAAMH,IAAA;QACNI,EAAA,EAAIC,SAAA,CAAUhE,IAAI;QAClBiE,aAAA,EAAe,KAAKxH,OAAA,CAAQwH;MAAA,CAC7B;MACM,OAAAL,YAAA;IAAA;IAiVT,KAAAM,WAAA,GAAe5E,EAAA,IAAe;MACtB,MAAA6E,KAAA,GAAQ,KAAKC,QAAA,CAAS9E,EAAE;MAE9B,IAAI,CAAC6E,KAAA,EAAO;MAEZA,KAAA,CAAME,eAAA,CAAgBC,KAAA;MACtBC,YAAA,CAAaJ,KAAA,CAAMK,cAAc;IAAA;IAGnC,KAAAC,aAAA,GAAgB,MAAM;;MACpB,CAAA1D,EAAA,QAAKnC,KAAA,CAAM8F,cAAA,KAAX,gBAAA3D,EAAA,CAA2BtB,OAAA,CAAS0E,KAAA,IAAU;QACvC,KAAAD,WAAA,CAAYC,KAAA,CAAM7E,EAAE;MAAA;IAC1B;IAGH,KAAAqF,aAAA,GAAkCC,IAAA,IAAS;MACzC,MAAMC,KAAA,GAAQA,CACZC,IAAA,GAEI,IACJC,OAAA,KACmB;;QACnB,MAAMC,WAAA,GACJF,IAAA,CAAKG,aAAA,IAAiB,OAClB,KAAKC,WAAA,CAAY;UACf,GAAGJ,IAAA,CAAKG,aAAA;UACRvC,MAAA,EAAQoC,IAAA,CAAKK,UAAA,IAAcL,IAAA,CAAKG,aAAA,CAAcvC;QAAA,CAC/C,IACD,KAAK9D,KAAA,CAAMmG,OAAA;QAEjB,MAAMK,SAAA,GACJN,IAAA,CAAKnB,IAAA,IAAQ,OACTqB,WAAA,CAAYK,IAAA,CAAMtG,CAAA,IAChBuG,aAAA,CAAc,KAAKxH,QAAA,EAAUoC,aAAA,CAAcnB,CAAA,CAAE0D,QAAQ,GAAG;UACtDsB,EAAA,EAAIe,IAAA,CAAKnB,IAAA;UACT4B,aAAA,EAAe;UACfC,KAAA,EAAO;QAAA,CACR,CAEH;QAEN,MAAMC,QAAA,IAAWL,SAAA,oBAAAA,SAAA,CAAW3C,QAAA,KAAY,KAAKrE,cAAA,CAAeqE,QAAA;QAE5D5C,SAAA,CACEiF,IAAA,CAAKnB,IAAA,IAAQ,QAAQyB,SAAA,IAAa,MAClC,oCAAoCN,IAAA,CAAKnB,IAAA;QAG3C,MAAMwB,UAAA,KAAapE,EAAA,GAAA2E,IAAA,CAAKV,WAAW,MAAhB,gBAAAjE,EAAA,CAAmB2B,MAAA,KAAU,KAAKtE,cAAA,CAAesE,MAAA;QAEpE,MAAMiD,cAAA,GAAiBZ,OAAA,oBAAAA,OAAA,CAASjG,MAAA,CAAQC,CAAA,IACtCiG,WAAA,CAAYK,IAAA,CAAMO,CAAA,IAAMA,CAAA,CAAEC,OAAA,KAAY9G,CAAA,CAAE8G,OAAO;QAG3C,MAAAC,0BAAA,GACJ,KAAK5G,UAAA,EACH6G,EAAA,GAAAJ,cAAA,oBAAAA,cAAA,CAAgBN,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAE0D,QAAA,KAAagD,QAAA,MAA3C,gBAAAM,EAAA,CAAsDF,OACxD;QAEE,IAAApD,QAAA,GAAWqC,IAAA,CAAKf,EAAA,GAChB,KAAKL,mBAAA,CAAoB+B,QAAA,EAAU,GAAGX,IAAA,CAAKf,EAAE,EAAE,IAC/C,KAAKL,mBAAA,CACH+B,QAAA,GACAK,0BAAA,oBAAAA,0BAAA,CAA4B/B,EAAA,KAAM0B,QAAA;QAGxC,MAAMO,UAAA,GAAa;UAAE,KAAGC,EAAA,GAAAP,IAAA,CAAKV,WAAW,MAAhB,gBAAAiB,EAAA,CAAmBC,MAAA;QAAO;QAElD,IAAIC,UAAA,IACDrB,IAAA,CAAKoB,MAAA,IAAU,UAAU,OACtBF,UAAA,GACA;UAAE,GAAGA,UAAA;UAAY,GAAGI,gBAAA,CAAiBtB,IAAA,CAAKoB,MAAA,EAAQF,UAAU;QAAE;QAEpE,IAAIvF,MAAA,CAAO4F,IAAA,CAAKF,UAAU,EAAE7F,MAAA,GAAS,GAAG;UAElCyE,OAAA,oBAAAA,OAAA,CAAA5D,GAAA,CAAKpC,CAAA,IAAM;;YACX,MAAMuH,KAAA,GAAQ,KAAKC,eAAA,CAAgBxH,CAAA,CAAE8G,OAAO;YAC5C,SACEW,GAAA,GAAAF,KAAA,oBAAAA,KAAA,CAAO7J,OAAA,CAAQyJ,MAAA,KAAf,gBAAAM,GAAA,CAAuBC,SAAA,KAAaH,KAAA,CAAO7J,OAAA,CAAQiK,eAAA;UAEtD,GACA5H,MAAA,CAAO6H,OAAA,EACPlH,OAAA,CAASpC,EAAA,IAAO;YACf8I,UAAA,GAAa;cAAE,GAAGA,UAAA;cAAa,GAAG9I,EAAA,CAAI8I,UAAU;YAAE;UAAA;QAExD;QAEA1D,QAAA,GAAWmE,eAAA,CAAgB;UACzB5G,IAAA,EAAMyC,QAAA;UACNyD,MAAA,EAAQC,UAAA,IAAc,CAAC;UACvBU,cAAA,EAAgB;UAChBC,WAAA,EAAalC,IAAA,CAAKkC;QAAA,CACnB;QAED,MAAMC,gBAAA,IACJpB,cAAA,oBAAAA,cAAA,CACIxE,GAAA,CACCgD,KAAA,IACC,KAAKoC,eAAA,CAAgBpC,KAAA,CAAM0B,OAAO,EAAGpJ,OAAA,CAAQsK,gBAAA,IAC7C,EAAC,EAEJC,IAAA,GACAlI,MAAA,CAAO6H,OAAA,MAAY;QAExB,MAAMM,iBAAA,IACJtB,cAAA,oBAAAA,cAAA,CACIxE,GAAA,CACCgD,KAAA,IACC,KAAKoC,eAAA,CAAgBpC,KAAA,CAAM0B,OAAO,EAAGpJ,OAAA,CAAQwK,iBAAA,IAC7C,EAAC,EAEJD,IAAA,GACAlI,MAAA,CAAO6H,OAAA,MAAY;QAGxB,MAAMO,iBAAA,GAAoBH,gBAAA,CAAiBzG,MAAA,GACvCyG,gBAAA,CAAiBI,MAAA,CAAO,CAACC,IAAA,EAAMC,IAAA,KAASA,IAAA,CAAKD,IAAI,GAAGjC,UAAU,IAC9DA,UAAA;QAGJ,MAAMmC,UAAA,GACJxC,IAAA,CAAKpC,MAAA,KAAW,OACZwE,iBAAA,GACApC,IAAA,CAAKpC,MAAA,GACH0D,gBAAA,CAAiBtB,IAAA,CAAKpC,MAAA,EAAQwE,iBAAiB,IAC/CH,gBAAA,CAAiBzG,MAAA,GACf4G,iBAAA,GACA;QAGV,MAAMK,kBAAA,GAAqBN,iBAAA,CAAkB3G,MAAA,GACzC2G,iBAAA,CAAkBE,MAAA,CAAO,CAACC,IAAA,EAAMC,IAAA,KAASA,IAAA,CAAKD,IAAI,GAAGE,UAAU,IAC/DA,UAAA;QAEE,MAAA5E,MAAA,GAASM,gBAAA,CAAiBmC,UAAA,EAAYoC,kBAAkB;QAE9D,MAAMzE,SAAA,GAAY,KAAKrG,OAAA,CAAQsG,eAAA,CAAgBL,MAAM;QAErD,MAAMC,IAAA,GACJmC,IAAA,CAAKnC,IAAA,KAAS,OACV,KAAKvE,cAAA,CAAeuE,IAAA,GACpBmC,IAAA,CAAKnC,IAAA,GACHyD,gBAAA,CAAiBtB,IAAA,CAAKnC,IAAA,EAAM,KAAKvE,cAAA,CAAeuE,IAAI,IACpD;QAER,MAAM6E,OAAA,GAAU7E,IAAA,GAAO,IAAIA,IAAI,KAAK;QAEpC,IAAI8E,SAAA,GACF3C,IAAA,CAAKlG,KAAA,KAAU,OACX,KAAKR,cAAA,CAAeQ,KAAA,GACpBkG,IAAA,CAAKlG,KAAA,GACHwH,gBAAA,CAAiBtB,IAAA,CAAKlG,KAAA,EAAO,KAAKR,cAAA,CAAeQ,KAAK,IACtD;QAER6I,SAAA,GAAYzE,gBAAA,CAAiB,KAAK5E,cAAA,CAAeQ,KAAA,EAAO6I,SAAS;QAE1D;UACLhF,QAAA;UACAC,MAAA;UACAI,SAAA;UACAlE,KAAA,EAAO6I,SAAA;UACP9E,IAAA,EAAMA,IAAA,IAAQ;UACdQ,IAAA,EAAM,GAAGV,QAAQ,GAAGK,SAAS,GAAG0E,OAAO;UACvCE,cAAA,EAAgB5C,IAAA,CAAK4C;QAAA;MACvB;MAGF,MAAMC,gBAAA,GAAmBA,CACvB7C,IAAA,GAAyB,IACzB8C,UAAA,KACG;;QACG,MAAAP,IAAA,GAAOxC,KAAA,CAAMC,IAAI;QACvB,IAAI+C,UAAA,GAAaD,UAAA,GAAa/C,KAAA,CAAM+C,UAAU,IAAI;QAElD,IAAI,CAACC,UAAA,EAAY;UACf,IAAI3B,MAAA,GAAS;UAEb,MAAM4B,SAAA,IAAY/G,EAAA,QAAKtE,OAAA,CAAQsL,UAAA,KAAb,gBAAAhH,EAAA,CAAyBsE,IAAA,CAAMtG,CAAA,IAAM;YACrD,MAAMoF,KAAA,GAAQmB,aAAA,CAAc,KAAKxH,QAAA,EAAUuJ,IAAA,CAAK5E,QAAA,EAAU;cACxDsB,EAAA,EAAIhF,CAAA,CAAE4E,IAAA;cACN4B,aAAA,EAAe;cACfC,KAAA,EAAO;YAAA,CACR;YAED,IAAIrB,KAAA,EAAO;cACA+B,MAAA,GAAA/B,KAAA;cACF;YACT;YAEO;UAAA;UAGT,IAAI2D,SAAA,EAAW;YACb,MAAM;cAAEnE,IAAA;cAAM,GAAGqE;YAAA,IAAcF,SAAA;YAClBF,UAAA;cACX,GAAGK,IAAA,CAAKrD,IAAA,EAAM,CAAC,MAAM,CAAC;cACtB,GAAGoD,SAAA;cACH9B;YAAA;YAEF2B,UAAA,GAAahD,KAAA,CAAM+C,UAAU;UAC/B;QACF;QAEM,MAAAM,WAAA,GAAc,KAAKhD,WAAA,CAAYmC,IAAI;QACzC,MAAMc,aAAA,GAAgBN,UAAA,GAClB,KAAK3C,WAAA,CAAY2C,UAAU,IAC3B;QACJ,MAAMO,WAAA,GAAcP,UAAA,GAChBhD,KAAA,CAAM+C,UAAA,EAAYO,aAAa,IAC/B;QAEE,MAAAE,KAAA,GAAQxD,KAAA,CAAMC,IAAA,EAAMoD,WAAW;QAErC,IAAIE,WAAA,EAAa;UACfC,KAAA,CAAM5E,cAAA,GAAiB2E,WAAA;QACzB;QAEO,OAAAC,KAAA;MAAA;MAGT,IAAIzD,IAAA,CAAK0D,IAAA,EAAM;QACb,OAAOX,gBAAA,CAAiB/C,IAAA,EAAM;UAC5B,GAAGqD,IAAA,CAAKrD,IAAA,EAAM,CAAC,MAAM,CAAC;UACtB,GAAGA,IAAA,CAAK0D;QAAA,CACT;MACH;MAEA,OAAOX,gBAAA,CAAiB/C,IAAI;IAAA;IAK9B,KAAA2D,cAAA,GAAiB,CAAC;MAChBC,cAAA;MACAC,aAAA;MACA,GAAGpB;IAAA,MACwD;MAC3D,MAAMqB,WAAA,GAAcA,CAAA,KAAM;QAKxBrB,IAAA,CAAKzI,KAAA,CAAM4E,GAAA,GAAM,KAAKpF,cAAA,CAAeQ,KAAA,CAAM4E,GAAA;QAC3C,MAAMmF,OAAA,GAAUC,SAAA,CAAUvB,IAAA,CAAKzI,KAAA,EAAO,KAAKR,cAAA,CAAeQ,KAAK;QAC/D,OAAOyI,IAAA,CAAKzI,KAAA,CAAM4E,GAAA;QACX,OAAAmF,OAAA;MAAA;MAGT,MAAME,SAAA,GAAY,KAAKzK,cAAA,CAAe+E,IAAA,KAASkE,IAAA,CAAKlE,IAAA;MAEpD,MAAM2F,qBAAA,GAAwB,KAAKC,qBAAA;MAC9B,KAAAA,qBAAA,GAAwBC,uBAAA,CAA8B,MAAM;QAC/DF,qBAAA,oBAAAA,qBAAA,CAAuBG,OAAA;MAAQ,CAChC;MAGG,IAAAJ,SAAA,IAAaH,WAAA,IAAe;QAC9B,KAAKQ,IAAA,CAAK;MAAA,OACL;QAEL,IAAI;UAAEzF,cAAA;UAAgB,GAAG0F;QAAA,IAAgB9B,IAAA;QAEzC,IAAI5D,cAAA,EAAgB;UACJ0F,WAAA;YACZ,GAAG1F,cAAA;YACH7E,KAAA,EAAO;cACL,GAAG6E,cAAA,CAAe7E,KAAA;cAClB0E,SAAA,EAAW;cACXD,cAAA,EAAgB;gBACd,GAAG8F,WAAA;gBACHzG,MAAA,EAAQyG,WAAA,CAAYrG,SAAA;gBACpBlE,KAAA,EAAO;kBACL,GAAGuK,WAAA,CAAYvK,KAAA;kBACf0E,SAAA,EAAW;kBACXD,cAAA,EAAgB;kBAChBG,GAAA,EAAK;gBACP;cACF;YACF;UAAA;UAGF,IACE2F,WAAA,CAAYzB,cAAA,IACZ,KAAKjL,OAAA,CAAQiL,cAAA,IACb,OACA;YACYyB,WAAA,CAAAvK,KAAA,CAAM0E,SAAA,GAAY,KAAK1G,eAAA;UACrC;QACF;QAEA,KAAKK,oBAAA,GAAuBuL,cAAA;QAE5B,KAAKxK,OAAA,CAAQqJ,IAAA,CAAK+B,OAAA,GAAU,YAAY,MAAM,EAC5CD,WAAA,CAAYhG,IAAA,EACZgG,WAAA,CAAYvK,KAAA,EACZ;UAAE6J;QAAc;MAEpB;MAEK,KAAAzL,eAAA,GAAkBqK,IAAA,CAAKgC,WAAA,IAAe;MAE3C,IAAI,CAAC,KAAKrL,OAAA,CAAQd,WAAA,CAAYoM,IAAA,EAAM;QAClC,KAAKJ,IAAA,CAAK;MACZ;MAEA,OAAO,KAAKH,qBAAA;IAAA;IAGd,KAAAQ,sBAAA,GAAyB,CAAC;MACxBH,OAAA;MACAC,WAAA;MACAb,cAAA;MACAC,aAAA;MACA,GAAGe;IACL,IAA8C,OAAO;MACnD,MAAMrG,IAAA,GAAQqG,IAAA,CAAarG,IAAA;MAC3B,IAAIA,IAAA,EAAM;QACR,MAAMtC,MAAA,GAAS4I,SAAA,CAAUtG,IAAA,EAAM,CAAE;QACjCqG,IAAA,CAAKzF,EAAA,GAAKlD,MAAA,CAAO4B,QAAA;QACjB+G,IAAA,CAAK9G,MAAA,GAAS,KAAKjG,OAAA,CAAQoG,WAAA,CAAYhC,MAAA,CAAO6B,MAAM;QACpD8G,IAAA,CAAK7G,IAAA,GAAO9B,MAAA,CAAO8B,IAAA;MACrB;MAEM,MAAAS,QAAA,GAAW,KAAKuB,aAAA,CAAc6E,IAAW;MAC/C,OAAO,KAAKjB,cAAA,CAAe;QACzB,GAAGnF,QAAA;QACHoF,cAAA;QACAY,OAAA;QACAC,WAAA;QACAZ;MAAA,CACD;IAAA;IAGH,KAAAiB,QAAA,GAAuB,CAAC;MAAE3F,EAAA;MAAI4F,YAAA;MAAc,GAAGH;IAAA,MAAW;MAMlD,MAAAI,QAAA,GAAW9J,MAAA,CAAOiE,EAAE;MACtB,IAAA8F,UAAA;MAEA;QACE,IAAAC,GAAA,CAAI,GAAGF,QAAQ,EAAE;QACRC,UAAA;MAAA,SACNjE,CAAA,EAAG,CAAC;MAEb/F,SAAA,CACE,CAACgK,UAAA,EACD;MAGF,OAAO,KAAKN,sBAAA,CAAuB;QACjC,GAAGC,IAAA;QACHzF;QAAA;MAAA,CAED;IAAA;IAKH,KAAAmF,IAAA,GAAO,YAA2B;MAChC,KAAK9K,cAAA,GAAiB,KAAKC,aAAA,CAAc,KAAKD,cAAc;MAEvD,KAAAI,OAAA,CAAQuL,QAAA,CAAUC,CAAA,KAAO;QAC5B,GAAGA,CAAA;QACHC,QAAA,EAAUC,IAAA,CAAKC,GAAA,CAAI;MACnB;MAEE,IAAAC,QAAA;MACA,IAAAC,QAAA;MAEA,IAAAC,WAAA;MAGUA,WAAA,OAAIC,OAAA,CAAetB,OAAA,IAAY;QAC3C,KAAK7L,oBAAA,CAAqB,YAAY;;UAChC;YACF,MAAMiK,IAAA,GAAO,KAAKjJ,cAAA;YACZ,MAAAoM,YAAA,GAAe,KAAK5L,KAAA,CAAM6L,gBAAA;YAC1B,MAAAC,aAAA,GAAgBF,YAAA,CAAarH,IAAA,KAASkE,IAAA,CAAKlE,IAAA;YAGjD,KAAKsB,aAAA,CAAc;YAEf,IAAAC,cAAA;YAEC,KAAAlG,OAAA,CAAQmM,KAAA,CAAM,MAAM;cAMNjG,cAAA,QAAKQ,WAAA,CAAYmC,IAAI;cAGjC,KAAA7I,OAAA,CAAQuL,QAAA,CAAUC,CAAA,KAAO;gBAC5B,GAAGA,CAAA;gBACH/K,MAAA,EAAQ;gBACR2L,SAAA,EAAW;gBACXxH,QAAA,EAAUiE,IAAA;gBACV3C,cAAA;gBAAA;gBAEA7F,aAAA,EAAemL,CAAA,CAAEnL,aAAA,CAAcC,MAAA,CAAQC,CAAA,IAAM;kBACpC,QAAC2F,cAAA,CAAeW,IAAA,CAAMO,CAAA,IAAMA,CAAA,CAAEtG,EAAA,KAAOP,CAAA,CAAEO,EAAE;gBAAA,CACjD;cACD;YAAA,CACH;YAEG,KAAC,KAAKV,KAAA,CAAMwL,QAAA,EAAU;cACxB,KAAK/H,IAAA,CAAK;gBACRhB,IAAA,EAAM;gBACNwJ,YAAA,EAAcL,YAAA;gBACdM,UAAA,EAAYzD,IAAA;gBACZ0D,WAAA,EAAaL;cAAA,CACd;YACH;YAEA,KAAKrI,IAAA,CAAK;cACRhB,IAAA,EAAM;cACNwJ,YAAA,EAAcL,YAAA;cACdM,UAAA,EAAYzD,IAAA;cACZ0D,WAAA,EAAaL;YAAA,CACd;YAED,MAAM,KAAKM,WAAA,CAAY;cACrBjG,OAAA,EAASL,cAAA;cACTtB,QAAA,EAAUiE,IAAA;cAAA;cAEV4D,OAAA,EAAS,MAAAA,CAAA,KAAY;gBAEnB,KAAKC,mBAAA,CAAoB,YAAY;kBAK/B,IAAAC,cAAA;kBACA,IAAAC,eAAA;kBACA,IAAAzF,cAAA;kBAEC,KAAAnH,OAAA,CAAQmM,KAAA,CAAM,MAAM;oBAClB,KAAAnM,OAAA,CAAQuL,QAAA,CAAUC,CAAA,IAAM;sBAC3B,MAAMqB,eAAA,GAAkBrB,CAAA,CAAEjF,OAAA;sBACpB,MAAAuG,UAAA,GAAatB,CAAA,CAAEtF,cAAA,IAAkBsF,CAAA,CAAEjF,OAAA;sBAEzCoG,cAAA,GAAiBE,eAAA,CAAgBvM,MAAA,CAC9BqF,KAAA,IAAU,CAACmH,UAAA,CAAWjG,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAO6E,KAAA,CAAM7E,EAAE;sBAEtD8L,eAAA,GAAkBE,UAAA,CAAWxM,MAAA,CAC1BqF,KAAA,IACC,CAACkH,eAAA,CAAgBhG,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAO6E,KAAA,CAAM7E,EAAE;sBAElDqG,cAAA,GAAiB0F,eAAA,CAAgBvM,MAAA,CAAQqF,KAAA,IACvCmH,UAAA,CAAWjG,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAO6E,KAAA,CAAM7E,EAAE;sBAGnC;wBACL,GAAG0K,CAAA;wBACHY,SAAA,EAAW;wBACX7F,OAAA,EAASuG,UAAA;wBACT5G,cAAA,EAAgB;wBAChB7F,aAAA,EAAe,CACb,GAAGmL,CAAA,CAAEnL,aAAA,EACL,GAAGsM,cAAA,CAAerM,MAAA,CAAQC,CAAA,IAAMA,CAAA,CAAEE,MAAA,KAAW,OAAO;sBACtD;oBACF,CACD;oBACD,KAAKsM,UAAA,CAAW;kBAAA,CACjB;kBAIC,CACE,CAACJ,cAAA,EAAgB,SAAS,GAC1B,CAACC,eAAA,EAAiB,SAAS,GAC3B,CAACzF,cAAA,EAAgB,QAAQ,GAE3BlG,OAAA,CAAQ,CAAC,CAACsF,OAAA,EAASyG,IAAI,MAAM;oBACrBzG,OAAA,CAAAtF,OAAA,CAAS0E,KAAA,IAAU;;sBACzB,CAAA4B,EAAA,IAAAS,GAAA,QAAKD,eAAA,CAAgBpC,KAAA,CAAM0B,OAAO,EAAGpJ,OAAA,EAAQ+O,IAAA,MAA7C,gBAAAzF,EAAA,CAAA0F,IAAA,CAAAjF,GAAA,EAAqDrC,KAAA;oBAAK,CAC3D;kBAAA,CACF;gBAAA,CACF;cACH;YAAA,CACD;UAAA,SACMuH,GAAA,EAAK;YACR,IAAAC,kBAAA,CAAmBD,GAAG,GAAG;cAChBtB,QAAA,GAAAsB,GAAA;cACP,KAAC,KAAK9N,QAAA,EAAU;gBACb,KAAA8L,QAAA,CAAS;kBAAE,GAAGgC,GAAA;kBAAKtC,OAAA,EAAS;kBAAMO,YAAA,EAAc;gBAAA,CAAM;cAC7D;YAAA,WACSiC,UAAA,CAAWF,GAAG,GAAG;cACfrB,QAAA,GAAAqB,GAAA;YACb;YAEK,KAAAlN,OAAA,CAAQuL,QAAA,CAAUC,CAAA,KAAO;cAC5B,GAAGA,CAAA;cACH6B,UAAA,EAAYzB,QAAA,GACRA,QAAA,CAASyB,UAAA,GACTxB,QAAA,GACE,MACAL,CAAA,CAAEjF,OAAA,CAAQ+G,IAAA,CAAM/M,CAAA,IAAMA,CAAA,CAAEE,MAAA,KAAW,OAAO,IACxC,MACA;cACRmL;YACA;UACJ;UAEI,SAAK2B,iBAAA,KAAsBzB,WAAA,EAAa;YAC1C,CAAAvJ,EAAA,QAAKgI,qBAAA,KAAL,gBAAAhI,EAAA,CAA4BkI,OAAA;YAC5B,KAAK8C,iBAAA,GAAoB;YACzB,KAAKhD,qBAAA,GAAwB;UAC/B;UACQE,OAAA;QAAA,CACT;MAAA,CACF;MAED,KAAK8C,iBAAA,GAAoBzB,WAAA;MAEnB,MAAAA,WAAA;MAEN,OACG,KAAKyB,iBAAA,IACNzB,WAAA,KAAgB,KAAKyB,iBAAA,EACrB;QACA,MAAM,KAAKA,iBAAA;MACb;IAAA;IAGF,KAAAb,mBAAA,GAAuB7N,EAAA,IAA4B;;MAGjD,MAAMJ,oBAAA,GACJ,KAAKA,oBAAA,IAAwB,KAAKR,OAAA,CAAQuP,qBAAA;MAG5C,OAAO,KAAK/O,oBAAA;MAEV,EAAA8I,EAAA,IAAAhF,EAAA,GAAA9D,oBAAA,IAAwB,OAAOY,QAAA,KAAa,cAC1CA,QAAA,GACA,WAFF,gBAAAkD,EAAA,CAKEmK,mBAAA,KALF,gBAAAnF,EAAA,CAAA0F,IAAA,CAAA1K,EAAA,EAKwB1D,EAAA,MAAOA,EAAA;IAAG;IAGxB,KAAA4O,WAAA,IACZ3M,EAAA,EACA4M,OAAA,KACG;;MACC,IAAAC,OAAA;MACE,MAAAC,SAAA,IAAYrL,EAAA,QAAKnC,KAAA,CAAM8F,cAAA,KAAX,gBAAA3D,EAAA,CAA2BsE,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAOA,EAAA;MAC5D,MAAA+M,SAAA,GAAY,KAAKzN,KAAA,CAAMmG,OAAA,CAAQM,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAOA,EAAE;MAE5D,MAAMgN,UAAA,GAAaF,SAAA,GACf,mBACAC,SAAA,GACE,YACA;MAED,KAAA7N,OAAA,CAAQuL,QAAA,CAAUC,CAAA,IAAO;;QAAA;UAC5B,GAAGA,CAAA;UACH,CAACsC,UAAU,IAAG9F,GAAA,GAAAwD,CAAA,CAAEsC,UAAU,MAAZ,gBAAA9F,GAAA,CAAerF,GAAA,CAAKpC,CAAA,IAChCA,CAAA,CAAEO,EAAA,KAAOA,EAAA,GAAM6M,OAAA,GAAUD,OAAA,CAAQnN,CAAC,IAAKA,CAAA;QAEzC;MAAA;MAEK,OAAAoN,OAAA;IAAA;IAGT,KAAA/H,QAAA,GAAYmI,OAAA,IAAoB;MACvB,QACL,GAAG,KAAK3N,KAAA,CAAMC,aAAA,EACd,IAAI,KAAKD,KAAA,CAAM8F,cAAA,IAAkB,EAAC,GAClC,GAAG,KAAK9F,KAAA,CAAMmG,OAAA,EACdM,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAOiN,OAAO;IAAA;IAGhC,KAAAvB,WAAA,GAAc,OAAO;MACnB5H,QAAA;MACA2B,OAAA;MACAyH,OAAA;MACAvB,OAAA;MACAgB,WAAA,GAAc,KAAKA;IAAA,MAWiB;MAChC,IAAAQ,kBAAA;MACJ,IAAIC,QAAA,GAAW;MAEf,MAAMC,cAAA,GAAiB,MAAAA,CAAA,KAAY;QACjC,IAAI,CAACD,QAAA,EAAU;UACFA,QAAA;UACX,OAAMzB,OAAA,oBAAAA,OAAA;QACR;MAAA;MAGF,IAAI,CAAC,KAAKrN,QAAA,IAAY,CAAC,KAAKgB,KAAA,CAAMmG,OAAA,CAAQzE,MAAA,EAAQ;QACjCqM,cAAA;MACjB;MAEM,MAAAC,yBAAA,GAA4BA,CAACzI,KAAA,EAAsBuH,GAAA,KAAa;;QAChE,IAAAC,kBAAA,CAAmBD,GAAG,GAAS,MAAAA,GAAA;QAEnC,IAAImB,UAAA,CAAWnB,GAAG,KAAKE,UAAA,CAAWF,GAAG,GAAG;UAC1BO,WAAA,CAAA9H,KAAA,CAAM7E,EAAA,EAAK8H,IAAA,KAAU;YAC/B,GAAGA,IAAA;YACHnI,MAAA,EAAQ4N,UAAA,CAAWnB,GAAG,IAClB,eACAE,UAAA,CAAWF,GAAG,IACZ,aACA;YACNoB,UAAA,EAAY;YACZC,KAAA,EAAOrB,GAAA;YACPsB,iBAAA,EAAmB;YACnBC,aAAA,EAAe;UACf;UAEE,KAAEvB,GAAA,CAAY7F,OAAA,EAAS;YACvB6F,GAAA,CAAY7F,OAAA,GAAU1B,KAAA,CAAM0B,OAAA;UAChC;UAEA,CAAA9E,EAAA,GAAAoD,KAAA,CAAM6I,iBAAA,KAAN,gBAAAjM,EAAA,CAAyBkI,OAAA;UACzB,CAAAlD,EAAA,GAAA5B,KAAA,CAAM8I,aAAA,KAAN,gBAAAlH,EAAA,CAAqBkD,OAAA;UACrB,CAAAhD,EAAA,GAAA9B,KAAA,CAAMmG,WAAA,KAAN,gBAAArE,EAAA,CAAmBgD,OAAA;UAEf,IAAA4D,UAAA,CAAWnB,GAAG,GAAG;YACRgB,QAAA;YACXhB,GAAA,GAAM,KAAKwB,eAAA,CAAgB;cAAE,GAAGxB,GAAA;cAAKzG,aAAA,EAAe7B;YAAA,CAAU;YACxD,MAAAsI,GAAA;UAAA,WACGE,UAAA,CAAWF,GAAG,GAAG;YACrB,KAAAyB,eAAA,CAAgBpI,OAAA,EAAS2G,GAAA,EAAK;cACjCO;YAAA,CACD;YACK,MAAAP,GAAA;UACR;QACF;MAAA;MAGE;QACF,MAAM,IAAInB,OAAA,CAAc,CAAC6C,UAAA,EAAYC,SAAA,KAAc;UACjD;UAAC,CAAC,YAAY;;YACR;cACF,MAAMC,iBAAA,GAAoBA,CACxB9L,KAAA,EACAkK,GAAA,EACA6B,UAAA,KACG;;gBACH,MAAM;kBAAEjO,EAAA,EAAIiN,OAAA;kBAAS1G;gBAAQ,IAAId,OAAA,CAAQvD,KAAK;gBACxC,MAAA8E,KAAA,GAAQ,KAAKC,eAAA,CAAgBV,OAAO;gBAK1C,IAAI6F,GAAA,YAAenB,OAAA,EAAS;kBACpB,MAAAmB,GAAA;gBACR;gBAEAA,GAAA,CAAI6B,UAAA,GAAaA,UAAA;gBACjBd,kBAAA,GAAqBA,kBAAA,IAAsBjL,KAAA;gBAC3CoL,yBAAA,CAA0B,KAAKxI,QAAA,CAASmI,OAAO,GAAIb,GAAG;gBAElD;kBACI,CAAA8B,GAAA,IAAAhH,GAAA,GAAAF,KAAA,CAAA7J,OAAA,EAAQgR,OAAA,KAAR,gBAAAD,GAAA,CAAA/B,IAAA,CAAAjF,GAAA,EAAkBkF,GAAA;gBAAA,SACjBgC,eAAA,EAAiB;kBAClBhC,GAAA,GAAAgC,eAAA;kBACNd,yBAAA,CAA0B,KAAKxI,QAAA,CAASmI,OAAO,GAAIb,GAAG;gBACxD;gBAEYO,WAAA,CAAAM,OAAA,EAAUnF,IAAA,IAAS;;kBAC7B,CAAAuG,GAAA,GAAAvG,IAAA,CAAK4F,iBAAA,KAAL,gBAAAW,GAAA,CAAwB1E,OAAA;kBAEjB;oBACL,GAAG7B,IAAA;oBACH2F,KAAA,EAAOrB,GAAA;oBACPzM,MAAA,EAAQ;oBACR6N,UAAA,EAAY;oBACZc,SAAA,EAAW1D,IAAA,CAAKC,GAAA,CAAI;oBACpB9F,eAAA,EAAiB,IAAIwJ,eAAA,CAAgB;oBACrCb,iBAAA,EAAmB;kBAAA;gBACrB,CACD;cAAA;cAGQ,YAACxL,KAAA,EAAO;gBAAElC,EAAA,EAAIiN,OAAA;gBAAS1G;cAAA,CAAS,KAAKd,OAAA,CAAQ+I,OAAA,IAAW;gBAC3D,MAAAC,aAAA,GAAgB,KAAK3J,QAAA,CAASmI,OAAO;gBAC3C,MAAMyB,aAAA,IAAgBjN,EAAA,GAAAgE,OAAA,CAAQvD,KAAA,GAAQ,CAAC,MAAjB,gBAAAT,EAAA,CAAoBzB,EAAA;gBAE1C;gBAAA;gBAAA;gBAGEyO,aAAA,CAAcf,iBAAA,IACde,aAAA,CAAcd,aAAA,EACd;kBAEA,MAAMc,aAAA,CAAcf,iBAAA;gBAAA,OACf;kBAED;oBACUf,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;sBAC9B,GAAGA,IAAA;sBACHkD,WAAA,EAAatB,uBAAA,CAA8B,MAAM;;wBAC/C,CAAAxC,GAAA,GAAAY,IAAA,CAAKkD,WAAA,KAAL,gBAAA9D,GAAA,CAAkByC,OAAA;sBAAQ,CAC3B;sBACD+D,iBAAA,EAAmBhE,uBAAA,CAA8B;oBACjD;oBAEI,MAAA1C,KAAA,GAAQ,KAAKC,eAAA,CAAgBV,OAAO;oBACpC,MAAAxB,eAAA,GAAkB,IAAIwJ,eAAA;oBAE5B,MAAMI,SAAA,GACJ3H,KAAA,CAAM7J,OAAA,CAAQwR,SAAA,IAAa,KAAKxR,OAAA,CAAQyR,gBAAA;oBAEpC,MAAAC,aAAA,GAAgB,CAAC,EACrBlD,OAAA,IACA,CAAC,KAAKrN,QAAA,IACN,CAAC4O,OAAA,KACAlG,KAAA,CAAM7J,OAAA,CAAQ2R,MAAA,IAAU9H,KAAA,CAAM7J,OAAA,CAAQ4R,UAAA,KACvC,OAAOJ,SAAA,KAAc,YACrBA,SAAA,KAAcK,QAAA,KACbhI,KAAA,CAAM7J,OAAA,CAAQ8R,gBAAA,IACb,KAAK9R,OAAA,CAAQ+R,uBAAA;oBAGb,IAAAhK,cAAA;oBAEJ,IAAI2J,aAAA,EAAe;sBAGjB3J,cAAA,GAAiBiK,UAAA,CAAW,MAAM;wBAC5B;0BAGa9B,cAAA;wBAAA,QACT,CAAC;sBAAA,GACRsB,SAAS;oBACd;oBAEA,MAAM;sBAAES,WAAA;sBAAaC;oBAAA,IAAgB,KAAKvK,QAAA,CAASmI,OAAO;oBAE1D,IAAImC,WAAA,EAAa;sBACGpB,iBAAA,CAAA9L,KAAA,EAAOkN,WAAA,EAAa,cAAc;oBACtD;oBAEA,IAAIC,WAAA,EAAa;sBACGrB,iBAAA,CAAA9L,KAAA,EAAOmN,WAAA,EAAa,iBAAiB;oBACzD;oBAEM,MAAAC,qBAAA,GAAwBA,CAAA,KAC5BZ,aAAA,GACI,KAAK5J,QAAA,CAAS4J,aAAa,EAAGa,OAAA,GAC7B,KAAKpS,OAAA,CAAQoS,OAAA,IAAW;oBAEnB5C,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;sBAC9B,GAAGA,IAAA;sBACH0F,UAAA,EAAY;sBACZgC,UAAA,EAAY1H,IAAA,CAAK0H,UAAA,GAAa;sBAC9BzK,eAAA;sBACAG,cAAA;sBACAqK,OAAA,EAAS;wBACP,GAAGD,qBAAA,CAAsB;wBACzB,GAAGxH,IAAA,CAAK2H,cAAA;wBACR,GAAG3H,IAAA,CAAK4H;sBACV;oBACA;oBAEI;sBAAEtM,MAAA;sBAAQwD,MAAA;sBAAQ2I,OAAA;sBAASI;oBAAA,IAC/B,KAAK7K,QAAA,CAASmI,OAAO;oBAEvB,MAAM2C,mBAAA,GAMF;sBACFxM,MAAA;sBACA2B,eAAA;sBACA6B,MAAA;sBACAsG,OAAA,EAAS,CAAC,CAACA,OAAA;sBACXqC,OAAA;sBACAzL,QAAA;sBACAsG,QAAA,EAAW9E,IAAA,IACT,KAAK8E,QAAA,CAAS;wBAAE,GAAG9E,IAAA;wBAAMK,aAAA,EAAe7B;sBAAA,CAAU;sBACpDuB,aAAA,EAAe,KAAKA,aAAA;sBACpBsK,KAAA,EAAOzC,OAAA,GAAU,YAAYyC;oBAAA;oBAG/B,IAAIE,iBAAA,GACD,SAAMlJ,EAAA,IAAAF,EAAA,GAAAO,KAAA,CAAM7J,OAAA,EAAQ4R,UAAA,KAAd,gBAAApI,EAAA,CAAAwF,IAAA,CAAA1F,EAAA,EAA2BmJ,mBAAA,OAClC;oBAEF,IAAI,KAAKE,mBAAA,EAAqB;sBAC5BD,iBAAA,GAAoB,KAAKC,mBAAA,CACvB,uBACAD,iBAAA,EACA;wBACEE,MAAA,EAAQ;wBACRlL,KAAA,EAAO,KAAKC,QAAA,CAASmI,OAAO;sBAC9B;oBAEJ;oBAEA,IACEM,UAAA,CAAWsC,iBAAiB,KAC5BvD,UAAA,CAAWuD,iBAAiB,GAC5B;sBACkB7B,iBAAA,CAAA9L,KAAA,EAAO2N,iBAAA,EAAmB,aAAa;oBAC3D;oBAEYlD,WAAA,CAAAM,OAAA,EAAUnF,IAAA,IAAS;sBACtB;wBACL,GAAGA,IAAA;wBACH4H,mBAAA,EAAqBG,iBAAA;wBACrBN,OAAA,EAAS;0BACP,GAAGD,qBAAA,CAAsB;0BACzB,GAAGxH,IAAA,CAAK2H,cAAA;0BACR,GAAGI;wBACL;wBACA9K;sBAAA;oBACF,CACD;kBAAA,SACMqH,GAAA,EAAK;oBACM4B,iBAAA,CAAA9L,KAAA,EAAOkK,GAAA,EAAK,aAAa;kBAC7C;kBAEYO,WAAA,CAAAM,OAAA,EAAUnF,IAAA,IAAS;;oBAC7B,CAAAZ,GAAA,GAAAY,IAAA,CAAK4F,iBAAA,KAAL,gBAAAxG,GAAA,CAAwByC,OAAA;oBAEjB;sBACL,GAAG7B,IAAA;sBACH4F,iBAAA,EAAmB;sBACnBF,UAAA,EAAY;oBAAA;kBACd,CACD;gBACH;cACF;cAEA,MAAMwC,oBAAA,GAAuBvK,OAAA,CAAQwK,KAAA,CAAM,GAAG9C,kBAAkB;cAChE,MAAM+C,aAAA,GAAqC;cAE3CF,oBAAA,CAAqB7P,OAAA,CAAQ,CAAC;gBAAEH,EAAA,EAAIiN,OAAA;gBAAS1G;cAAA,GAAWrE,KAAA,KAAU;gBAClDgO,aAAA,CAAAlO,IAAA,EACX,YAAY;kBACX,MAAM;oBAAE2L,aAAA,EAAewC;kBAAA,IACrB,KAAKrL,QAAA,CAASmI,OAAO;kBAEvB,IAAIkD,iBAAA,EAAmB;oBACf,MAAAA,iBAAA;kBAAA,OACD;oBACC,MAAAC,kBAAA,GAAqBF,aAAA,CAAchO,KAAA,GAAQ,CAAC;oBAC5C,MAAA8E,KAAA,GAAQ,KAAKC,eAAA,CAAgBV,OAAO;oBAE1C,MAAM8J,gBAAA,GAAmBA,CAAA,KAAuB;sBACxC;wBACJzJ,MAAA;wBACA0J,UAAA;wBACAvL,eAAA;wBACAwK,OAAA;wBACAI;sBAAA,IACE,KAAK7K,QAAA,CAASmI,OAAO;sBAElB;wBACLrG,MAAA;wBACA2J,IAAA,EAAMD,UAAA;wBACNpD,OAAA,EAAS,CAAC,CAACA,OAAA;wBACXkD,kBAAA;wBACArL,eAAA;wBACAwK,OAAA;wBACAzL,QAAA;wBACAsG,QAAA,EAAW9E,IAAA,IACT,KAAK8E,QAAA,CAAS;0BAAE,GAAG9E,IAAA;0BAAMK,aAAA,EAAe7B;wBAAA,CAAU;wBACpD6L,KAAA,EAAOzC,OAAA,GAAU,YAAYyC,KAAA;wBAC7B3I;sBAAA;oBACF;oBAIF,MAAMwJ,GAAA,GAAM5F,IAAA,CAAKC,GAAA,KAAQ,KAAK/F,QAAA,CAASmI,OAAO,EAAGqB,SAAA;oBAEjD,MAAMmC,QAAA,GAAWvD,OAAA,GACZlG,KAAA,CAAM7J,OAAA,CAAQuT,gBAAA,IACf,KAAKvT,OAAA,CAAQwT,uBAAA,IACb,MACC3J,KAAA,CAAM7J,OAAA,CAAQyT,SAAA,IACf,KAAKzT,OAAA,CAAQ0T,gBAAA,IACb;oBAEE,MAAAC,kBAAA,GAAqB9J,KAAA,CAAM7J,OAAA,CAAQ4T,YAAA;oBAKzC,MAAMA,YAAA,GACJ,OAAOD,kBAAA,KAAuB,aAC1BA,kBAAA,CAAmBT,gBAAA,EAAkB,IACrCS,kBAAA;oBAEMnE,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;sBAC9B,GAAGA,IAAA;sBACH6F,aAAA,EAAejE,uBAAA,CAA8B;sBAC7CwD,OAAA,EACE,CAAC,CAACA,OAAA,IACF,CAAC,KAAK5N,KAAA,CAAMmG,OAAA,CAAQM,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAOiN,OAAO;oBAClD;oBAEF,MAAM+D,SAAA,GAAY,MAAAA,CAAA,KAAY;;sBACxB;wBAMF,MAAMC,0BAAA,GAA6B,MAAAA,CAAA,KAAY;0BACvC,MAAAC,WAAA,GAAc,KAAKpM,QAAA,CAASmI,OAAO;0BAEzC,IAAIiE,WAAA,CAAYC,iBAAA,EAAmB;4BACjC,MAAMD,WAAA,CAAYC,iBAAA;0BACpB;wBAAA;wBAIE;0BACInK,KAAA,CAAAoK,YAAA,GACJpK,KAAA,CAAMoK,YAAA,KACLpK,KAAA,CAAMqK,MAAA,GACHrK,KAAA,CAAMqK,MAAA,CAAO,EAAEC,IAAA,CAAMC,SAAA,IAAc;4BAC1BpQ,MAAA,CAAAqQ,MAAA,CACLxK,KAAA,CAAM7J,OAAA,EACNoU,SAAA,CAAUpU,OAAA;0BACZ,CACD,IACD8N,OAAA,CAAQtB,OAAA,CAAQ;0BAKtB,MAAM8H,iBAAA,GACJ,KAAK3M,QAAA,CAASmI,OAAO,EAAGwE,iBAAA,IACxBzK,KAAA,CAAMoK,YAAA,CAAaE,IAAA,CAAK,MACtBrG,OAAA,CAAQyG,GAAA,CACNzU,cAAA,CAAe4E,GAAA,CAAI,MAAOE,IAAA,IAAS;4BAC3B,MAAA4P,SAAA,GAAY3K,KAAA,CAAM7J,OAAA,CAAQ4E,IAAI;4BAEpC,IAAK4P,SAAA,oBAAAA,SAAA,CAAmBzE,OAAA,EAAS;8BAC/B,MAAOyE,SAAA,CAAkBzE,OAAA;4BAC3B;0BAAA,CACD,CACH;0BAIQP,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;4BAC9B,GAAGA,IAAA;4BACH0F,UAAA,EAAY;4BACZiE;0BACA;0BAKF,MAAMzK,KAAA,CAAMoK,YAAA;0BAGZ,IAAIQ,UAAA,GACF,QAAM1D,GAAA,IAAAhH,GAAA,GAAAF,KAAA,CAAM7J,OAAA,EAAQ2R,MAAA,KAAd,gBAAAZ,GAAA,CAAA/B,IAAA,CAAAjF,GAAA,EAAuBmJ,gBAAA;0BAE/B,IAAI,KAAKP,mBAAA,EAAqB;4BAC5B8B,UAAA,GAAa,KAAK9B,mBAAA,CAChB,cACA8B,UAAA,EACA;8BACE7B,MAAA,EAAQ;8BACRlL,KAAA,EAAO,KAAKC,QAAA,CAASmI,OAAO;4BAC9B;0BAEJ;0BAEAK,yBAAA,CACE,KAAKxI,QAAA,CAASmI,OAAO,GACrB2E,UAAA;0BAGF,MAAMX,0BAAA,CAA2B;0BAE3B,MAAAY,IAAA,IAAOC,EAAA,IAAAC,GAAA,GAAA/K,KAAA,CAAM7J,OAAA,EAAQ0U,IAAA,KAAd,gBAAAC,EAAA,CAAA3F,IAAA,CAAA4F,GAAA,EAAqB;4BAChCtM,OAAA;4BACAZ,KAAA,EAAO,KAAKC,QAAA,CAASmI,OAAO;4BAC5BrG,MAAA,EAAQ,KAAK9B,QAAA,CAASmI,OAAO,EAAGrG,MAAA;4BAChCgL;0BAAA;0BAGI,MAAAI,OAAA,IAAUC,EAAA,IAAAC,EAAA,GAAAlL,KAAA,CAAM7J,OAAA,EAAQ6U,OAAA,KAAd,gBAAAC,EAAA,CAAA9F,IAAA,CAAA+F,EAAA,EAAwB;4BACtCN;0BAAA;0BAGUjF,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;4BAC9B,GAAGA,IAAA;4BACH2F,KAAA,EAAO;4BACP9N,MAAA,EAAQ;4BACR6N,UAAA,EAAY;4BACZc,SAAA,EAAW1D,IAAA,CAAKC,GAAA,CAAI;4BACpB+G,UAAA;4BACAC,IAAA;4BACAG;0BACA;wBAAA,SACK1L,CAAA,EAAG;0BACV,IAAImH,KAAA,GAAQnH,CAAA;0BAEZ,MAAM2K,0BAAA,CAA2B;0BAEjC3D,yBAAA,CAA0B,KAAKxI,QAAA,CAASmI,OAAO,GAAI3G,CAAC;0BAEhD;4BACI,CAAA6L,EAAA,IAAAC,EAAA,GAAApL,KAAA,CAAA7J,OAAA,EAAQgR,OAAA,KAAR,gBAAAgE,EAAA,CAAAhG,IAAA,CAAAiG,EAAA,EAAkB9L,CAAA;0BAAA,SACjB+L,YAAA,EAAc;4BACb5E,KAAA,GAAA4E,YAAA;4BACR/E,yBAAA,CACE,KAAKxI,QAAA,CAASmI,OAAO,GACrBoF,YAAA;0BAEJ;0BAEY1F,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;4BAC9B,GAAGA,IAAA;4BACH2F,KAAA;4BACA9N,MAAA,EAAQ;4BACR6N,UAAA,EAAY;0BACZ;wBACJ;wBAIM,WAAK1I,QAAA,CAASmI,OAAO,EAAGwE,iBAAA;sBAAA,SACvBrF,GAAA,EAAK;wBACZkB,yBAAA,CAA0B,KAAKxI,QAAA,CAASmI,OAAO,GAAIb,GAAG;sBACxD;oBAAA;oBAIF,MAAM;sBAAEzM,MAAA;sBAAQ2S;oBAAA,IAAY,KAAKxN,QAAA,CAASmI,OAAO;oBAEjD,IAAIC,OAAA,IAAWlG,KAAA,CAAM7J,OAAA,CAAQ+P,OAAA,KAAY,OAAO,YAG9CvN,MAAA,KAAW,cACV2S,OAAA,KAAYvB,YAAA,IAAgBP,GAAA,GAAMC,QAAA,IACnC;sBACA;sBAAC,CAAC,YAAY;wBACR;0BACF,MAAMO,SAAA,CAAU;wBAAA,SACT5E,GAAA,EAAK,CAAC;sBAAA;oBACd,WACMzM,MAAA,KAAW,WAAW;sBAC/B,MAAMqR,SAAA,CAAU;oBAClB;oBAEA,MAAM;sBAAErD,aAAA;sBAAe3C;oBAAA,IACrB,KAAKlG,QAAA,CAASmI,OAAO;oBAEvBU,aAAA,oBAAAA,aAAA,CAAehE,OAAA;oBACfqB,WAAA,oBAAAA,WAAA,CAAarB,OAAA;kBACf;kBAEYgD,WAAA,CAAAM,OAAA,EAAUnF,IAAA,KAAU;oBAC9B,GAAGA,IAAA;oBACH0F,UAAA,EAAY;oBACZG,aAAA,EAAe;kBACf;gBAAA,GACD;cACL,CACD;cAEK,MAAA1C,OAAA,CAAQyG,GAAA,CAAIxB,aAAa;cAEpBpC,UAAA;qBACJ1B,GAAA,EAAK;cACZ2B,SAAA,CAAU3B,GAAG;YACf;UAAA;QACC,CACJ;QACD,MAAMiB,cAAA,CAAe;MAAA,SACdjB,GAAA,EAAK;QACZ,IAAImB,UAAA,CAAWnB,GAAG,KAAKE,UAAA,CAAWF,GAAG,GAAG;UACtC,IAAIE,UAAA,CAAWF,GAAG,KAAK,CAACc,OAAA,EAAS;YAC/B,MAAMG,cAAA,CAAe;UACvB;UACM,MAAAjB,GAAA;QACR;MACF;MAEO,OAAA3G,OAAA;IAAA;IAGT,KAAA8M,UAAA,GAAa,MAAM;MACX,MAAAA,UAAA,GAAc9S,CAAA,KAAmC;QACrD,GAAGA,CAAA;QACH6S,OAAA,EAAS;QACT,IAAI7S,CAAA,CAAEE,MAAA,KAAW,UACZ;UAAEA,MAAA,EAAQ;UAAW8N,KAAA,EAAO;QAAU,IACvC,CAAC;MAAA;MAGF,KAAAvO,OAAA,CAAQuL,QAAA,CAAUC,CAAA,IAAO;;QAAA;UAC5B,GAAGA,CAAA;UACHjF,OAAA,EAASiF,CAAA,CAAEjF,OAAA,CAAQ5D,GAAA,CAAI0Q,UAAU;UACjChT,aAAA,EAAemL,CAAA,CAAEnL,aAAA,CAAcsC,GAAA,CAAI0Q,UAAU;UAC7CnN,cAAA,GAAgB3D,EAAA,GAAAiJ,CAAA,CAAEtF,cAAA,KAAF,gBAAA3D,EAAA,CAAkBI,GAAA,CAAI0Q,UAAA;QACtC;MAAA;MAEF,OAAO,KAAK3I,IAAA;IAAK;IAGnB,KAAAgE,eAAA,GAAmBxB,GAAA,IAAuC;MACxD,MAAMtB,QAAA,GAAWsB,GAAA;MAEb,KAACtB,QAAA,CAASjH,IAAA,EAAM;QAClBiH,QAAA,CAASjH,IAAA,GAAO,KAAKwB,aAAA,CAAcyF,QAAe,EAAEjH,IAAA;MACtD;MAEO,OAAAiH,QAAA;IAAA;IAGT,KAAAmB,UAAA,GAAa,MAAM;MAEZ,KAAA/M,OAAA,CAAQuL,QAAA,CAAUC,CAAA,IAAM;QACpB;UACL,GAAGA,CAAA;UACHnL,aAAA,EAAemL,CAAA,CAAEnL,aAAA,CAAcC,MAAA,CAAQC,CAAA,IAAM;YAC3C,MAAMuH,KAAA,GAAQ,KAAKC,eAAA,CAAgBxH,CAAA,CAAE8G,OAAO;YAExC,KAACS,KAAA,CAAM7J,OAAA,CAAQ2R,MAAA,EAAQ;cAClB;YACT;YAIA,MAAM0D,MAAA,IACH/S,CAAA,CAAEyN,OAAA,GACElG,KAAA,CAAM7J,OAAA,CAAQsV,aAAA,IACf,KAAKtV,OAAA,CAAQuV,oBAAA,GACZ1L,KAAA,CAAM7J,OAAA,CAAQqV,MAAA,IAAU,KAAKrV,OAAA,CAAQwV,aAAA,KAC1C,IAAI,KAAK;YAEX,OAAOlT,CAAA,CAAEE,MAAA,KAAW,WAAWiL,IAAA,CAAKC,GAAA,KAAQpL,CAAA,CAAE6O,SAAA,GAAYkE,MAAA;UAAA,CAC3D;QAAA;MACH,CACD;IAAA;IAGH,KAAAI,YAAA,GAAe,MAMbtN,IAAA,IAO8C;MACxC,MAAAyC,IAAA,GAAO,KAAK1C,aAAA,CAAcC,IAAW;MAEvC,IAAAG,OAAA,GAAU,KAAKG,WAAA,CAAYmC,IAAA,EAAM;QACnC8K,YAAA,EAAc;QACd3F,OAAA,EAAS;MAAA,CACV;MAED,MAAM4F,cAAA,GAAiB3R,MAAA,CAAO4R,WAAA,CAC5B,CACE,GAAG,KAAKzT,KAAA,CAAMmG,OAAA,EACd,IAAI,KAAKnG,KAAA,CAAM8F,cAAA,IAAkB,EAAC,GAClC,GAAG,KAAK9F,KAAA,CAAMC,aAAA,EACdsC,GAAA,CAAKpC,CAAA,IAAM,CAACA,CAAA,CAAEO,EAAA,EAAI,IAAI,CAAC;MAGtB,KAAAd,OAAA,CAAQmM,KAAA,CAAM,MAAM;QACf5F,OAAA,CAAAtF,OAAA,CAAS0E,KAAA,IAAU;UACzB,IAAI,CAACiO,cAAA,CAAejO,KAAA,CAAM7E,EAAE,GAAG;YACxB,KAAAd,OAAA,CAAQuL,QAAA,CAAUC,CAAA,KAAO;cAC5B,GAAGA,CAAA;cACHnL,aAAA,EAAe,CAAC,GAAImL,CAAA,CAAEnL,aAAA,EAAuBsF,KAAK;YAClD;UACJ;QAAA,CACD;MAAA,CACF;MAED,MAAMmO,cAAA,GAAiB,IAAInV,GAAA,CACzB,CAAC,GAAG,KAAKyB,KAAA,CAAMmG,OAAA,EAAS,IAAI,KAAKnG,KAAA,CAAM8F,cAAA,IAAkB,EAAG,GAAEvD,GAAA,CAC3DpC,CAAA,IAAMA,CAAA,CAAEO,EACX;MAGE;QACQyF,OAAA,SAAM,KAAKiG,WAAA,CAAY;UAC/BjG,OAAA;UACA3B,QAAA,EAAUiE,IAAA;UACVmF,OAAA,EAAS;UACTP,WAAA,EAAaA,CAAC3M,EAAA,EAAI4M,OAAA,KAAY;YACxB,IAAAoG,cAAA,CAAeC,GAAA,CAAIjT,EAAE,GAAG;cAChByF,OAAA,GAAAA,OAAA,CAAQ5D,GAAA,CAAKpC,CAAA,IAAOA,CAAA,CAAEO,EAAA,KAAOA,EAAA,GAAK4M,OAAA,CAAQnN,CAAC,IAAIA,CAAE;YAAA,OACtD;cACA,KAAAkN,WAAA,CAAY3M,EAAA,EAAI4M,OAAO;YAC9B;UACF;QAAA,CACD;QAEM,OAAAnH,OAAA;MAAA,SACA2G,GAAA,EAAK;QACR,IAAAmB,UAAA,CAAWnB,GAAG,GAAG;UACZ,aAAM,KAAKwG,YAAA,CAAa;YAC7B,GAAIxG,GAAA;YACJzG,aAAA,EAAeoC;UAAA,CAChB;QACH;QAEA5J,OAAA,CAAQsP,KAAA,CAAMrB,GAAG;QACV;MACT;IAAA;IAGW,KAAA8G,UAAA,IAKXpP,QAAA,EAKAwB,IAAA,KACmE;MACnE,MAAM6N,aAAA,GAAgB;QACpB,GAAGrP,QAAA;QACHW,EAAA,EAAIX,QAAA,CAASW,EAAA,GACT,KAAKL,mBAAA,CAAqBN,QAAA,CAASO,IAAA,IAAQ,IAAeP,QAAA,CAASW,EAAE,IACrE;QACJmC,MAAA,EAAQ9C,QAAA,CAAS8C,MAAA,IAAU,CAAC;QAC5BY,WAAA,EAAa;MAAA;MAET,MAAAO,IAAA,GAAO,KAAK1C,aAAA,CAAc8N,aAAoB;MAEpD,KAAI7N,IAAA,oBAAAA,IAAA,CAAM8N,OAAA,KAAW,KAAK9T,KAAA,CAAMK,MAAA,KAAW,WAAW;QAC7C;MACT;MAEM,MAAAyT,OAAA,IACJ9N,IAAA,oBAAAA,IAAA,CAAM8N,OAAA,MAAY,SAAY,CAAC,KAAK9T,KAAA,CAAMgM,SAAA,GAAYhG,IAAA,CAAK8N,OAAA;MAE7D,MAAMC,YAAA,GAAeD,OAAA,GACjB,KAAKtU,cAAA,GACL,KAAKQ,KAAA,CAAM6L,gBAAA;MAEf,MAAMtG,KAAA,GAAQmB,aAAA,CAAc,KAAKxH,QAAA,EAAU6U,YAAA,CAAalQ,QAAA,EAAU;QAChE,GAAGmC,IAAA;QACHb,EAAA,EAAIsD,IAAA,CAAK5E;MAAA,CACV;MAED,IAAI,CAAC0B,KAAA,EAAO;QACH;MACT;MACA,IAAIf,QAAA,CAAS8C,MAAA,EAAQ;QACnB,IAAI,CAAC0C,SAAA,CAAUzE,KAAA,EAAOf,QAAA,CAAS8C,MAAA,EAAQ,IAAI,GAAG;UACrC;QACT;MACF;MAEI,IAAA/B,KAAA,MAAUS,IAAA,oBAAAA,IAAA,CAAMgO,aAAA,KAAiB,OAAO;QAC1C,OAAOhK,SAAA,CAAU+J,YAAA,CAAajQ,MAAA,EAAQ2E,IAAA,CAAK3E,MAAA,EAAQ,IAAI,IAAIyB,KAAA,GAAQ;MACrE;MAEO,OAAAA,KAAA;IAAA;IAGT,KAAA0O,SAAA,GAAY,MAAwB;;MAClC,MAAMC,SAAA,KACJ/R,EAAA,QAAKtE,OAAA,CAAQsW,eAAA,KAAb,gBAAAhS,EAAA,CAA8BiS,SAAA,KAAaC,qBAAA;MAEtC;QACLrU,KAAA,EAAO;UACLsU,iBAAA,EAAmB,KAAKtU,KAAA,CAAMmG,OAAA,CAAQ5D,GAAA,CAAKpC,CAAA,IAAM;YACxC;cACL,GAAGkJ,IAAA,CAAKlJ,CAAA,EAAG,CAAC,MAAM,UAAU,WAAW,CAAC;cAAA;cAAA;cAGxCgO,KAAA,EAAOhO,CAAA,CAAEgO,KAAA,GACL;gBACEoG,IAAA,EAAML,SAAA,CAAU/T,CAAA,CAAEgO,KAAK;gBACvBqG,eAAA,EAAiB;cAEnB;cAAA;cAAA;cAAA;cAAA;YAAA;UAKN,CACD;QACH;QACAC,QAAA,EAAU,KAAKA;MAAA;IACjB;IAGF,KAAAC,OAAA,GAAU,MAAM;;MAEV,IAAAC,GAAA;MAEA,WAAO1V,QAAA,KAAa,aAAa;QACnC0V,GAAA,GAAM,KAAK9W,OAAA,CAAQ+W,WAAA,CAAYhR,KAAA,EAAMzB,EAAA,GAAA0S,MAAA,CAAOC,OAAA,KAAP,gBAAA3S,EAAA,CAAgB4S,UAAU;MACjE;MAEA9T,SAAA,CACE0T,GAAA,EACA;MAGF,KAAKK,cAAA,GAAiBL,GAAA,CAAIM,OAAA;MACrB,CAAA5N,EAAA,IAAAF,EAAA,QAAAtJ,OAAA,EAAQ6W,OAAA,KAAR,gBAAArN,EAAA,CAAAwF,IAAA,CAAA1F,EAAA,EAAkBwN,GAAA,CAAIM,OAAA;MACrB,MAAAC,eAAA,GAAkBP,GAAA,CAAIlE,MAAA,CAAOzQ,KAAA;MAE7B,MAAAmG,OAAA,GAAU,KAAKG,WAAA,CAAY,KAAKtG,KAAA,CAAMwE,QAAQ,EAAEjC,GAAA,CAAKgD,KAAA,IAAU;QAC7D,MAAA4P,eAAA,GAAkBD,eAAA,CAAgBZ,iBAAA,CAAkB7N,IAAA,CACvDtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAO6E,KAAA,CAAM7E,EAAA;QAGxBO,SAAA,CACEkU,eAAA,EACA,oEAAoE5P,KAAA,CAAM7E,EAAE;QAGvE;UACL,GAAG6E,KAAA;UACH,GAAG4P;QAAA;MACL,CACD;MAEI,KAAAvV,OAAA,CAAQuL,QAAA,CAAUC,CAAA,IAAM;QACpB;UACL,GAAGA,CAAA;UACHjF;QAAA;MACF,CACD;MAEI,KAAAsO,QAAA,GAAWE,GAAA,CAAIlE,MAAA,CAAOgE,QAAA;IAAA;IAG7B,KAAAW,YAAA,GAAoC;IACpC,KAAAC,UAAA,GAAsCC,IAAA,IAAS;MAC7C,MAAMC,EAAA,GAAKA,CAAA,KAAM;QACf,KAAKH,YAAA,GAAe,KAAKA,YAAA,CAAalV,MAAA,CAAQC,CAAA,IAAMA,CAAA,KAAMoV,EAAE;QACrD,OAAAD,IAAA;MAAA;MAGJ,KAAAF,YAAA,CAAa1S,IAAA,CAAK6S,EAAE;IAAA;IAE3B,KAAAC,YAAA,sBAAgCjX,GAAA;IAEhC,KAAAkX,gBAAA,GAAuB7Q,GAAA,IAA+B;;MACpD,IAAI,KAAK5F,QAAA,EAAU;QACV;MACT;MAEA,MAAM0W,aAAA,IAAgBvT,EAAA,GAAA0S,MAAA,CAAOC,OAAA,KAAP,gBAAA3S,EAAA,CAAgBwT,cAAA,CAAe/Q,GAAA;MAErD,IAAI,CAAC8Q,aAAA,EAAe;QAClB;MACF;MAEI,KAACA,aAAA,CAAczT,MAAA,EAAQ;QACzByT,aAAA,CAAczT,MAAA,GAAS,KAAKpE,OAAA,CAAQ+W,WAAA,CAAYhR,KAAA,CAAM8R,aAAA,CAActT,KAAK;MAC3E;MAEA,OAAOsT,aAAA,CAAczT,MAAA;IAAA;IAGT,KAAA2T,WAAA,IAAChR,GAAA,EAAaxC,KAAA,KAAe;;MACzCyT,OAAA,CACE,CAAC,KAAKL,YAAA,CAAa7B,GAAA,CAAI/O,GAAG,GAC1B,oCAAoCA,GAAA;MAGjC,KAAA4Q,YAAA,CAAajS,GAAA,CAAIqB,GAAG;MACzB,MAAMnD,QAAA,GAAW,2BAA2BmD,GAAG,kBAAiBzC,EAAA,QAAK2T,UAAA,KAAL,gBAAA3T,EAAA,CAAA0K,IAAA,OAAkB,KAAKhP,OAAA,CAAQ+W,WAAA,CAAY/M,SAAA,CAAUzF,KAAK,EAAE;MAEvH,KAAAiT,UAAA,CACH,4BAA4B5T,QAAQ,GAClCsU,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,gBACrB;AAAA,UACFxU,QAAQ,QACN,EACN;IACF;IAGgB,KAAA8M,eAAA,IAChBpI,OAAA,EACA2G,GAAA,EACA;MACEO,WAAA,GAAc,KAAKA;IACrB,IAKI,OACD;MACH,MAAM6I,gBAAA,GAAmBrU,MAAA,CAAO4R,WAAA,CAC9BtN,OAAA,CAAQ5D,GAAA,CAAK4T,MAAA,IAAU,CAACA,MAAA,CAAMlP,OAAA,EAASkP,MAAK,CAAC;MAI/C,IAAIC,WAAA,IACDtJ,GAAA,CAAIuJ,MAAA,GACD,KAAK1O,eAAA,CAAgB2O,WAAW,IAChC,KAAK3O,eAAA,CAAgBmF,GAAA,CAAI7F,OAAO,MACpC,KAAKU,eAAA,CAAgB2O,WAAW;MAIhC,QAACF,WAAA,CAAYvY,OAAA,CAAQ0Y,iBAAA,IACrB,CAAC,KAAK1Y,OAAA,CAAQ2Y,wBAAA,IACdJ,WAAA,CAAY1V,EAAA,KAAO4V,WAAA,EACnB;QACAF,WAAA,GAAcA,WAAA,CAAYK,WAAA;QAE1BxV,SAAA,CACEmV,WAAA,EACA;MAEJ;MAEM,MAAA7Q,KAAA,GAAQ2Q,gBAAA,CAAiBE,WAAA,CAAY1V,EAAE;MAEnCO,SAAA,CAAAsE,KAAA,EAAO,qCAAqC6Q,WAAA,CAAY1V,EAAE;MAIxD2M,WAAA,CAAA9H,KAAA,CAAM7E,EAAA,EAAK8H,IAAA,KAAU;QAC/B,GAAGA,IAAA;QACHnI,MAAA,EAAQ;QACR8N,KAAA,EAAOrB,GAAA;QACPoB,UAAA,EAAY;MACZ;MAEF,IAAKpB,GAAA,CAAY6B,UAAA,KAAe,iBAAiByH,WAAA,CAAYK,WAAA,EAAa;QACpE3J,GAAA,CAAA7F,OAAA,GAAUmP,WAAA,CAAYK,WAAA,CAAY/V,EAAA;QACjC,KAAA6N,eAAA,CAAgBpI,OAAA,EAAS2G,GAAA,EAAK;UACjCO;QAAA,CACD;MACH;IAAA;IAGF,KAAAqJ,gBAAA,GAAmB,MAAM;MAChB,YAAK9W,OAAA,CAAQI,KAAA,CAAMmG,OAAA,CAAQ+G,IAAA,CAC/B/M,CAAA,IAAMA,CAAA,CAAEE,MAAA,KAAW,cAAcF,CAAA,CAAEwW,cAAA;IACtC;IAziEA,KAAKjY,MAAA,CAAO;MACVkY,mBAAA,EAAqB;MACrBtH,gBAAA,EAAkB;MAClBuH,mBAAA,EAAqB;MACrB5G,OAAA,EAAS;MACT,GAAGpS,OAAA;MACHiZ,YAAA,EAAcjZ,OAAA,CAAQiZ,YAAA,IAAgB;MACtC3S,eAAA,EAAiBtG,OAAA,CAAQsG,eAAA,IAAmB4S,sBAAA;MAC5C9S,WAAA,EAAapG,OAAA,CAAQoG,WAAA,IAAe+S,kBAAA;MACpCpC,WAAA,EAAa/W,OAAA,CAAQ+W,WAAA,IAAeqC;IAAA,CACrC;IAEG,WAAOhY,QAAA,KAAa,aAAa;MACjC4V,MAAA,CAAeqC,eAAA,GAAkB;IACrC;EACF;EA+EA,IAAIlX,MAAA,EAAQ;IACV,OAAO,KAAKJ,OAAA,CAAQI,KAAA;EACtB;EAiMA,IAAI2H,gBAAA,EAAkB;IACpB,OAAO,KAAKrH,UAAA;EACd;EAqBOgG,YACL6Q,cAAA,EACAC,oBAAA,EAGApR,IAAA,EACA;IACI,WAAOmR,cAAA,KAAmB,UAAU;MACtC,OAAO,KAAKE,mBAAA,CACV;QACExT,QAAA,EAAUsT,cAAA;QACVrT,MAAA,EAAQsT;MACV,GACApR,IAAA;IACF,OACK;MACE,YAAKqR,mBAAA,CAAoBF,cAAA,EAAgBC,oBAAoB;IACtE;EACF;EAEQC,oBACN5O,IAAA,EACAzC,IAAA,EACsB;IACtB,IAAIsR,WAAA,GAAsC;IAE1C,MAAMC,UAAA,GAAa,KAAK1U,UAAA,CAAW4D,IAAA,CAAMiB,KAAA,IAAU;MACjD,MAAM8P,aAAA,GAAgB9Q,aAAA,CACpB,KAAKxH,QAAA,EACLoC,aAAA,CAAcmH,IAAA,CAAK5E,QAAQ,GAC3B;QACEsB,EAAA,EAAIuC,KAAA,CAAMnG,QAAA;QACVoF,aAAA,EACEe,KAAA,CAAM7J,OAAA,CAAQ8I,aAAA,IAAiB,KAAK9I,OAAA,CAAQ8I,aAAA;QAC9CC,KAAA,EAAO;MACT;MAGF,IAAI4Q,aAAA,EAAe;QACHF,WAAA,GAAAE,aAAA;QACP;MACT;MAEO;IAAA,CACR;IAED,IAAIpB,WAAA,GACFmB,UAAA,IAAe,KAAKjX,UAAA,CAAmBgW,WAAW;IAE9C,MAAAmB,aAAA,GAAiC,CAACrB,WAAW;IAEnD,IAAIsB,gBAAA,GAAmB;IAGvB;IAAA;IAEEH,UAAA,GACIA,UAAA,CAAWnW,IAAA,KAAS,OAAOkW,WAAA,CAAY,IAAI;IAAA;IAE3ChW,aAAA,CAAcmH,IAAA,CAAK5E,QAAQ,GAC/B;MAEI,SAAKhG,OAAA,CAAQe,aAAA,EAAe;QAChB6Y,aAAA,CAAA/U,IAAA,CAAK,KAAK7E,OAAA,CAAQe,aAAa;MAAA,OACxC;QAEc8Y,gBAAA;MACrB;IACF;IAEA,OAAOtB,WAAA,CAAYK,WAAA,EAAa;MAC9BL,WAAA,GAAcA,WAAA,CAAYK,WAAA;MAC1BgB,aAAA,CAAcE,OAAA,CAAQvB,WAAW;IACnC;IAEA,MAAMwB,qBAAA,IAAyB,MAAM;MACnC,IAAI,CAACF,gBAAA,EAAkB;QACd;MACT;MAEI,SAAK7Z,OAAA,CAAQiZ,YAAA,KAAiB,QAAQ;QACxC,SAAS/V,CAAA,GAAI0W,aAAA,CAAc/V,MAAA,GAAS,GAAGX,CAAA,IAAK,GAAGA,CAAA,IAAK;UAC5C,MAAA2G,KAAA,GAAQ+P,aAAA,CAAc1W,CAAC;UAC7B,IAAI2G,KAAA,CAAMjG,QAAA,EAAU;YAClB,OAAOiG,KAAA,CAAMhH,EAAA;UACf;QACF;MACF;MAEO,OAAA4V,WAAA;IAAA;IAMT,MAAMuB,WAAA,GAAcJ,aAAA,CAAclV,GAAA,CAAKmF,KAAA,IAAU;;MAC3C,IAAAoQ,iBAAA;MAEJ,MAAMC,WAAA,KACJ5V,EAAA,GAAAuF,KAAA,CAAM7J,OAAA,CAAQyJ,MAAA,KAAd,gBAAAnF,EAAA,CAAsByB,KAAA,KAAS8D,KAAA,CAAM7J,OAAA,CAAQka,WAAA;MAE/C,IAAIA,WAAA,EAAa;QACX;UACI,MAAAC,YAAA,GAAeD,WAAA,CAAYT,WAAW;UAErCzV,MAAA,CAAAqQ,MAAA,CAAOoF,WAAA,EAAaU,YAAY;QAAA,SAChClL,GAAA,EAAU;UACGgL,iBAAA,OAAIG,cAAA,CAAenL,GAAA,CAAIoL,OAAA,EAAS;YAClD7H,KAAA,EAAOvD;UAAA,CACR;UAED,IAAI9G,IAAA,oBAAAA,IAAA,CAAMuN,YAAA,EAAc;YAChB,MAAAuE,iBAAA;UACR;UAEO,OAAAA,iBAAA;QACT;MACF;MAEA;IAAA,CACD;IAED,MAAM3R,OAAA,GAAgC;IAExBsR,aAAA,CAAA5W,OAAA,CAAQ,CAAC6G,KAAA,EAAO9E,KAAA,KAAU;;MAQhC,MAAAuV,WAAA,GAAchS,OAAA,CAAQvD,KAAA,GAAQ,CAAC;MAErC,MAAM,CAACwV,cAAA,EAAgBrI,WAAW,KAAiC,MAAM;QAEjE,MAAAsI,YAAA,IAAeF,WAAA,oBAAAA,WAAA,CAAarU,MAAA,KAAU2E,IAAA,CAAK3E,MAAA;QAE7C;UACI,MAAAwU,SAAA,GACJ,OAAO5Q,KAAA,CAAM7J,OAAA,CAAQ0a,cAAA,KAAmB,WACpC7Q,KAAA,CAAM7J,OAAA,CAAQ0a,cAAA,CAAe3U,KAAA,GAC7B8D,KAAA,CAAM7J,OAAA,CAAQ0a,cAAA;UAEpB,MAAMzU,MAAA,IAASwU,SAAA,oBAAAA,SAAA,CAAYD,YAAA,MAAiB;UAErC,QACL;YACE,GAAGA,YAAA;YACH,GAAGvU;UACL,GACA;QAAA,SAEKgJ,GAAA,EAAU;UACjB,MAAM0L,gBAAA,GAAmB,IAAIC,gBAAA,CAAiB3L,GAAA,CAAIoL,OAAA,EAAS;YACzD7H,KAAA,EAAOvD;UAAA,CACR;UAED,IAAI9G,IAAA,oBAAAA,IAAA,CAAMuN,YAAA,EAAc;YAChB,MAAAiF,gBAAA;UACR;UAEO,QAACH,YAAA,EAAcG,gBAAgB;QACxC;MAAA;MAQI,MAAAxH,UAAA,KACJ7J,EAAA,IAAAhF,EAAA,GAAAuF,KAAA,CAAM7J,OAAA,EAAQmT,UAAA,KAAd,gBAAA7J,EAAA,CAAA0F,IAAA,CAAA1K,EAAA,EAA2B;QACzB2B,MAAA,EAAQsU;MACT,OAAK;MAER,MAAMM,cAAA,GAAiB1H,UAAA,GAAa2H,IAAA,CAAK9Q,SAAA,CAAUmJ,UAAU,IAAI;MAEjE,MAAM4H,gBAAA,GAAmB5Q,eAAA,CAAgB;QACvC5G,IAAA,EAAMsG,KAAA,CAAMnG,QAAA;QACZ+F,MAAA,EAAQgQ;MAAA,CACT;MAED,MAAM3J,OAAA,GACJ3F,eAAA,CAAgB;QACd5G,IAAA,EAAMsG,KAAA,CAAMhH,EAAA;QACZ4G,MAAA,EAAQgQ,WAAA;QACRrP,cAAA,EAAgB;MACjB,KAAIyQ,cAAA;MAKD,MAAAvJ,aAAA,GAAgB,KAAK3J,QAAA,CAASmI,OAAO;MAErC,MAAA0C,KAAA,GAAQ,KAAKrQ,KAAA,CAAMmG,OAAA,CAAQM,IAAA,CAAMtG,CAAA,IAAMA,CAAA,CAAEO,EAAA,KAAOiN,OAAO,IACzD,SACA;MAEA,IAAApI,KAAA;MAEJ,IAAI4J,aAAA,EAAe;QACT5J,KAAA;UACN,GAAG4J,aAAA;UACHkB,KAAA;UACA/I,MAAA,EAAQgQ;QAAA;MACV,OACK;QACC,MAAAjX,MAAA,GACJqH,KAAA,CAAM7J,OAAA,CAAQ2R,MAAA,IAAU9H,KAAA,CAAM7J,OAAA,CAAQ4R,UAAA,IAAc/H,KAAA,CAAMqK,MAAA,GACtD,YACA;QAEExM,KAAA;UACN7E,EAAA,EAAIiN,OAAA;UACJ/K,KAAA;UACAqE,OAAA,EAASS,KAAA,CAAMhH,EAAA;UACf4G,MAAA,EAAQgQ,WAAA;UACRzT,QAAA,EAAUgV,SAAA,CAAU,CAAC,KAAK3Z,QAAA,EAAU0Z,gBAAgB,CAAC;UACrD5J,SAAA,EAAW1D,IAAA,CAAKC,GAAA,CAAI;UACpBzH,MAAA,EAAQ,CAAC;UACTiM,WAAA,EAAa;UACb1P,MAAA;UACA6N,UAAA,EAAY;UACZC,KAAA,EAAO;UACP2B,WAAA,EAAa+H,WAAA,CAAYjV,KAAK;UAC9BuN,cAAA,EAAgB,CAAC;UACjBC,mBAAA,EAAqB,CAAC;UACtBH,OAAA,EAAS,CAAC;UACVxK,eAAA,EAAiB,IAAIwJ,eAAA,CAAgB;UACrCiB,UAAA,EAAY;UACZG,KAAA;UACAW,UAAA;UACAgC,OAAA,EAAS;UACTpF,OAAA,EAAS;UACTkL,KAAA,GAAOtG,EAAA,IAAAnL,EAAA,GAAAK,KAAA,CAAM7J,OAAA,EAAQib,KAAA,KAAd,gBAAAtG,EAAA,CAAA3F,IAAA,CAAAxF,EAAA;UACP0R,OAAA,GAASpG,EAAA,IAAAC,EAAA,GAAAlL,KAAA,CAAM7J,OAAA,EAAQkb,OAAA,KAAd,gBAAApG,EAAA,CAAA9F,IAAA,CAAA+F,EAAA;UACToG,UAAA,EAAYtR,KAAA,CAAM7J,OAAA,CAAQmb,UAAA,IAAc,CAAC;UACzCtN,WAAA,EAAatB,uBAAA,CAAwB;UACrC7I,QAAA,EAAUmG,KAAA,CAAMnG;QAAA;MAEpB;MAKI,IAAAgE,KAAA,CAAMlF,MAAA,KAAW,WAAW;QACxBkF,KAAA,CAAAgN,IAAA,IAAOM,EAAA,IAAAC,EAAA,GAAApL,KAAA,CAAM7J,OAAA,EAAQ0U,IAAA,KAAd,gBAAAM,EAAA,CAAAhG,IAAA,CAAAiG,EAAA,EAAqB;UAChC3M,OAAA;UACAZ,KAAA;UACA+B,MAAA,EAAQ/B,KAAA,CAAM+B,MAAA;UACdgL,UAAA,EAAY/M,KAAA,CAAM+M;QAAA;QAGd/M,KAAA,CAAAmN,OAAA,IAAUuG,EAAA,IAAAC,EAAA,GAAAxR,KAAA,CAAM7J,OAAA,EAAQ6U,OAAA,KAAd,gBAAAuG,EAAA,CAAApM,IAAA,CAAAqM,EAAA,EAAwB;UACtC5G,UAAA,EAAY/M,KAAA,CAAM+M;QAAA;MAEtB;MAEI,MAACtM,IAAA,oBAAAA,IAAA,CAAM4H,OAAA,GAAS;QAEZrI,KAAA,CAAAoR,cAAA,GAAiBiB,qBAAA,KAA0BlQ,KAAA,CAAMhH,EAAA;MACzD;MAIA6E,KAAA,CAAMzB,MAAA,GAASM,gBAAA,CAAiBmB,KAAA,CAAMzB,MAAA,EAAQsU,cAAc;MAE5D7S,KAAA,CAAMwK,WAAA,GAAcA,WAAA;MAEpB,MAAMX,aAAA,GAAgB+I,WAAA,oBAAAA,WAAA,CAAazX,EAAA;MAEnC,MAAMyY,aAAA,GAAgB,CAAC/J,aAAA,GACjB,KAAKvR,OAAA,CAAQoS,OAAA,IAAmB,KACjCkI,WAAA,CAAYlI,OAAA,IAAW,KAAKpS,OAAA,CAAQoS,OAAA,IAAW;MAEpD1K,KAAA,CAAM0K,OAAA,GAAU;QACd,GAAGkJ,aAAA;QACH,GAAG5T,KAAA,CAAM4K,cAAA;QACT,GAAG5K,KAAA,CAAM6K;MAAA;MAIX,MAAMgJ,gBAAA,GAA4D;QAChEtV,MAAA,EAAQyB,KAAA,CAAMzB,MAAA;QACdwD,MAAA,EAAQ/B,KAAA,CAAM+B,MAAA;QACd2I,OAAA,EAAS1K,KAAA,CAAM0K,OAAA;QACfzL,QAAA,EAAUiE,IAAA;QACVqC,QAAA,EAAWuO,KAAA,IACT,KAAKvO,QAAA,CAAS;UAAE,GAAGuO,KAAA;UAAMhT,aAAA,EAAeoC;QAAA,CAAM;QAChD1C,aAAA,EAAe,KAAKA,aAAA;QACpBsK,KAAA,EAAO9K,KAAA,CAAM8K,KAAA;QACb5K,eAAA,EAAiBF,KAAA,CAAME,eAAA;QACvBmI,OAAA,EAAS,CAAC,CAACrI,KAAA,CAAMqI;MAAA;MAInBrI,KAAA,CAAM4K,cAAA,KAAiBmJ,EAAA,IAAAC,EAAA,GAAA7R,KAAA,CAAM7J,OAAA,EAAQoS,OAAA,KAAd,gBAAAqJ,EAAA,CAAAzM,IAAA,CAAA0M,EAAA,EAAwBH,gBAAA,MAAqB;MAEpE7T,KAAA,CAAM0K,OAAA,GAAU;QACd,GAAGkJ,aAAA;QACH,GAAG5T,KAAA,CAAM4K,cAAA;QACT,GAAG5K,KAAA,CAAM6K;MAAA;MAGXjK,OAAA,CAAQzD,IAAA,CAAK6C,KAAK;IAAA,CACnB;IAEM,OAAAY,OAAA;EACT;AA87CF;AAKgB,SAAA4L,OAGdtT,EAAA,EAAsBmG,GAAA,EAAY;EAClC,OAAO,UACF4U,IAAA,KACuC;IACpC,MAAAC,QAAA,GAAW,MAAMhb,EAAA;IACvB,OAAOgb,QAAA,CAAS7U,GAAA,IAAO,SAAS,EAAE,GAAG4U,IAAI;EAAA;AAE7C;AAEO,MAAMf,gBAAA,SAAyBiB,KAAA,CAAM;AAErC,MAAMzB,cAAA,SAAuByB,KAAA,CAAM;AAEnC,SAAS5Z,sBACd0E,QAAA,EACkB;EACX;IACL6G,QAAA,EAAU;IACVW,SAAA,EAAW;IACX2N,eAAA,EAAiB;IACjBtZ,MAAA,EAAQ;IACRwL,gBAAA,EAAkB;MAAE,GAAGrH;IAAS;IAChCA,QAAA;IACA2B,OAAA,EAAS,EAAC;IACVL,cAAA,EAAgB,EAAC;IACjB7F,aAAA,EAAe,EAAC;IAChBgN,UAAA,EAAY;EAAA;AAEhB;AAEO,SAASoH,sBAAsBvH,GAAA,EAAc;EAClD,IAAIA,GAAA,YAAe4M,KAAA,EAAO;IACxB,MAAME,GAAA,GAAM;MACVC,IAAA,EAAM/M,GAAA,CAAI+M,IAAA;MACV3B,OAAA,EAASpL,GAAA,CAAIoL;IAAA;IAGX,IAAAnC,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa,eAAe;MACxC2D,GAAA,CAAYE,KAAA,GAAQhN,GAAA,CAAIgN,KAAA;IAC5B;IAEO,OAAAF,GAAA;EACT;EAEO;IACLrF,IAAA,EAAMzH;EAAA;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}