{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useSearch(opts) {\n  return useMatch({\n    ...opts,\n    select: match => {\n      return opts.select ? opts.select(match.search) : match.search;\n    }\n  });\n}\nexport { useSearch };","map":{"version":3,"names":["useSearch","opts","useMatch","select","match","search"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/node_modules/@tanstack/react-router/src/useSearch.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { AnyRoute } from './route'\nimport type { FullSearchSchema, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { MakeRouteMatch } from './Matches'\nimport type { Expand, StrictOrFrom } from './utils'\n\nexport type UseSearchOptions<\n  TFrom,\n  TStrict extends boolean,\n  TSearch,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (search: TSearch) => TSelected\n}\n\nexport function useSearch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TSearch = TStrict extends false\n    ? FullSearchSchema<TRouteTree>\n    : Expand<RouteById<TRouteTree, TFrom>['types']['fullSearchSchema']>,\n  TSelected = TSearch,\n>(opts: UseSearchOptions<TFrom, TStrict, TSearch, TSelected>): TSelected {\n  return useMatch({\n    ...opts,\n    select: (match: MakeRouteMatch<TRouteTree, TFrom>) => {\n      return opts.select ? opts.select(match.search) : match.search\n    },\n  })\n}\n"],"mappings":";AAgBO,SAASA,UAQdC,IAAA,EAAuE;EACvE,OAAOC,QAAA,CAAS;IACd,GAAGD,IAAA;IACHE,MAAA,EAASC,KAAA,IAA6C;MACpD,OAAOH,IAAA,CAAKE,MAAA,GAASF,IAAA,CAAKE,MAAA,CAAOC,KAAA,CAAMC,MAAM,IAAID,KAAA,CAAMC,MAAA;IACzD;EAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}