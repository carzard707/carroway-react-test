{"ast":null,"code":"import { isPlainObject } from \"./utils.js\";\nconst defaultTransformer = {\n  stringify: value => JSON.stringify(value, function replacer(key, value2) {\n    const keyVal = this[key];\n    const transformer = transformers.find(t => t.stringifyCondition(keyVal));\n    if (transformer) {\n      return transformer.stringify(keyVal);\n    }\n    return value2;\n  }),\n  parse: value => JSON.parse(value, function parser(key, value2) {\n    const keyVal = this[key];\n    const transformer = transformers.find(t => t.parseCondition(keyVal));\n    if (transformer) {\n      return transformer.parse(keyVal);\n    }\n    return value2;\n  })\n};\nconst transformers = [{\n  // Dates\n  stringifyCondition: value => value instanceof Date,\n  stringify: value => ({\n    $date: value.toISOString()\n  }),\n  parseCondition: value => isPlainObject(value) && value.$date,\n  parse: value => new Date(value.$date)\n}, {\n  // undefined\n  stringifyCondition: value => value === void 0,\n  stringify: () => ({\n    $undefined: \"\"\n  }),\n  parseCondition: value => isPlainObject(value) && value.$undefined === \"\",\n  parse: () => void 0\n}];\nexport { defaultTransformer };","map":{"version":3,"names":["defaultTransformer","stringify","value","JSON","replacer","key","value2","keyVal","transformer","transformers","find","t","stringifyCondition","parse","parser","parseCondition","Date","$date","toISOString","isPlainObject","$undefined"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/node_modules/@tanstack/react-router/src/transformer.ts"],"sourcesContent":["import { isPlainObject } from './utils'\n\nexport interface RouterTransformer {\n  stringify: (obj: unknown) => string\n  parse: (str: string) => unknown\n}\n\nexport const defaultTransformer: RouterTransformer = {\n  stringify: (value: any) =>\n    JSON.stringify(value, function replacer(key, value) {\n      const keyVal = this[key]\n      const transformer = transformers.find((t) => t.stringifyCondition(keyVal))\n\n      if (transformer) {\n        return transformer.stringify(keyVal)\n      }\n\n      return value\n    }),\n  parse: (value: string) =>\n    JSON.parse(value, function parser(key, value) {\n      const keyVal = this[key]\n      const transformer = transformers.find((t) => t.parseCondition(keyVal))\n\n      if (transformer) {\n        return transformer.parse(keyVal)\n      }\n\n      return value\n    }),\n}\n\nconst transformers = [\n  {\n    // Dates\n    stringifyCondition: (value: any) => value instanceof Date,\n    stringify: (value: any) => ({ $date: value.toISOString() }),\n    parseCondition: (value: any) => isPlainObject(value) && value.$date,\n    parse: (value: any) => new Date(value.$date),\n  },\n  {\n    // undefined\n    stringifyCondition: (value: any) => value === undefined,\n    stringify: () => ({ $undefined: '' }),\n    parseCondition: (value: any) =>\n      isPlainObject(value) && value.$undefined === '',\n    parse: () => undefined,\n  },\n] as const\n"],"mappings":";AAOO,MAAMA,kBAAA,GAAwC;EACnDC,SAAA,EAAYC,KAAA,IACVC,IAAA,CAAKF,SAAA,CAAUC,KAAA,EAAO,SAASE,SAASC,GAAA,EAAKC,MAAA,EAAO;IAC5C,MAAAC,MAAA,GAAS,KAAKF,GAAG;IACjB,MAAAG,WAAA,GAAcC,YAAA,CAAaC,IAAA,CAAMC,CAAA,IAAMA,CAAA,CAAEC,kBAAA,CAAmBL,MAAM,CAAC;IAEzE,IAAIC,WAAA,EAAa;MACR,OAAAA,WAAA,CAAYP,SAAA,CAAUM,MAAM;IACrC;IAEO,OAAAD,MAAA;EAAA,CACR;EACHO,KAAA,EAAQX,KAAA,IACNC,IAAA,CAAKU,KAAA,CAAMX,KAAA,EAAO,SAASY,OAAOT,GAAA,EAAKC,MAAA,EAAO;IACtC,MAAAC,MAAA,GAAS,KAAKF,GAAG;IACjB,MAAAG,WAAA,GAAcC,YAAA,CAAaC,IAAA,CAAMC,CAAA,IAAMA,CAAA,CAAEI,cAAA,CAAeR,MAAM,CAAC;IAErE,IAAIC,WAAA,EAAa;MACR,OAAAA,WAAA,CAAYK,KAAA,CAAMN,MAAM;IACjC;IAEO,OAAAD,MAAA;EAAA,CACR;AACL;AAEA,MAAMG,YAAA,GAAe,CACnB;EAAA;EAEEG,kBAAA,EAAqBV,KAAA,IAAeA,KAAA,YAAiBc,IAAA;EACrDf,SAAA,EAAYC,KAAA,KAAgB;IAAEe,KAAA,EAAOf,KAAA,CAAMgB,WAAA;EAAA;EAC3CH,cAAA,EAAiBb,KAAA,IAAeiB,aAAA,CAAcjB,KAAK,KAAKA,KAAA,CAAMe,KAAA;EAC9DJ,KAAA,EAAQX,KAAA,IAAe,IAAIc,IAAA,CAAKd,KAAA,CAAMe,KAAK;AAC7C,GACA;EAAA;EAEEL,kBAAA,EAAqBV,KAAA,IAAeA,KAAA,KAAU;EAC9CD,SAAA,EAAWA,CAAA,MAAO;IAAEmB,UAAA,EAAY;EAAA;EAChCL,cAAA,EAAiBb,KAAA,IACfiB,aAAA,CAAcjB,KAAK,KAAKA,KAAA,CAAMkB,UAAA,KAAe;EAC/CP,KAAA,EAAOA,CAAA,KAAM;AACf,EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}