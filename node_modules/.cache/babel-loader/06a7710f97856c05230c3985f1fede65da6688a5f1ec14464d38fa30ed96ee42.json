{"ast":null,"code":"import React__default from \"react\";\nconst getItem = key => {\n  try {\n    const itemValue = localStorage.getItem(key);\n    if (typeof itemValue === \"string\") {\n      return JSON.parse(itemValue);\n    }\n    return void 0;\n  } catch {\n    return void 0;\n  }\n};\nfunction useLocalStorage(key, defaultValue) {\n  const [value, setValue] = React__default.useState();\n  React__default.useEffect(() => {\n    const initialValue = getItem(key);\n    if (typeof initialValue === \"undefined\" || initialValue === null) {\n      setValue(typeof defaultValue === \"function\" ? defaultValue() : defaultValue);\n    } else {\n      setValue(initialValue);\n    }\n  }, [defaultValue, key]);\n  const setter = React__default.useCallback(updater => {\n    setValue(old => {\n      let newVal = updater;\n      if (typeof updater == \"function\") {\n        newVal = updater(old);\n      }\n      try {\n        localStorage.setItem(key, JSON.stringify(newVal));\n      } catch {}\n      return newVal;\n    });\n  }, [key]);\n  return [value, setter];\n}\nexport { useLocalStorage as default };","map":{"version":3,"names":["getItem","key","itemValue","localStorage","JSON","parse","useLocalStorage","defaultValue","value","setValue","React__default","useState","useEffect","initialValue","setter","useCallback","updater","old","newVal","setItem","stringify"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/router-devtools/src/useLocalStorage.ts"],"sourcesContent":["import React from 'react'\n\nconst getItem = (key: string): unknown => {\n  try {\n    const itemValue = localStorage.getItem(key)\n    if (typeof itemValue === 'string') {\n      return JSON.parse(itemValue)\n    }\n    return undefined\n  } catch {\n    return undefined\n  }\n}\n\nexport default function useLocalStorage<T>(\n  key: string,\n  defaultValue: T | undefined,\n): [T | undefined, (newVal: T | ((prevVal: T) => T)) => void] {\n  const [value, setValue] = React.useState<T>()\n\n  React.useEffect(() => {\n    const initialValue = getItem(key) as T | undefined\n\n    if (typeof initialValue === 'undefined' || initialValue === null) {\n      setValue(\n        typeof defaultValue === 'function' ? defaultValue() : defaultValue,\n      )\n    } else {\n      setValue(initialValue)\n    }\n  }, [defaultValue, key])\n\n  const setter = React.useCallback(\n    (updater: any) => {\n      setValue((old) => {\n        let newVal = updater\n\n        if (typeof updater == 'function') {\n          newVal = updater(old)\n        }\n        try {\n          localStorage.setItem(key, JSON.stringify(newVal))\n        } catch {}\n\n        return newVal\n      })\n    },\n    [key],\n  )\n\n  return [value, setter]\n}\n"],"mappings":";AAEA,MAAMA,OAAA,GAAWC,GAAA,IAAyB;EACpC;IACI,MAAAC,SAAA,GAAYC,YAAA,CAAaH,OAAA,CAAQC,GAAG;IACtC,WAAOC,SAAA,KAAc,UAAU;MAC1B,OAAAE,IAAA,CAAKC,KAAA,CAAMH,SAAS;IAC7B;IACO;EAAA,QACD;IACC;EACT;AACF;AAEwB,SAAAI,gBACtBL,GAAA,EACAM,YAAA,EAC4D;EAC5D,MAAM,CAACC,KAAA,EAAOC,QAAQ,IAAIC,cAAA,CAAMC,QAAA,CAAY;EAE5CD,cAAA,CAAME,SAAA,CAAU,MAAM;IACd,MAAAC,YAAA,GAAeb,OAAA,CAAQC,GAAG;IAEhC,IAAI,OAAOY,YAAA,KAAiB,eAAeA,YAAA,KAAiB,MAAM;MAChEJ,QAAA,CACE,OAAOF,YAAA,KAAiB,aAAaA,YAAA,KAAiBA,YAAA;IACxD,OACK;MACLE,QAAA,CAASI,YAAY;IACvB;EAAA,GACC,CAACN,YAAA,EAAcN,GAAG,CAAC;EAEtB,MAAMa,MAAA,GAASJ,cAAA,CAAMK,WAAA,CAClBC,OAAA,IAAiB;IAChBP,QAAA,CAAUQ,GAAA,IAAQ;MAChB,IAAIC,MAAA,GAASF,OAAA;MAET,WAAOA,OAAA,IAAW,YAAY;QAChCE,MAAA,GAASF,OAAA,CAAQC,GAAG;MACtB;MACI;QACFd,YAAA,CAAagB,OAAA,CAAQlB,GAAA,EAAKG,IAAA,CAAKgB,SAAA,CAAUF,MAAM,CAAC;MAAA,QAC1C,CAAC;MAEF,OAAAA,MAAA;IAAA,CACR;EACH,GACA,CAACjB,GAAG;EAGC,QAACO,KAAA,EAAOM,MAAM;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}