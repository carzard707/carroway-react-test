{"ast":null,"code":"import { defaultSerializeError } from \"./router.js\";\nfunction defer(_promise, options) {\n  const promise = _promise;\n  if (!promise.status) {\n    Object.assign(promise, {\n      status: \"pending\"\n    });\n    promise.then(data => {\n      promise.status = \"success\";\n      promise.data = data;\n    }).catch(error => {\n      promise.status = \"error\";\n      promise.error = {\n        data: ((options == null ? void 0 : options.serializeError) ?? defaultSerializeError)(error),\n        __isServerError: true\n      };\n    });\n  }\n  return promise;\n}\nexport { defer };","map":{"version":3,"names":["defer","_promise","options","promise","status","Object","assign","then","data","catch","error","serializeError","defaultSerializeError","__isServerError"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/node_modules/@tanstack/react-router/src/defer.ts"],"sourcesContent":["import { defaultSerializeError } from './router'\n\nexport type DeferredPromiseState<T> = {\n  uid: string\n  resolve?: () => void\n  reject?: () => void\n} & (\n  | {\n      status: 'pending'\n      data?: T\n      error?: unknown\n    }\n  | {\n      status: 'success'\n      data: T\n    }\n  | {\n      status: 'error'\n      data?: T\n      error: unknown\n    }\n)\n\nexport type DeferredPromise<T> = Promise<T> & DeferredPromiseState<T>\n\nexport function defer<T>(\n  _promise: Promise<T>,\n  options?: {\n    serializeError?: typeof defaultSerializeError\n  },\n) {\n  const promise = _promise as DeferredPromise<T>\n\n  if (!(promise as any).status) {\n    Object.assign(promise, {\n      status: 'pending',\n    })\n\n    promise\n      .then((data) => {\n        promise.status = 'success' as any\n        promise.data = data\n      })\n      .catch((error) => {\n        promise.status = 'error' as any\n        ;(promise as any).error = {\n          data: (options?.serializeError ?? defaultSerializeError)(error),\n          __isServerError: true,\n        }\n      })\n  }\n\n  return promise\n}\n"],"mappings":";AAyBgB,SAAAA,MACdC,QAAA,EACAC,OAAA,EAGA;EACA,MAAMC,OAAA,GAAUF,QAAA;EAEZ,KAAEE,OAAA,CAAgBC,MAAA,EAAQ;IAC5BC,MAAA,CAAOC,MAAA,CAAOH,OAAA,EAAS;MACrBC,MAAA,EAAQ;IAAA,CACT;IAGED,OAAA,CAAAI,IAAA,CAAMC,IAAA,IAAS;MACdL,OAAA,CAAQC,MAAA,GAAS;MACjBD,OAAA,CAAQK,IAAA,GAAOA,IAAA;IAAA,CAChB,EACAC,KAAA,CAAOC,KAAA,IAAU;MAChBP,OAAA,CAAQC,MAAA,GAAS;MACfD,OAAA,CAAgBO,KAAA,GAAQ;QACxBF,IAAA,IAAON,OAAA,oBAAAA,OAAA,CAASS,cAAA,KAAkBC,qBAAA,EAAuBF,KAAK;QAC9DG,eAAA,EAAiB;MAAA;IACnB,CACD;EACL;EAEO,OAAAV,OAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}