{"ast":null,"code":"class Store {\n  constructor(initialState, options) {\n    this.listeners = /* @__PURE__ */new Set();\n    this._batching = false;\n    this._flushing = 0;\n    this.subscribe = listener => {\n      var _a, _b;\n      this.listeners.add(listener);\n      const unsub = (_b = (_a = this.options) == null ? void 0 : _a.onSubscribe) == null ? void 0 : _b.call(_a, listener, this);\n      return () => {\n        this.listeners.delete(listener);\n        unsub == null ? void 0 : unsub();\n      };\n    };\n    this.setState = updater => {\n      var _a, _b, _c;\n      const previous = this.state;\n      this.state = ((_a = this.options) == null ? void 0 : _a.updateFn) ? this.options.updateFn(previous)(updater) : updater(previous);\n      (_c = (_b = this.options) == null ? void 0 : _b.onUpdate) == null ? void 0 : _c.call(_b);\n      this._flush();\n    };\n    this._flush = () => {\n      if (this._batching) return;\n      const flushId = ++this._flushing;\n      this.listeners.forEach(listener => {\n        if (this._flushing !== flushId) return;\n        listener();\n      });\n    };\n    this.batch = cb => {\n      if (this._batching) return cb();\n      this._batching = true;\n      cb();\n      this._batching = false;\n      this._flush();\n    };\n    this.state = initialState;\n    this.options = options;\n  }\n}\nexport { Store };","map":{"version":3,"names":["Store","constructor","initialState","options","listeners","Set","_batching","_flushing","subscribe","listener","_a","_b","add","unsub","onSubscribe","call","delete","setState","updater","_c","previous","state","updateFn","onUpdate","_flush","flushId","forEach","batch","cb"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/store/src/index.ts"],"sourcesContent":["export type AnyUpdater = (...args: Array<any>) => any\n\nexport type Listener = () => void\n\nexport interface StoreOptions<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  updateFn?: (previous: TState) => (updater: TUpdater) => TState\n  onSubscribe?: (\n    listener: Listener,\n    store: Store<TState, TUpdater>,\n  ) => () => void\n  onUpdate?: () => void\n}\n\nexport class Store<\n  TState,\n  TUpdater extends AnyUpdater = (cb: TState) => TState,\n> {\n  listeners = new Set<Listener>()\n  state: TState\n  options?: StoreOptions<TState, TUpdater>\n  _batching = false\n  _flushing = 0\n\n  constructor(initialState: TState, options?: StoreOptions<TState, TUpdater>) {\n    this.state = initialState\n    this.options = options\n  }\n\n  subscribe = (listener: Listener) => {\n    this.listeners.add(listener)\n    const unsub = this.options?.onSubscribe?.(listener, this)\n    return () => {\n      this.listeners.delete(listener)\n      unsub?.()\n    }\n  }\n\n  setState = (updater: TUpdater) => {\n    const previous = this.state\n    this.state = this.options?.updateFn\n      ? this.options.updateFn(previous)(updater)\n      : (updater as any)(previous)\n\n    // Always run onUpdate, regardless of batching\n    this.options?.onUpdate?.()\n\n    // Attempt to flush\n    this._flush()\n  }\n\n  _flush = () => {\n    if (this._batching) return\n    const flushId = ++this._flushing\n    this.listeners.forEach((listener) => {\n      if (this._flushing !== flushId) return\n      listener()\n    })\n  }\n\n  batch = (cb: () => void) => {\n    if (this._batching) return cb()\n    this._batching = true\n    cb()\n    this._batching = false\n    this._flush()\n  }\n}\n"],"mappings":"AAgBO,MAAMA,KAAA,CAGX;EAOAC,YAAYC,YAAA,EAAsBC,OAAA,EAA0C;IAN5E,KAAAC,SAAA,sBAAgBC,GAAA;IAGJ,KAAAC,SAAA;IACA,KAAAC,SAAA;IAOZ,KAAAC,SAAA,GAAaC,QAAA,IAAuB;MAf/B,IAAAC,EAAA,EAAAC,EAAA;MAgBE,KAAAP,SAAA,CAAUQ,GAAA,CAAIH,QAAQ;MAC3B,MAAMI,KAAA,IAAQF,EAAA,IAAAD,EAAA,QAAKP,OAAA,KAAL,gBAAAO,EAAA,CAAcI,WAAA,KAAd,gBAAAH,EAAA,CAAAI,IAAA,CAAAL,EAAA,EAA4BD,QAAA,EAAU;MACpD,OAAO,MAAM;QACN,KAAAL,SAAA,CAAUY,MAAA,CAAOP,QAAQ;QACtBI,KAAA,oBAAAA,KAAA;MAAA;IACV;IAGF,KAAAI,QAAA,GAAYC,OAAA,IAAsB;MAxB7B,IAAAR,EAAA,EAAAC,EAAA,EAAAQ,EAAA;MAyBH,MAAMC,QAAA,GAAW,KAAKC,KAAA;MACtB,KAAKA,KAAA,KAAQX,EAAA,QAAKP,OAAA,KAAL,gBAAAO,EAAA,CAAcY,QAAA,IACvB,KAAKnB,OAAA,CAAQmB,QAAA,CAASF,QAAQ,EAAEF,OAAO,IACtCA,OAAA,CAAgBE,QAAQ;MAG7B,CAAAD,EAAA,IAAAR,EAAA,QAAKR,OAAA,KAAL,gBAAAQ,EAAA,CAAcY,QAAA,KAAd,gBAAAJ,EAAA,CAAAJ,IAAA,CAAAJ,EAAA;MAGA,KAAKa,MAAA,CAAO;IAAA;IAGd,KAAAA,MAAA,GAAS,MAAM;MACb,IAAI,KAAKlB,SAAA,EAAW;MACd,MAAAmB,OAAA,GAAU,EAAE,KAAKlB,SAAA;MAClB,KAAAH,SAAA,CAAUsB,OAAA,CAASjB,QAAA,IAAa;QAC/B,SAAKF,SAAA,KAAckB,OAAA,EAAS;QACvBhB,QAAA;MAAA,CACV;IAAA;IAGH,KAAAkB,KAAA,GAASC,EAAA,IAAmB;MACtB,SAAKtB,SAAA,EAAW,OAAOsB,EAAA;MAC3B,KAAKtB,SAAA,GAAY;MACdsB,EAAA;MACH,KAAKtB,SAAA,GAAY;MACjB,KAAKkB,MAAA,CAAO;IAAA;IAxCZ,KAAKH,KAAA,GAAQnB,YAAA;IACb,KAAKC,OAAA,GAAUA,OAAA;EACjB;AAwCF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}