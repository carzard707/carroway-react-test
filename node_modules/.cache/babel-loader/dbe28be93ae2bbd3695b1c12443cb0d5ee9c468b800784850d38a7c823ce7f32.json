{"ast":null,"code":"function redirect(opts) {\n  opts.isRedirect = true;\n  opts.statusCode = opts.statusCode || opts.code || 307;\n  opts.headers = opts.headers || {};\n  if (opts.throw) {\n    throw opts;\n  }\n  return opts;\n}\nfunction isRedirect(obj) {\n  return !!(obj == null ? void 0 : obj.isRedirect);\n}\nfunction isResolvedRedirect(obj) {\n  return !!(obj == null ? void 0 : obj.isRedirect) && obj.href;\n}\nexport { isRedirect, isResolvedRedirect, redirect };","map":{"version":3,"names":["redirect","opts","isRedirect","statusCode","code","headers","throw","obj","isResolvedRedirect","href"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/react-router/src/redirects.ts"],"sourcesContent":["import type { NavigateOptions } from './link'\nimport type { RoutePaths } from './routeInfo'\nimport type { AnyRouter, RegisteredRouter } from './router'\nimport type { PickAsRequired } from './utils'\n\nexport type AnyRedirect = Redirect<any, any, any, any, any>\n\nexport type Redirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> = TFrom,\n  TMaskTo extends string = '',\n> = {\n  /**\n   * @deprecated Use `statusCode` instead\n   **/\n  href?: string\n  code?: number\n  statusCode?: number\n  throw?: any\n  headers?: HeadersInit\n} & NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>\n\nexport type ResolvedRedirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> = '/',\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> = TFrom,\n  TMaskTo extends string = '',\n> = PickAsRequired<\n  Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n  'code' | 'statusCode' | 'headers'\n> & {\n  href: string\n}\n\nexport function redirect<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = string,\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '',\n>(\n  opts: Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>,\n): Redirect<TRouter, TFrom, TTo, TMaskFrom, TMaskTo> {\n  ;(opts as any).isRedirect = true\n  opts.statusCode = opts.statusCode || opts.code || 307\n  opts.headers = opts.headers || {}\n  if (opts.throw) {\n    throw opts\n  }\n\n  return opts\n}\n\nexport function isRedirect(obj: any): obj is AnyRedirect {\n  return !!obj?.isRedirect\n}\n\nexport function isResolvedRedirect(obj: any): obj is ResolvedRedirect {\n  return !!obj?.isRedirect && obj.href\n}\n"],"mappings":"AAqCO,SAASA,SAOdC,IAAA,EACmD;EACjDA,IAAA,CAAaC,UAAA,GAAa;EAC5BD,IAAA,CAAKE,UAAA,GAAaF,IAAA,CAAKE,UAAA,IAAcF,IAAA,CAAKG,IAAA,IAAQ;EAC7CH,IAAA,CAAAI,OAAA,GAAUJ,IAAA,CAAKI,OAAA,IAAW;EAC/B,IAAIJ,IAAA,CAAKK,KAAA,EAAO;IACR,MAAAL,IAAA;EACR;EAEO,OAAAA,IAAA;AACT;AAEO,SAASC,WAAWK,GAAA,EAA8B;EAChD,QAAC,EAACA,GAAA,oBAAAA,GAAA,CAAKL,UAAA;AAChB;AAEO,SAASM,mBAAmBD,GAAA,EAAmC;EACpE,OAAO,CAAC,EAACA,GAAA,oBAAAA,GAAA,CAAKL,UAAA,KAAcK,GAAA,CAAIE,IAAA;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}