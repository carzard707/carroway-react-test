{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { CatchBoundary } from \"./CatchBoundary.js\";\nimport { useRouterState } from \"./useRouterState.js\";\nfunction notFound(options = {}) {\n  options.isNotFound = true;\n  if (options.throw) throw options;\n  return options;\n}\nfunction isNotFound(obj) {\n  return !!(obj == null ? void 0 : obj.isNotFound);\n}\nfunction CatchNotFound(props) {\n  const resetKey = useRouterState({\n    select: s => `not-found-${s.location.pathname}-${s.status}`\n  });\n  return /* @__PURE__ */jsx(CatchBoundary, {\n    getResetKey: () => resetKey,\n    onCatch: (error, errorInfo) => {\n      var _a;\n      if (isNotFound(error)) {\n        (_a = props.onCatch) == null ? void 0 : _a.call(props, error, errorInfo);\n      } else {\n        throw error;\n      }\n    },\n    errorComponent: ({\n      error\n    }) => {\n      var _a;\n      return (_a = props.fallback) == null ? void 0 : _a.call(props, error);\n    },\n    children: props.children\n  });\n}\nfunction DefaultGlobalNotFound() {\n  return /* @__PURE__ */jsx(\"p\", {\n    children: \"Not Found\"\n  });\n}\nexport { CatchNotFound, DefaultGlobalNotFound, isNotFound, notFound };","map":{"version":3,"names":["notFound","options","isNotFound","throw","obj","CatchNotFound","props","resetKey","useRouterState","select","s","location","pathname","status","jsx","CatchBoundary","getResetKey","onCatch","error","errorInfo","_a","call","errorComponent","fallback","children","DefaultGlobalNotFound"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react/node_modules/@tanstack/react-router/src/not-found.tsx"],"sourcesContent":["import * as React from 'react'\nimport { CatchBoundary } from './CatchBoundary'\nimport { useRouterState } from './useRouterState'\nimport type { ErrorInfo } from 'react'\nimport type { RegisteredRouter } from './router'\nimport type { RouteIds } from './routeInfo'\n\nexport type NotFoundError = {\n  /**\n    @deprecated\n    Use `routeId: rootRouteId` instead\n  */\n  global?: boolean\n  /**\n    @private\n    Do not use this. It's used internally to indicate a path matching error\n  */\n  _global?: boolean\n  data?: any\n  throw?: boolean\n  routeId?: RouteIds<RegisteredRouter['routeTree']>\n  headers?: HeadersInit\n}\n\nexport function notFound(options: NotFoundError = {}) {\n  ;(options as any).isNotFound = true\n  if (options.throw) throw options\n  return options\n}\n\nexport function isNotFound(obj: any): obj is NotFoundError {\n  return !!obj?.isNotFound\n}\n\nexport function CatchNotFound(props: {\n  fallback?: (error: NotFoundError) => React.ReactElement\n  onCatch?: (error: Error, errorInfo: ErrorInfo) => void\n  children: React.ReactNode\n}) {\n  // TODO: Some way for the user to programmatically reset the not-found boundary?\n  const resetKey = useRouterState({\n    select: (s) => `not-found-${s.location.pathname}-${s.status}`,\n  })\n\n  return (\n    <CatchBoundary\n      getResetKey={() => resetKey}\n      onCatch={(error, errorInfo) => {\n        if (isNotFound(error)) {\n          props.onCatch?.(error, errorInfo)\n        } else {\n          throw error\n        }\n      }}\n      errorComponent={({ error }: { error: NotFoundError }) =>\n        props.fallback?.(error)\n      }\n    >\n      {props.children}\n    </CatchBoundary>\n  )\n}\n\nexport function DefaultGlobalNotFound() {\n  return <p>Not Found</p>\n}\n"],"mappings":";;;AAwBgB,SAAAA,SAASC,OAAA,GAAyB,IAAI;EAClDA,OAAA,CAAgBC,UAAA,GAAa;EAC3B,IAAAD,OAAA,CAAQE,KAAA,EAAa,MAAAF,OAAA;EAClB,OAAAA,OAAA;AACT;AAEO,SAASC,WAAWE,GAAA,EAAgC;EAClD,QAAC,EAACA,GAAA,oBAAAA,GAAA,CAAKF,UAAA;AAChB;AAEO,SAASG,cAAcC,KAAA,EAI3B;EAED,MAAMC,QAAA,GAAWC,cAAA,CAAe;IAC9BC,MAAA,EAASC,CAAA,IAAM,aAAaA,CAAA,CAAEC,QAAA,CAASC,QAAQ,IAAIF,CAAA,CAAEG,MAAM;EAAA,CAC5D;EAGC,sBAAAC,GAAA,CAACC,aAAA;IACCC,WAAA,EAAaA,CAAA,KAAMT,QAAA;IACnBU,OAAA,EAASA,CAACC,KAAA,EAAOC,SAAA,KAAc;;MACzB,IAAAjB,UAAA,CAAWgB,KAAK,GAAG;QACf,CAAAE,EAAA,GAAAd,KAAA,CAAAW,OAAA,qBAAAG,EAAA,CAAAC,IAAA,CAAAf,KAAA,EAAUY,KAAA,EAAOC,SAAA;MAAS,OAC3B;QACC,MAAAD,KAAA;MACR;IACF;IACAI,cAAA,EAAgBA,CAAC;MAAEJ;IAAA,MACjB;;MAAA,QAAAE,EAAA,GAAAd,KAAA,CAAMiB,QAAA,KAAN,gBAAAH,EAAA,CAAAC,IAAA,CAAAf,KAAA,EAAiBY,KAAA;IAAA;IAGlBM,QAAA,EAAMlB,KAAA,CAAAkB;EAAA;AAGb;AAEO,SAASC,sBAAA,EAAwB;EAC/B,sBAAAX,GAAA,CAAC;IAAEU,QAAA,EAAS;EAAA;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}