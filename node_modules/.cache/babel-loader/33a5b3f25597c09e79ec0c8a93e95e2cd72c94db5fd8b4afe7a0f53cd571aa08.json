{"ast":null,"code":"import React__default from \"react\";\nconst isServer = typeof window === \"undefined\";\nfunction getStatusColor(match) {\n  const colorMap = {\n    pending: \"yellow\",\n    success: \"green\",\n    error: \"red\",\n    notFound: \"purple\",\n    redirected: \"gray\"\n  };\n  return match.isFetching && match.status === \"success\" ? match.isFetching === \"beforeLoad\" ? \"purple\" : \"blue\" : colorMap[match.status];\n}\nfunction getRouteStatusColor(matches, route) {\n  const found = matches.find(d => d.routeId === route.id);\n  if (!found) return \"gray\";\n  return getStatusColor(found);\n}\nfunction useIsMounted() {\n  const mountedRef = React__default.useRef(false);\n  const isMounted = React__default.useCallback(() => mountedRef.current, []);\n  React__default[isServer ? \"useEffect\" : \"useLayoutEffect\"](() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  return isMounted;\n}\nconst displayValue = value => {\n  const name = Object.getOwnPropertyNames(Object(value));\n  const newValue = typeof value === \"bigint\" ? `${value.toString()}n` : value;\n  try {\n    return JSON.stringify(newValue, name);\n  } catch (e) {\n    return `unable to stringify`;\n  }\n};\nfunction useSafeState(initialState) {\n  const isMounted = useIsMounted();\n  const [state, setState] = React__default.useState(initialState);\n  const safeSetState = React__default.useCallback(value => {\n    scheduleMicrotask(() => {\n      if (isMounted()) {\n        setState(value);\n      }\n    });\n  }, [isMounted]);\n  return [state, safeSetState];\n}\nfunction scheduleMicrotask(callback) {\n  Promise.resolve().then(callback).catch(error => setTimeout(() => {\n    throw error;\n  }));\n}\nfunction multiSortBy(arr, accessors = [d => d]) {\n  return arr.map((d, i) => [d, i]).sort(([a, ai], [b, bi]) => {\n    for (const accessor of accessors) {\n      const ao = accessor(a);\n      const bo = accessor(b);\n      if (typeof ao === \"undefined\") {\n        if (typeof bo === \"undefined\") {\n          continue;\n        }\n        return 1;\n      }\n      if (ao === bo) {\n        continue;\n      }\n      return ao > bo ? 1 : -1;\n    }\n    return ai - bi;\n  }).map(([d]) => d);\n}\nexport { displayValue, getRouteStatusColor, getStatusColor, isServer, multiSortBy, useIsMounted, useSafeState };","map":{"version":3,"names":["isServer","window","getStatusColor","match","colorMap","pending","success","error","notFound","redirected","isFetching","status","getRouteStatusColor","matches","route","found","find","d","routeId","id","useIsMounted","mountedRef","React__default","useRef","isMounted","useCallback","current","displayValue","value","name","Object","getOwnPropertyNames","newValue","toString","JSON","stringify","e","useSafeState","initialState","state","setState","useState","safeSetState","scheduleMicrotask","callback","Promise","resolve","then","catch","setTimeout","multiSortBy","arr","accessors","map","i","sort","a","ai","b","bi","accessor","ao","bo"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/router-devtools/src/utils.ts"],"sourcesContent":["import React from 'react'\nimport { useTheme } from './theme'\nimport useMediaQuery from './useMediaQuery'\nimport type {\n  AnyRootRoute,\n  AnyRoute,\n  AnyRouteMatch,\n} from '@tanstack/react-router'\n\nimport type { Theme } from './theme'\n\nexport const isServer = typeof window === 'undefined'\n\ntype StyledComponent<T> = T extends 'button'\n  ? React.DetailedHTMLProps<\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\n      HTMLButtonElement\n    >\n  : T extends 'input'\n    ? React.DetailedHTMLProps<\n        React.InputHTMLAttributes<HTMLInputElement>,\n        HTMLInputElement\n      >\n    : T extends 'select'\n      ? React.DetailedHTMLProps<\n          React.SelectHTMLAttributes<HTMLSelectElement>,\n          HTMLSelectElement\n        >\n      : T extends keyof HTMLElementTagNameMap\n        ? React.HTMLAttributes<HTMLElementTagNameMap[T]>\n        : never\n\nexport function getStatusColor(match: AnyRouteMatch) {\n  const colorMap = {\n    pending: 'yellow',\n    success: 'green',\n    error: 'red',\n    notFound: 'purple',\n    redirected: 'gray',\n  } as const\n\n  return match.isFetching && match.status === 'success'\n    ? match.isFetching === 'beforeLoad'\n      ? 'purple'\n      : 'blue'\n    : colorMap[match.status]\n}\n\nexport function getRouteStatusColor(\n  matches: Array<AnyRouteMatch>,\n  route: AnyRoute | AnyRootRoute,\n) {\n  const found = matches.find((d) => d.routeId === route.id)\n  if (!found) return 'gray'\n  return getStatusColor(found)\n}\n\ntype Styles =\n  | React.CSSProperties\n  | ((props: Record<string, any>, theme: Theme) => React.CSSProperties)\n\nexport function styled<T extends keyof HTMLElementTagNameMap>(\n  type: T,\n  newStyles: Styles,\n  queries: Record<string, Styles> = {},\n) {\n  return React.forwardRef<HTMLElementTagNameMap[T], StyledComponent<T>>(\n    ({ style, ...rest }, ref) => {\n      const theme = useTheme()\n\n      const mediaStyles = Object.entries(queries).reduce(\n        (current, [key, value]) => {\n          // eslint-disable-next-line react-hooks/rules-of-hooks\n          return useMediaQuery(key)\n            ? {\n                ...current,\n                ...(typeof value === 'function' ? value(rest, theme) : value),\n              }\n            : current\n        },\n        {},\n      )\n\n      return React.createElement(type, {\n        ...rest,\n        style: {\n          ...(typeof newStyles === 'function'\n            ? newStyles(rest, theme)\n            : newStyles),\n          ...style,\n          ...mediaStyles,\n        },\n        ref,\n      })\n    },\n  )\n}\n\nexport function useIsMounted() {\n  const mountedRef = React.useRef(false)\n  const isMounted = React.useCallback(() => mountedRef.current, [])\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mountedRef.current = true\n    return () => {\n      mountedRef.current = false\n    }\n  }, [])\n\n  return isMounted\n}\n\n/**\n * Displays a string regardless the type of the data\n * @param {unknown} value Value to be stringified\n */\nexport const displayValue = (value: unknown) => {\n  const name = Object.getOwnPropertyNames(Object(value))\n  const newValue = typeof value === 'bigint' ? `${value.toString()}n` : value\n  try {\n    return JSON.stringify(newValue, name)\n  } catch (e) {\n    return `unable to stringify`\n  }\n}\n\n/**\n * This hook is a safe useState version which schedules state updates in microtasks\n * to prevent updating a component state while React is rendering different components\n * or when the component is not mounted anymore.\n */\nexport function useSafeState<T>(initialState: T): [T, (value: T) => void] {\n  const isMounted = useIsMounted()\n  const [state, setState] = React.useState(initialState)\n\n  const safeSetState = React.useCallback(\n    (value: T) => {\n      scheduleMicrotask(() => {\n        if (isMounted()) {\n          setState(value)\n        }\n      })\n    },\n    [isMounted],\n  )\n\n  return [state, safeSetState]\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nfunction scheduleMicrotask(callback: () => void) {\n  Promise.resolve()\n    .then(callback)\n    .catch((error) =>\n      setTimeout(() => {\n        throw error\n      }),\n    )\n}\n\nexport function multiSortBy<T>(\n  arr: Array<T>,\n  accessors: Array<(item: T) => any> = [(d) => d],\n): Array<T> {\n  return arr\n    .map((d, i) => [d, i] as const)\n    .sort(([a, ai], [b, bi]) => {\n      for (const accessor of accessors) {\n        const ao = accessor(a)\n        const bo = accessor(b)\n\n        if (typeof ao === 'undefined') {\n          if (typeof bo === 'undefined') {\n            continue\n          }\n          return 1\n        }\n\n        if (ao === bo) {\n          continue\n        }\n\n        return ao > bo ? 1 : -1\n      }\n\n      return ai - bi\n    })\n    .map(([d]) => d)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}