{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useLoaderData(opts) {\n  return useMatch({\n    ...opts,\n    select: s => {\n      return typeof opts.select === \"function\" ? opts.select(s.loaderData) : s.loaderData;\n    }\n  });\n}\nexport { useLoaderData };","map":{"version":3,"names":["useLoaderData","opts","useMatch","select","s","loaderData"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/react-router/src/useLoaderData.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { RegisteredRouter } from './router'\nimport type { AnyRoute } from './route'\nimport type { MakeRouteMatch } from './Matches'\nimport type { RouteIds } from './routeInfo'\nimport type { StrictOrFrom } from './utils'\n\nexport type UseLoaderDataOptions<\n  TRouteTree extends AnyRoute,\n  TFrom,\n  TStrict extends boolean,\n  TRouteMatch extends MakeRouteMatch<TRouteTree, TFrom, TStrict>,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (match: Required<TRouteMatch>['loaderData']) => TSelected\n}\n\nexport function useLoaderData<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteMatch extends MakeRouteMatch<\n    TRouteTree,\n    TFrom,\n    TStrict\n  > = MakeRouteMatch<TRouteTree, TFrom, TStrict>,\n  TSelected = Required<TRouteMatch>['loaderData'],\n>(\n  opts: UseLoaderDataOptions<\n    TRouteTree,\n    TFrom,\n    TStrict,\n    TRouteMatch,\n    TSelected\n  >,\n): TSelected {\n  return useMatch<TRouteTree, TFrom, TStrict, TRouteMatch, TSelected>({\n    ...opts,\n    select: (s) => {\n      return typeof opts.select === 'function'\n        ? opts.select(s.loaderData)\n        : (s.loaderData as TSelected)\n    },\n  })\n}\n"],"mappings":";AAiBO,SAASA,cAWdC,IAAA,EAOW;EACX,OAAOC,QAAA,CAA6D;IAClE,GAAGD,IAAA;IACHE,MAAA,EAASC,CAAA,IAAM;MACN,cAAOH,IAAA,CAAKE,MAAA,KAAW,aAC1BF,IAAA,CAAKE,MAAA,CAAOC,CAAA,CAAEC,UAAU,IACvBD,CAAA,CAAEC,UAAA;IACT;EAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}