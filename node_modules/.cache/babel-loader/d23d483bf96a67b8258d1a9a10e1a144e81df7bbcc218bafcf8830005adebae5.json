{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useRouteContext(opts) {\n  return useMatch({\n    ...opts,\n    select: match => opts.select ? opts.select(match.context) : match.context\n  });\n}\nexport { useRouteContext };","map":{"version":3,"names":["useRouteContext","opts","useMatch","select","match","context"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/react-router/src/useRouteContext.ts"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { MakeRouteMatch } from './Matches'\nimport type { AnyRoute } from './route'\nimport type { AllContext, RouteById, RouteIds } from './routeInfo'\nimport type { RegisteredRouter } from './router'\nimport type { Expand, StrictOrFrom } from './utils'\n\nexport type UseRouteContextOptions<\n  TFrom,\n  TStrict extends boolean,\n  TRouteContext,\n  TSelected,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (search: TRouteContext) => TSelected\n}\n\nexport function useRouteContext<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteContext = TStrict extends false\n    ? AllContext<TRouteTree>\n    : Expand<RouteById<TRouteTree, TFrom>['types']['allContext']>,\n  TSelected = TRouteContext,\n>(\n  opts: UseRouteContextOptions<TFrom, TStrict, TRouteContext, TSelected>,\n): TSelected {\n  return useMatch({\n    ...(opts as any),\n    select: (match: MakeRouteMatch<TRouteTree, TFrom>) =>\n      opts.select ? opts.select(match.context) : match.context,\n  })\n}\n"],"mappings":";AAgBO,SAASA,gBASdC,IAAA,EACW;EACX,OAAOC,QAAA,CAAS;IACd,GAAID,IAAA;IACJE,MAAA,EAASC,KAAA,IACPH,IAAA,CAAKE,MAAA,GAASF,IAAA,CAAKE,MAAA,CAAOC,KAAA,CAAMC,OAAO,IAAID,KAAA,CAAMC;EAAA,CACpD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}