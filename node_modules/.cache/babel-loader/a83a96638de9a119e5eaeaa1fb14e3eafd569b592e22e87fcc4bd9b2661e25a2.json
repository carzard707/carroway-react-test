{"ast":null,"code":"import * as React from \"react\";\nimport { useRouter } from \"./useRouter.js\";\nfunction useNavigate(_defaultOpts) {\n  const {\n    navigate\n  } = useRouter();\n  return React.useCallback(options => {\n    return navigate({\n      ...options\n    });\n  }, [navigate]);\n}\nfunction Navigate(props) {\n  const {\n    navigate\n  } = useRouter();\n  React.useEffect(() => {\n    navigate({\n      ...props\n    });\n  }, []);\n  return null;\n}\nexport { Navigate, useNavigate };","map":{"version":3,"names":["useNavigate","_defaultOpts","navigate","useRouter","React","useCallback","options","Navigate","props","useEffect"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/carroway-react-test/node_modules/@tanstack/react-router/src/useNavigate.tsx"],"sourcesContent":["import * as React from 'react'\nimport { useRouter } from './useRouter'\nimport type { FromPathOption, NavigateOptions } from './link'\nimport type { RoutePaths } from './routeInfo'\nimport type { AnyRouter, RegisteredRouter } from './router'\n\nexport type UseNavigateResult<TDefaultFrom extends string> = <\n  TTo extends string,\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = TDefaultFrom,\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '',\n>({\n  from,\n  ...rest\n}: NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>) => Promise<void>\n\nexport function useNavigate<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TDefaultFrom extends string = string,\n>(_defaultOpts?: {\n  from?: FromPathOption<TRouter, TDefaultFrom>\n}): UseNavigateResult<TDefaultFrom> {\n  const { navigate } = useRouter()\n\n  return React.useCallback(\n    (options: NavigateOptions) => {\n      return navigate({\n        ...options,\n      })\n    },\n    [navigate],\n  ) as UseNavigateResult<TDefaultFrom>\n}\n\n// NOTE: I don't know of anyone using this. It's undocumented, so let's wait until someone needs it\n// export function typedNavigate<\n//   TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n//   TDefaultFrom extends RoutePaths<TRouteTree> = '/',\n// >(navigate: (opts: NavigateOptions<any>) => Promise<void>) {\n//   return navigate as <\n//     TFrom extends RoutePaths<TRouteTree> = TDefaultFrom,\n//     TTo extends string = '',\n//     TMaskFrom extends RoutePaths<TRouteTree> = '/',\n//     TMaskTo extends string = '',\n//   >(\n//     opts?: NavigateOptions<TRouteTree, TFrom, TTo, TMaskFrom, TMaskTo>,\n//   ) => Promise<void>\n// } //\n\nexport function Navigate<\n  TRouter extends AnyRouter = RegisteredRouter,\n  TFrom extends RoutePaths<TRouter['routeTree']> | string = string,\n  TTo extends string = '',\n  TMaskFrom extends RoutePaths<TRouter['routeTree']> | string = TFrom,\n  TMaskTo extends string = '',\n>(props: NavigateOptions<TRouter, TFrom, TTo, TMaskFrom, TMaskTo>): null {\n  const { navigate } = useRouter()\n\n  React.useEffect(() => {\n    navigate({\n      ...props,\n    } as any)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return null\n}\n"],"mappings":";;AAiBO,SAASA,YAGdC,YAAA,EAEkC;EAC5B;IAAEC;EAAA,IAAaC,SAAA;EAErB,OAAOC,KAAA,CAAMC,WAAA,CACVC,OAAA,IAA6B;IAC5B,OAAOJ,QAAA,CAAS;MACd,GAAGI;IAAA,CACJ;EACH,GACA,CAACJ,QAAQ;AAEb;AAiBO,SAASK,SAMdC,KAAA,EAAuE;EACjE;IAAEN;EAAA,IAAaC,SAAA;EAErBC,KAAA,CAAMK,SAAA,CAAU,MAAM;IACXP,QAAA;MACP,GAAGM;IAAA,CACG;EAEV,GAAG,EAAE;EAEE;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}