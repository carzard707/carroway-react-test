{"ast":null,"code":"import invariant from \"tiny-invariant\";\nimport { useMatch } from \"./useMatch.js\";\nimport { useLoaderDeps } from \"./useLoaderDeps.js\";\nimport { useLoaderData } from \"./useLoaderData.js\";\nimport { trimPathLeft, joinPaths } from \"./path.js\";\nimport { useParams } from \"./useParams.js\";\nimport { useSearch } from \"./useSearch.js\";\nimport { notFound } from \"./not-found.js\";\nimport { useNavigate } from \"./useNavigate.js\";\nimport { rootRouteId } from \"./root.js\";\nfunction getRouteApi(id) {\n  return new RouteApi({\n    id\n  });\n}\nclass RouteApi {\n  /**\n   * @deprecated Use the `getRouteApi` function instead.\n   */\n  constructor({\n    id\n  }) {\n    this.useMatch = opts => {\n      return useMatch({\n        select: opts == null ? void 0 : opts.select,\n        from: this.id\n      });\n    };\n    this.useRouteContext = opts => {\n      return useMatch({\n        from: this.id,\n        select: d => (opts == null ? void 0 : opts.select) ? opts.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts => {\n      return useSearch({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useParams = opts => {\n      return useParams({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useLoaderDeps = opts => {\n      return useLoaderDeps({\n        ...opts,\n        from: this.id,\n        strict: false\n      });\n    };\n    this.useLoaderData = opts => {\n      return useLoaderData({\n        ...opts,\n        from: this.id,\n        strict: false\n      });\n    };\n    this.useNavigate = () => {\n      return useNavigate({\n        from: this.id\n      });\n    };\n    this.notFound = opts => {\n      return notFound({\n        routeId: this.id,\n        ...opts\n      });\n    };\n    this.id = id;\n  }\n}\nclass Route {\n  /**\n   * @deprecated Use the `createRoute` function instead.\n   */\n  constructor(options) {\n    this.init = opts => {\n      var _a, _b;\n      this.originalIndex = opts.originalIndex;\n      const options2 = this.options;\n      const isRoot = !(options2 == null ? void 0 : options2.path) && !(options2 == null ? void 0 : options2.id);\n      this.parentRoute = (_b = (_a = this.options).getParentRoute) == null ? void 0 : _b.call(_a);\n      if (isRoot) {\n        this.path = rootRouteId;\n      } else {\n        invariant(this.parentRoute, `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`);\n      }\n      let path = isRoot ? rootRouteId : options2.path;\n      if (path && path !== \"/\") {\n        path = trimPathLeft(path);\n      }\n      const customId = (options2 == null ? void 0 : options2.id) || path;\n      let id = isRoot ? rootRouteId : joinPaths([this.parentRoute.id === rootRouteId ? \"\" : this.parentRoute.id, customId]);\n      if (path === rootRouteId) {\n        path = \"/\";\n      }\n      if (id !== rootRouteId) {\n        id = joinPaths([\"/\", id]);\n      }\n      const fullPath = id === rootRouteId ? \"/\" : joinPaths([this.parentRoute.fullPath, path]);\n      this.path = path;\n      this.id = id;\n      this.fullPath = fullPath;\n      this.to = fullPath;\n    };\n    this.updateLoader = options2 => {\n      Object.assign(this.options, options2);\n      return this;\n    };\n    this.update = options2 => {\n      Object.assign(this.options, options2);\n      return this;\n    };\n    this.lazy = lazyFn => {\n      this.lazyFn = lazyFn;\n      return this;\n    };\n    this.useMatch = opts => {\n      return useMatch({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useRouteContext = opts => {\n      return useMatch({\n        ...opts,\n        from: this.id,\n        select: d => (opts == null ? void 0 : opts.select) ? opts.select(d.context) : d.context\n      });\n    };\n    this.useSearch = opts => {\n      return useSearch({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useParams = opts => {\n      return useParams({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useLoaderDeps = opts => {\n      return useLoaderDeps({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useLoaderData = opts => {\n      return useLoaderData({\n        ...opts,\n        from: this.id\n      });\n    };\n    this.useNavigate = () => {\n      return useNavigate({\n        from: this.id\n      });\n    };\n    this.options = options || {};\n    this.isRoot = !(options == null ? void 0 : options.getParentRoute);\n    invariant(!((options == null ? void 0 : options.id) && (options == null ? void 0 : options.path)), `Route cannot have both an 'id' and a 'path' option.`);\n    this.$$typeof = Symbol.for(\"react.memo\");\n  }\n  addChildren(children) {\n    this.children = Array.isArray(children) ? children : Object.values(children);\n    return this;\n  }\n}\nfunction createRoute(options) {\n  return new Route(options);\n}\nfunction createRootRouteWithContext() {\n  return options => {\n    return createRootRoute(options);\n  };\n}\nconst rootRouteWithContext = createRootRouteWithContext;\nclass RootRoute extends Route {\n  /**\n   * @deprecated `RootRoute` is now an internal implementation detail. Use `createRootRoute()` instead.\n   */\n  constructor(options) {\n    super(options);\n  }\n  addChildren(children) {\n    return super.addChildren(children);\n  }\n}\nfunction createRootRoute(options) {\n  return new RootRoute(options);\n}\nfunction createRouteMask(opts) {\n  return opts;\n}\nclass NotFoundRoute extends Route {\n  constructor(options) {\n    super({\n      ...options,\n      id: \"404\"\n    });\n  }\n}\nexport { NotFoundRoute, RootRoute, Route, RouteApi, createRootRoute, createRootRouteWithContext, createRoute, createRouteMask, getRouteApi, rootRouteWithContext };","map":{"version":3,"names":["getRouteApi","id","RouteApi","constructor","useMatch","opts","select","from","useRouteContext","d","context","useSearch","useParams","useLoaderDeps","strict","useLoaderData","useNavigate","notFound","routeId","Route","options","init","originalIndex","options2","isRoot","path","parentRoute","_b","_a","getParentRoute","call","rootRouteId","invariant","trimPathLeft","customId","joinPaths","fullPath","to","updateLoader","Object","assign","update","lazy","lazyFn","$$typeof","Symbol","for","addChildren","children","Array","isArray","values","createRoute","createRootRouteWithContext","createRootRoute","rootRouteWithContext","RootRoute","createRouteMask","NotFoundRoute"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react/node_modules/@tanstack/react-router/src/route.ts"],"sourcesContent":["import invariant from 'tiny-invariant'\nimport { useMatch } from './useMatch'\nimport { useLoaderDeps } from './useLoaderDeps'\nimport { useLoaderData } from './useLoaderData'\nimport { joinPaths, trimPathLeft } from './path'\nimport { useParams } from './useParams'\nimport { useSearch } from './useSearch'\nimport { notFound } from './not-found'\nimport { useNavigate } from './useNavigate'\nimport { rootRouteId } from './root'\nimport type * as React from 'react'\nimport type { RootRouteId } from './root'\nimport type { UseNavigateResult } from './useNavigate'\nimport type { MakeRouteMatch, RouteMatch } from './Matches'\nimport type { NavigateOptions, ParsePathParams, ToMaskOptions } from './link'\nimport type { ParsedLocation } from './location'\nimport type { RouteById, RouteIds, RoutePaths } from './routeInfo'\nimport type { AnyRouter, RegisteredRouter, Router } from './router'\nimport type { Assign, Constrain, Expand, NoInfer, PickRequired } from './utils'\nimport type { BuildLocationFn, NavigateFn } from './RouterProvider'\nimport type { NotFoundError } from './not-found'\nimport type { LazyRoute } from './fileRoute'\n\nexport type AnyPathParams = {}\n\nexport type SearchSchemaInput = {\n  __TSearchSchemaInput__: 'TSearchSchemaInput'\n}\n\nexport type AnySearchSchema = {}\n\nexport type AnyContext = {}\n\nexport interface RouteContext {}\n\nexport type PreloadableObj = { preload?: () => Promise<void> }\n\nexport type RoutePathOptions<TCustomId, TPath> =\n  | {\n      path: TPath\n    }\n  | {\n      id: TCustomId\n    }\n\nexport interface StaticDataRouteOption {}\n\nexport type RoutePathOptionsIntersection<TCustomId, TPath> = {\n  path: TPath\n  id: TCustomId\n}\n\nexport type RouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TFullPath extends string = string,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = AnyPathParams,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n> = BaseRouteOptions<\n  TParentRoute,\n  TCustomId,\n  TPath,\n  TSearchValidator,\n  TParams,\n  TLoaderDeps,\n  TLoaderFn,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn\n> &\n  UpdatableRouteOptions<\n    NoInfer<TParentRoute>,\n    NoInfer<TCustomId>,\n    NoInfer<TFullPath>,\n    NoInfer<TParams>,\n    NoInfer<TSearchValidator>,\n    NoInfer<TLoaderFn>,\n    NoInfer<TLoaderDeps>,\n    NoInfer<TRouterContext>,\n    NoInfer<TRouteContextFn>,\n    NoInfer<TBeforeLoadFn>\n  >\n\nexport type ParseSplatParams<TPath extends string> = TPath extends `${string}$`\n  ? '_splat'\n  : TPath extends `${string}$/${string}`\n    ? '_splat'\n    : never\n\nexport interface SplatParams {\n  _splat?: string\n}\n\nexport type ResolveParams<TPath extends string> =\n  ParseSplatParams<TPath> extends never\n    ? Record<ParsePathParams<TPath>, string>\n    : Record<ParsePathParams<TPath>, string> & SplatParams\n\nexport type ParseParamsFn<TPath extends string, TParams> = (\n  rawParams: ResolveParams<TPath>,\n) => TParams extends Record<ParsePathParams<TPath>, any>\n  ? TParams\n  : Record<ParsePathParams<TPath>, any>\n\nexport type StringifyParamsFn<TPath extends string, TParams> = (\n  params: TParams,\n) => ResolveParams<TPath>\n\nexport type ParamsOptions<TPath extends string, TParams> = {\n  params?: {\n    parse: ParseParamsFn<TPath, TParams>\n    stringify: StringifyParamsFn<TPath, TParams>\n  }\n\n  /** \n  @deprecated Use params.parse instead\n  */\n  parseParams?: ParseParamsFn<TPath, TParams>\n\n  /** \n  @deprecated Use params.stringify instead\n  */\n  stringifyParams?: StringifyParamsFn<TPath, TParams>\n}\n\nexport interface FullSearchSchemaOption<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n> {\n  search: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n}\n\nexport type RouteContextFn<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n> = (\n  ctx: RouteContextOptions<\n    TParentRoute,\n    TSearchValidator,\n    TParams,\n    TRouterContext\n  >,\n) => any\n\nexport type BeforeLoadFn<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n> = (\n  ctx: BeforeLoadContextOptions<\n    TParentRoute,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn\n  >,\n) => any\n\nexport type FileBaseRouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = {},\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n> = ParamsOptions<TPath, TParams> & {\n  validateSearch?: Constrain<\n    TSearchValidator,\n    AnySearchValidator,\n    DefaultSearchValidator\n  >\n\n  shouldReload?:\n    | boolean\n    | ((\n        match: LoaderFnContext<\n          TParentRoute,\n          TParams,\n          TLoaderDeps,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        >,\n      ) => any)\n\n  context?: Constrain<\n    TRouteContextFn,\n    (\n      ctx: RouteContextOptions<\n        TParentRoute,\n        TSearchValidator,\n        TParams,\n        TRouterContext\n      >,\n    ) => any\n  >\n\n  // This async function is called before a route is loaded.\n  // If an error is thrown here, the route's loader will not be called.\n  // If thrown during a navigation, the navigation will be cancelled and the error will be passed to the `onError` function.\n  // If thrown during a preload event, the error will be logged to the console.\n  beforeLoad?: Constrain<\n    TBeforeLoadFn,\n    (\n      ctx: BeforeLoadContextOptions<\n        TParentRoute,\n        TSearchValidator,\n        TParams,\n        TRouterContext,\n        TRouteContextFn\n      >,\n    ) => any\n  >\n\n  loaderDeps?: (\n    opts: FullSearchSchemaOption<TParentRoute, TSearchValidator>,\n  ) => TLoaderDeps\n\n  loader?: Constrain<\n    TLoaderFn,\n    (\n      ctx: LoaderFnContext<\n        TParentRoute,\n        TParams,\n        TLoaderDeps,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n    ) => any\n  >\n}\n\nexport type BaseRouteOptions<\n  TParentRoute extends AnyRoute = AnyRoute,\n  TCustomId extends string = string,\n  TPath extends string = string,\n  TSearchValidator = undefined,\n  TParams = {},\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n> = RoutePathOptions<TCustomId, TPath> &\n  FileBaseRouteOptions<\n    TParentRoute,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  > & {\n    getParentRoute: () => TParentRoute\n  }\n\nexport interface ContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n> extends FullSearchSchemaOption<TParentRoute, TSearchValidator> {\n  abortController: AbortController\n  preload: boolean\n  params: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>\n  location: ParsedLocation\n  /**\n   * @deprecated Use `throw redirect({ to: '/somewhere' })` instead\n   **/\n  navigate: NavigateFn\n  buildLocation: BuildLocationFn\n  cause: 'preload' | 'enter' | 'stay'\n}\n\nexport interface RouteContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n> extends ContextOptions<TParentRoute, TSearchValidator, TParams> {\n  context: Expand<RouteContextParameter<TParentRoute, TRouterContext>>\n}\n\nexport interface BeforeLoadContextOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TSearchValidator,\n  in out TParams,\n  in out TRouterContext,\n  in out TRouteContextFn,\n> extends ContextOptions<TParentRoute, TSearchValidator, TParams> {\n  context: Expand<\n    BeforeLoadContextParameter<TParentRoute, TRouterContext, TRouteContextFn>\n  >\n}\n\nexport interface UpdatableRouteOptions<\n  in out TParentRoute extends AnyRoute,\n  in out TRouteId,\n  in out TFullPath,\n  in out TParams,\n  in out TSearchValidator,\n  in out TLoaderFn,\n  in out TLoaderDeps,\n  in out TRouterContext,\n  in out TRouteContextFn,\n  in out TBeforeLoadFn,\n> extends UpdatableStaticRouteOption {\n  // test?: (args: TAllContext) => void\n  // If true, this route will be matched as case-sensitive\n  caseSensitive?: boolean\n  // If true, this route will be forcefully wrapped in a suspense boundary\n  wrapInSuspense?: boolean\n  // The content to be rendered when the route is matched. If no component is provided, defaults to `<Outlet />`\n  component?: RouteComponent\n  errorComponent?: false | null | ErrorRouteComponent\n  notFoundComponent?: NotFoundRouteComponent\n  pendingComponent?: RouteComponent\n  pendingMs?: number\n  pendingMinMs?: number\n  staleTime?: number\n  gcTime?: number\n  preload?: boolean\n  preloadStaleTime?: number\n  preloadGcTime?: number\n  // Filter functions that can manipulate search params *before* they are passed to links and navigate\n  // calls that match this route.\n  preSearchFilters?: Array<\n    SearchFilter<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n  >\n  // Filter functions that can manipulate search params *after* they are passed to links and navigate\n  // calls that match this route.\n  postSearchFilters?: Array<\n    SearchFilter<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>\n  >\n  onCatch?: (error: Error, errorInfo: React.ErrorInfo) => void\n  onError?: (err: any) => void\n  // These functions are called as route matches are loaded, stick around and leave the active\n  // matches\n  onEnter?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  onStay?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  onLeave?: (\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >,\n  ) => void\n  meta?: (ctx: {\n    matches: Array<\n      RouteMatch<\n        TRouteId,\n        TFullPath,\n        ResolveAllParamsFromParent<TParentRoute, TParams>,\n        ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n        ResolveLoaderData<TLoaderFn>,\n        ResolveAllContext<\n          TParentRoute,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        >,\n        TLoaderDeps\n      >\n    >\n    match: RouteMatch<\n      TRouteId,\n      TFullPath,\n      ResolveAllParamsFromParent<TParentRoute, TParams>,\n      ResolveFullSearchSchema<TParentRoute, TSearchValidator>,\n      ResolveLoaderData<TLoaderFn>,\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      TLoaderDeps\n    >\n    params: ResolveAllParamsFromParent<TParentRoute, TParams>\n    loaderData: ResolveLoaderData<TLoaderFn>\n  }) => Array<React.JSX.IntrinsicElements['meta']>\n  links?: () => Array<React.JSX.IntrinsicElements['link']>\n  scripts?: () => Array<React.JSX.IntrinsicElements['script']>\n  headers?: (ctx: {\n    loaderData: ResolveLoaderData<TLoaderFn>\n  }) => Record<string, string>\n}\n\ninterface RequiredStaticDataRouteOption {\n  staticData: StaticDataRouteOption\n}\n\ninterface OptionalStaticDataRouteOption {\n  staticData?: StaticDataRouteOption\n}\n\nexport type UpdatableStaticRouteOption = {} extends StaticDataRouteOption\n  ? OptionalStaticDataRouteOption\n  : RequiredStaticDataRouteOption\n\nexport type MetaDescriptor =\n  | { charSet: 'utf-8' }\n  | { title: string }\n  | { name: string; content: string }\n  | { property: string; content: string }\n  | { httpEquiv: string; content: string }\n  | { 'script:ld+json': LdJsonObject }\n  | { tagName: 'meta' | 'link'; [name: string]: string }\n  | Record<string, unknown>\n\ntype LdJsonObject = { [Key in string]: LdJsonValue } & {\n  [Key in string]?: LdJsonValue | undefined\n}\ntype LdJsonArray = Array<LdJsonValue> | ReadonlyArray<LdJsonValue>\ntype LdJsonPrimitive = string | number | boolean | null\ntype LdJsonValue = LdJsonPrimitive | LdJsonObject | LdJsonArray\n\nexport type RouteLinkEntry = {}\n\nexport interface SearchValidatorObj<TInput, TOutput> {\n  parse: SearchValidatorFn<TInput, TOutput>\n}\n\nexport type AnySearchValidatorObj = SearchValidatorObj<any, any>\n\nexport interface SearchValidatorAdapter<TInput, TOutput> {\n  types: {\n    input: TInput\n    output: TOutput\n  }\n  parse: (input: unknown) => TOutput\n}\n\nexport type AnySearchValidatorAdapter = SearchValidatorAdapter<any, any>\n\nexport type AnySearchValidatorFn = SearchValidatorFn<any, any>\n\nexport type SearchValidatorFn<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type SearchValidator<TInput, TOutput> =\n  | SearchValidatorObj<TInput, TOutput>\n  | SearchValidatorFn<TInput, TOutput>\n  | SearchValidatorAdapter<TInput, TOutput>\n  | undefined\n\nexport type AnySearchValidator = SearchValidator<any, any>\n\nexport type DefaultSearchValidator = SearchValidator<\n  Record<string, unknown>,\n  AnySearchSchema\n>\n\nexport type RouteLoaderFn<\n  in out TParentRoute extends AnyRoute = AnyRoute,\n  in out TParams = {},\n  in out TLoaderDeps = {},\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n> = (\n  match: LoaderFnContext<\n    TParentRoute,\n    TParams,\n    TLoaderDeps,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n) => any\n\nexport interface LoaderFnContext<\n  in out TParentRoute extends AnyRoute = AnyRoute,\n  in out TParams = {},\n  in out TLoaderDeps = {},\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n> {\n  abortController: AbortController\n  preload: boolean\n  params: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>\n  deps: TLoaderDeps\n  context: Expand<\n    ResolveAllContext<\n      TParentRoute,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >\n  >\n  location: ParsedLocation // Do not supply search schema here so as to demotivate people from trying to shortcut loaderDeps\n  /**\n   * @deprecated Use `throw redirect({ to: '/somewhere' })` instead\n   **/\n  navigate: (opts: NavigateOptions<AnyRouter>) => Promise<void>\n  parentMatchPromise?: Promise<void>\n  cause: 'preload' | 'enter' | 'stay'\n  route: Route\n}\n\nexport type SearchFilter<TInput, TResult = TInput> = (prev: TInput) => TResult\n\nexport type ResolveId<\n  TParentRoute,\n  TCustomId extends string,\n  TPath extends string,\n> = TParentRoute extends { id: infer TParentId extends string }\n  ? RoutePrefix<TParentId, string extends TCustomId ? TPath : TCustomId>\n  : RootRouteId\n\nexport type InferFullSearchSchema<TRoute> = TRoute extends {\n  types: {\n    fullSearchSchema: infer TFullSearchSchema\n  }\n}\n  ? TFullSearchSchema\n  : {}\n\nexport type InferFullSearchSchemaInput<TRoute> = TRoute extends {\n  types: {\n    fullSearchSchemaInput: infer TFullSearchSchemaInput\n  }\n}\n  ? TFullSearchSchemaInput\n  : {}\n\nexport type InferAllParams<TRoute> = TRoute extends {\n  types: {\n    allParams: infer TAllParams\n  }\n}\n  ? TAllParams\n  : {}\n\nexport type InferAllContext<TRoute> = unknown extends TRoute\n  ? TRoute\n  : TRoute extends {\n        types: {\n          allContext: infer TAllContext\n        }\n      }\n    ? TAllContext\n    : {}\n\nexport type ResolveSearchSchemaFnInput<TSearchValidator> =\n  TSearchValidator extends (input: infer TSearchSchemaInput) => any\n    ? TSearchSchemaInput extends SearchSchemaInput\n      ? Omit<TSearchSchemaInput, keyof SearchSchemaInput>\n      : ResolveSearchSchemaFn<TSearchValidator>\n    : AnySearchSchema\n\nexport type ResolveSearchSchemaInput<TSearchValidator> =\n  TSearchValidator extends AnySearchValidatorAdapter\n    ? TSearchValidator['types']['input']\n    : TSearchValidator extends AnySearchValidatorObj\n      ? ResolveSearchSchemaFnInput<TSearchValidator['parse']>\n      : ResolveSearchSchemaFnInput<TSearchValidator>\n\nexport type ResolveSearchSchemaFn<TSearchValidator> = TSearchValidator extends (\n  ...args: any\n) => infer TSearchSchema\n  ? TSearchSchema\n  : AnySearchSchema\n\nexport type ResolveSearchSchema<TSearchValidator> =\n  unknown extends TSearchValidator\n    ? TSearchValidator\n    : TSearchValidator extends AnySearchValidatorAdapter\n      ? TSearchValidator['types']['output']\n      : TSearchValidator extends AnySearchValidatorObj\n        ? ResolveSearchSchemaFn<TSearchValidator['parse']>\n        : ResolveSearchSchemaFn<TSearchValidator>\n\nexport type ResolveFullSearchSchema<\n  TParentRoute extends AnyRoute,\n  TSearchValidator,\n> = unknown extends TParentRoute\n  ? ResolveSearchSchema<TSearchValidator>\n  : Assign<\n      InferFullSearchSchema<TParentRoute>,\n      ResolveSearchSchema<TSearchValidator>\n    >\n\nexport type ResolveFullSearchSchemaInput<\n  TParentRoute extends AnyRoute,\n  TSearchValidator,\n> = Assign<\n  InferFullSearchSchemaInput<TParentRoute>,\n  ResolveSearchSchemaInput<TSearchValidator>\n>\n\nexport type LooseReturnType<T> = T extends (\n  ...args: Array<any>\n) => infer TReturn\n  ? TReturn\n  : never\n\nexport type LooseAsyncReturnType<T> = T extends (\n  ...args: Array<any>\n) => infer TReturn\n  ? TReturn extends Promise<infer TReturn>\n    ? TReturn\n    : TReturn\n  : never\n\nexport type ContextReturnType<TContextFn> = unknown extends TContextFn\n  ? TContextFn\n  : LooseReturnType<TContextFn> extends never\n    ? AnyContext\n    : LooseReturnType<TContextFn>\n\nexport type ContextAsyncReturnType<TContextFn> = unknown extends TContextFn\n  ? TContextFn\n  : LooseAsyncReturnType<TContextFn> extends never\n    ? AnyContext\n    : LooseAsyncReturnType<TContextFn>\n\nexport type RouteContextParameter<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n> = unknown extends TParentRoute\n  ? TRouterContext\n  : Assign<TRouterContext, InferAllContext<TParentRoute>>\n\nexport type ResolveRouteContext<TRouteContextFn, TBeforeLoadFn> = Assign<\n  ContextReturnType<TRouteContextFn>,\n  ContextAsyncReturnType<TBeforeLoadFn>\n>\nexport type BeforeLoadContextParameter<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n  TRouteContextFn,\n> = Assign<\n  RouteContextParameter<TParentRoute, TRouterContext>,\n  ContextReturnType<TRouteContextFn>\n>\n\nexport type ResolveAllContext<\n  TParentRoute extends AnyRoute,\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n> = Assign<\n  BeforeLoadContextParameter<TParentRoute, TRouterContext, TRouteContextFn>,\n  ContextAsyncReturnType<TBeforeLoadFn>\n>\n\nexport type ResolveLoaderData<TLoaderFn> = unknown extends TLoaderFn\n  ? TLoaderFn\n  : LooseAsyncReturnType<TLoaderFn> extends never\n    ? {}\n    : LooseAsyncReturnType<TLoaderFn>\n\nexport interface AnyRoute\n  extends Route<\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  > {}\n\nexport type AnyRouteWithContext<TContext> = AnyRoute & {\n  types: { allContext: TContext }\n}\n\nexport type ResolveAllParamsFromParent<\n  TParentRoute extends AnyRoute,\n  TParams,\n> = Assign<InferAllParams<TParentRoute>, TParams>\n\nexport type RouteConstraints = {\n  TParentRoute: AnyRoute\n  TPath: string\n  TFullPath: string\n  TCustomId: string\n  TId: string\n  TSearchSchema: AnySearchSchema\n  TFullSearchSchema: AnySearchSchema\n  TParams: Record<string, any>\n  TAllParams: Record<string, any>\n  TParentContext: AnyContext\n  TRouteContext: RouteContext\n  TAllContext: AnyContext\n  TRouterContext: AnyContext\n  TChildren: unknown\n  TRouteTree: AnyRoute\n}\n\nexport function getRouteApi<\n  TId extends RouteIds<RegisteredRouter['routeTree']>,\n  TRouter extends AnyRouter = RegisteredRouter,\n  TRoute extends AnyRoute = RouteById<TRouter['routeTree'], TId>,\n  TFullSearchSchema = TRoute['types']['fullSearchSchema'],\n  TAllParams = TRoute['types']['allParams'],\n  TAllContext = TRoute['types']['allContext'],\n  TLoaderDeps = TRoute['types']['loaderDeps'],\n  TLoaderData = TRoute['types']['loaderData'],\n>(id: TId) {\n  return new RouteApi<\n    TId,\n    TRouter,\n    TRoute,\n    TFullSearchSchema,\n    TAllParams,\n    TAllContext,\n    TLoaderDeps,\n    TLoaderData\n  >({ id })\n}\n\nexport class RouteApi<\n  TId extends RouteIds<RegisteredRouter['routeTree']>,\n  TRouter extends AnyRouter = RegisteredRouter,\n  TRoute extends AnyRoute = RouteById<TRouter['routeTree'], TId>,\n  TFullSearchSchema = TRoute['types']['fullSearchSchema'],\n  TAllParams = TRoute['types']['allParams'],\n  TAllContext = TRoute['types']['allContext'],\n  TLoaderDeps = TRoute['types']['loaderDeps'],\n  TLoaderData = TRoute['types']['loaderData'],\n> {\n  id: TId\n\n  /**\n   * @deprecated Use the `getRouteApi` function instead.\n   */\n  constructor({ id }: { id: TId }) {\n    this.id = id as any\n  }\n\n  useMatch = <\n    TRouteTree extends AnyRoute = TRouter['routeTree'],\n    TRouteMatch = MakeRouteMatch<TRouteTree, TId>,\n    TSelected = TRouteMatch,\n  >(opts?: {\n    select?: (match: TRouteMatch) => TSelected\n  }): TSelected => {\n    return useMatch({ select: opts?.select, from: this.id })\n  }\n\n  useRouteContext = <TSelected = Expand<TAllContext>>(opts?: {\n    select?: (s: Expand<TAllContext>) => TSelected\n  }): TSelected => {\n    return useMatch({\n      from: this.id,\n      select: (d: any) => (opts?.select ? opts.select(d.context) : d.context),\n    })\n  }\n\n  useSearch = <TSelected = Expand<TFullSearchSchema>>(opts?: {\n    select?: (s: Expand<TFullSearchSchema>) => TSelected\n  }): TSelected => {\n    return useSearch({ ...opts, from: this.id })\n  }\n\n  useParams = <TSelected = Expand<TAllParams>>(opts?: {\n    select?: (s: Expand<TAllParams>) => TSelected\n  }): TSelected => {\n    return useParams({ ...opts, from: this.id })\n  }\n\n  useLoaderDeps = <TSelected = TLoaderDeps>(opts?: {\n    select?: (s: TLoaderDeps) => TSelected\n  }): TSelected => {\n    return useLoaderDeps({ ...opts, from: this.id, strict: false } as any)\n  }\n\n  useLoaderData = <TSelected = TLoaderData>(opts?: {\n    select?: (s: TLoaderData) => TSelected\n  }): TSelected => {\n    return useLoaderData({ ...opts, from: this.id, strict: false } as any)\n  }\n\n  useNavigate = (): UseNavigateResult<TRoute['fullPath']> => {\n    return useNavigate({ from: this.id })\n  }\n\n  notFound = (opts?: NotFoundError) => {\n    return notFound({ routeId: this.id as string, ...opts })\n  }\n}\n\nexport class Route<\n  in out TParentRoute extends RouteConstraints['TParentRoute'] = AnyRoute,\n  in out TPath extends RouteConstraints['TPath'] = '/',\n  in out TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  in out TCustomId extends RouteConstraints['TCustomId'] = string,\n  in out TId extends RouteConstraints['TId'] = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  in out TSearchValidator = undefined,\n  in out TParams = ResolveParams<TPath>,\n  in out TRouterContext = AnyContext,\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  in out TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  in out TChildren = unknown,\n> {\n  isRoot: TParentRoute extends Route<any> ? true : false\n  options: RouteOptions<\n    TParentRoute,\n    TCustomId,\n    TFullPath,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >\n\n  // Set up in this.init()\n  parentRoute!: TParentRoute\n  id!: TId\n  // customId!: TCustomId\n  path!: TPath\n  fullPath!: TFullPath\n  to!: TrimPathRight<TFullPath>\n\n  // Optional\n  children?: TChildren\n  originalIndex?: number\n  router?: AnyRouter\n  rank!: number\n  lazyFn?: () => Promise<LazyRoute<any>>\n  _lazyPromise?: Promise<void>\n\n  /**\n   * @deprecated Use the `createRoute` function instead.\n   */\n  constructor(\n    options?: RouteOptions<\n      TParentRoute,\n      TCustomId,\n      TFullPath,\n      TPath,\n      TSearchValidator,\n      TParams,\n      TLoaderDeps,\n      TLoaderFn,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ) {\n    this.options = (options as any) || {}\n\n    this.isRoot = !options?.getParentRoute as any\n    invariant(\n      !((options as any)?.id && (options as any)?.path),\n      `Route cannot have both an 'id' and a 'path' option.`,\n    )\n    ;(this as any).$$typeof = Symbol.for('react.memo')\n  }\n\n  types!: {\n    parentRoute: TParentRoute\n    path: TPath\n    to: TrimPathRight<TFullPath>\n    fullPath: TFullPath\n    customId: TCustomId\n    id: TId\n    searchSchema: ResolveSearchSchema<TSearchValidator>\n    searchSchemaInput: ResolveSearchSchemaInput<TSearchValidator>\n    searchValidator: TSearchValidator\n    fullSearchSchema: ResolveFullSearchSchema<TParentRoute, TSearchValidator>\n    fullSearchSchemaInput: ResolveFullSearchSchemaInput<\n      TParentRoute,\n      TSearchValidator\n    >\n    params: TParams\n    allParams: ResolveAllParamsFromParent<TParentRoute, TParams>\n    routerContext: TRouterContext\n    routeContext: ResolveRouteContext<TRouteContextFn, TBeforeLoadFn>\n    routeContextFn: TRouteContextFn\n    beforeLoadFn: TBeforeLoadFn\n    allContext: ResolveAllContext<\n      TParentRoute,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >\n    children: TChildren\n    loaderData: ResolveLoaderData<TLoaderFn>\n    loaderDeps: TLoaderDeps\n  }\n\n  init = (opts: { originalIndex: number }): void => {\n    this.originalIndex = opts.originalIndex\n\n    const options = this.options as\n      | (RouteOptions<\n          TParentRoute,\n          TCustomId,\n          TFullPath,\n          TPath,\n          TSearchValidator,\n          TParams,\n          TLoaderDeps,\n          TLoaderFn,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        > &\n          RoutePathOptionsIntersection<TCustomId, TPath>)\n      | undefined\n\n    const isRoot = !options?.path && !options?.id\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    this.parentRoute = this.options.getParentRoute?.()\n\n    if (isRoot) {\n      this.path = rootRouteId as TPath\n    } else {\n      invariant(\n        this.parentRoute,\n        `Child Route instances must pass a 'getParentRoute: () => ParentRoute' option that returns a Route instance.`,\n      )\n    }\n\n    let path: undefined | string = isRoot ? rootRouteId : options.path\n\n    // If the path is anything other than an index path, trim it up\n    if (path && path !== '/') {\n      path = trimPathLeft(path)\n    }\n\n    const customId = options?.id || path\n\n    // Strip the parentId prefix from the first level of children\n    let id = isRoot\n      ? rootRouteId\n      : joinPaths([\n          this.parentRoute.id === rootRouteId ? '' : this.parentRoute.id,\n          customId,\n        ])\n\n    if (path === rootRouteId) {\n      path = '/'\n    }\n\n    if (id !== rootRouteId) {\n      id = joinPaths(['/', id])\n    }\n\n    const fullPath =\n      id === rootRouteId ? '/' : joinPaths([this.parentRoute.fullPath, path])\n\n    this.path = path as TPath\n    this.id = id as TId\n    // this.customId = customId as TCustomId\n    this.fullPath = fullPath as TFullPath\n    this.to = fullPath as TrimPathRight<TFullPath>\n  }\n\n  addChildren<\n    const TNewChildren extends\n      | Record<string, AnyRoute>\n      | ReadonlyArray<AnyRoute>,\n  >(\n    children: TNewChildren,\n  ): Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TNewChildren\n  > {\n    this.children = (\n      Array.isArray(children) ? children : Object.values(children)\n    ) as any\n    return this as any\n  }\n\n  updateLoader = <TNewLoaderFn>(options: {\n    loader: Constrain<\n      TNewLoaderFn,\n      RouteLoaderFn<\n        TParentRoute,\n        TParams,\n        TLoaderDeps,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >\n    >\n  }) => {\n    Object.assign(this.options, options)\n    return this as unknown as Route<\n      TParentRoute,\n      TPath,\n      TFullPath,\n      TCustomId,\n      TId,\n      TSearchValidator,\n      TParams,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TNewLoaderFn,\n      TChildren\n    >\n  }\n\n  update = (\n    options: UpdatableRouteOptions<\n      TParentRoute,\n      TCustomId,\n      TFullPath,\n      TParams,\n      TSearchValidator,\n      TLoaderFn,\n      TLoaderDeps,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn\n    >,\n  ): this => {\n    Object.assign(this.options, options)\n    return this\n  }\n\n  lazy = (lazyFn: () => Promise<LazyRoute<any>>): this => {\n    this.lazyFn = lazyFn\n    return this\n  }\n\n  useMatch = <\n    TRouter extends AnyRouter = RegisteredRouter,\n    TRouteTree extends AnyRoute = TRouter['routeTree'],\n    TRouteMatch = MakeRouteMatch<TRouteTree, TId>,\n    TSelected = TRouteMatch,\n  >(opts?: {\n    select?: (match: TRouteMatch) => TSelected\n  }): TSelected => {\n    return useMatch({ ...opts, from: this.id })\n  }\n\n  useRouteContext = <\n    TSelected = Expand<\n      ResolveAllContext<\n        TParentRoute,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >\n    >,\n  >(opts?: {\n    select?: (\n      search: Expand<\n        ResolveAllContext<\n          TParentRoute,\n          TRouterContext,\n          TRouteContextFn,\n          TBeforeLoadFn\n        >\n      >,\n    ) => TSelected\n  }): TSelected => {\n    return useMatch({\n      ...opts,\n      from: this.id,\n      select: (d: any) => (opts?.select ? opts.select(d.context) : d.context),\n    })\n  }\n\n  useSearch = <\n    TSelected = Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>,\n  >(opts?: {\n    select?: (\n      search: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>>,\n    ) => TSelected\n  }): TSelected => {\n    return useSearch({ ...opts, from: this.id })\n  }\n\n  useParams = <\n    TSelected = Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>,\n  >(opts?: {\n    select?: (\n      search: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>>,\n    ) => TSelected\n  }): TSelected => {\n    return useParams({ ...opts, from: this.id })\n  }\n\n  useLoaderDeps = <TSelected = TLoaderDeps>(opts?: {\n    select?: (s: TLoaderDeps) => TSelected\n  }): TSelected => {\n    return useLoaderDeps({ ...opts, from: this.id } as any)\n  }\n\n  useLoaderData = <TSelected = ResolveLoaderData<TLoaderFn>>(opts?: {\n    select?: (search: ResolveLoaderData<TLoaderFn>) => TSelected\n  }): TSelected => {\n    return useLoaderData({ ...opts, from: this.id } as any)\n  }\n\n  useNavigate = (): UseNavigateResult<TFullPath> => {\n    return useNavigate({ from: this.id })\n  }\n}\n\nexport function createRoute<\n  TParentRoute extends RouteConstraints['TParentRoute'] = AnyRoute,\n  TPath extends RouteConstraints['TPath'] = '/',\n  TFullPath extends RouteConstraints['TFullPath'] = ResolveFullPath<\n    TParentRoute,\n    TPath\n  >,\n  TCustomId extends RouteConstraints['TCustomId'] = string,\n  TId extends RouteConstraints['TId'] = ResolveId<\n    TParentRoute,\n    TCustomId,\n    TPath\n  >,\n  TSearchValidator = undefined,\n  TParams = ResolveParams<TPath>,\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TChildren = unknown,\n>(\n  options: RouteOptions<\n    TParentRoute,\n    TCustomId,\n    TFullPath,\n    TPath,\n    TSearchValidator,\n    TParams,\n    TLoaderDeps,\n    TLoaderFn,\n    AnyContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n) {\n  return new Route<\n    TParentRoute,\n    TPath,\n    TFullPath,\n    TCustomId,\n    TId,\n    TSearchValidator,\n    TParams,\n    AnyContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TChildren\n  >(options)\n}\n\nexport type AnyRootRoute = RootRoute<any, any, any, any, any, any, any>\n\nexport type RootRouteOptions<\n  TSearchValidator = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n> = Omit<\n  RouteOptions<\n    any, // TParentRoute\n    RootRouteId,\n    '', // TCustomId\n    '', // TPath\n    TSearchValidator,\n    {}, // TParams\n    TLoaderDeps,\n    TLoaderFn,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn\n  >,\n  | 'path'\n  | 'id'\n  | 'getParentRoute'\n  | 'caseSensitive'\n  | 'parseParams'\n  | 'stringifyParams'\n  | 'params'\n>\n\nexport function createRootRouteWithContext<TRouterContext extends {}>() {\n  return <\n    TRouteContextFn = AnyContext,\n    TBeforeLoadFn = AnyContext,\n    TSearchValidator = undefined,\n    TLoaderDeps extends Record<string, any> = {},\n    TLoaderFn = undefined,\n  >(\n    options?: RootRouteOptions<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >,\n  ) => {\n    return createRootRoute<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >(options as any)\n  }\n}\n\n/**\n * @deprecated Use the `createRootRouteWithContext` function instead.\n */\nexport const rootRouteWithContext = createRootRouteWithContext\n\nexport class RootRoute<\n  in out TSearchValidator = undefined,\n  in out TRouterContext = {},\n  in out TRouteContextFn = AnyContext,\n  in out TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  in out TLoaderFn = undefined,\n  TChildren = unknown,\n> extends Route<\n  any, // TParentRoute\n  '/', // TPath\n  '/', // TFullPath\n  string, // TCustomId\n  RootRouteId, // TId\n  TSearchValidator, // TSearchValidator\n  {}, // TParams\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren // TChildren\n> {\n  /**\n   * @deprecated `RootRoute` is now an internal implementation detail. Use `createRootRoute()` instead.\n   */\n  constructor(\n    options?: RootRouteOptions<\n      TSearchValidator,\n      TRouterContext,\n      TRouteContextFn,\n      TBeforeLoadFn,\n      TLoaderDeps,\n      TLoaderFn\n    >,\n  ) {\n    super(options as any)\n  }\n\n  addChildren<\n    const TNewChildren extends\n      | Record<string, AnyRoute>\n      | ReadonlyArray<AnyRoute>,\n  >(\n    children: TNewChildren,\n  ): RootRoute<\n    TSearchValidator,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn,\n    TNewChildren\n  > {\n    return super.addChildren(children)\n  }\n}\n\nexport function createRootRoute<\n  TSearchValidator = undefined,\n  TRouterContext = {},\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n>(\n  options?: RootRouteOptions<\n    TSearchValidator,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn\n  >,\n) {\n  return new RootRoute<\n    TSearchValidator,\n    TRouterContext,\n    TRouteContextFn,\n    TBeforeLoadFn,\n    TLoaderDeps,\n    TLoaderFn\n  >(options)\n}\n\nexport type ResolveFullPath<\n  TParentRoute extends AnyRoute,\n  TPath extends string,\n  TPrefixed = RoutePrefix<TParentRoute['fullPath'], TPath>,\n> = TPrefixed extends RootRouteId ? '/' : TPrefixed\n\ntype RoutePrefix<\n  TPrefix extends string,\n  TPath extends string,\n> = string extends TPath\n  ? RootRouteId\n  : TPath extends string\n    ? TPrefix extends RootRouteId\n      ? TPath extends '/'\n        ? '/'\n        : `/${TrimPath<TPath>}`\n      : `${TPrefix}/${TPath}` extends '/'\n        ? '/'\n        : `/${TrimPathLeft<`${TrimPathRight<TPrefix>}/${TrimPath<TPath>}`>}`\n    : never\n\nexport type TrimPath<T extends string> = '' extends T\n  ? ''\n  : TrimPathRight<TrimPathLeft<T>>\n\nexport type TrimPathLeft<T extends string> =\n  T extends `${RootRouteId}/${infer U}`\n    ? TrimPathLeft<U>\n    : T extends `/${infer U}`\n      ? TrimPathLeft<U>\n      : T\nexport type TrimPathRight<T extends string> = T extends '/'\n  ? '/'\n  : T extends `${infer U}/`\n    ? TrimPathRight<U>\n    : T\n\nexport type RouteMask<TRouteTree extends AnyRoute> = {\n  routeTree: TRouteTree\n  from: RoutePaths<TRouteTree>\n  to?: any\n  params?: any\n  search?: any\n  hash?: any\n  state?: any\n  unmaskOnReload?: boolean\n}\n\nexport function createRouteMask<\n  TRouteTree extends AnyRoute,\n  TFrom extends RoutePaths<TRouteTree>,\n  TTo extends string,\n>(\n  opts: {\n    routeTree: TRouteTree\n  } & ToMaskOptions<Router<TRouteTree, 'never'>, TFrom, TTo>,\n): RouteMask<TRouteTree> {\n  return opts as any\n}\n\n/**\n * @deprecated Use `ErrorComponentProps` instead.\n */\nexport type ErrorRouteProps = {\n  error: unknown\n  info?: { componentStack: string }\n  reset: () => void\n}\n\nexport type ErrorComponentProps = {\n  error: Error\n  info?: { componentStack: string }\n  reset: () => void\n}\nexport type NotFoundRouteProps = {\n  // TODO: Make sure this is `| null | undefined` (this is for global not-founds)\n  data: unknown\n}\n//\n\nexport type ReactNode = any\n\nexport type SyncRouteComponent<TProps> =\n  | ((props: TProps) => ReactNode)\n  | React.LazyExoticComponent<(props: TProps) => ReactNode>\n\nexport type AsyncRouteComponent<TProps> = SyncRouteComponent<TProps> & {\n  preload?: () => Promise<void>\n}\n\nexport type RouteComponent<TProps = any> = AsyncRouteComponent<TProps>\n\nexport type ErrorRouteComponent = RouteComponent<ErrorComponentProps>\n\nexport type NotFoundRouteComponent = SyncRouteComponent<NotFoundRouteProps>\n\nexport class NotFoundRoute<\n  TParentRoute extends AnyRootRoute,\n  TRouterContext = AnyContext,\n  TRouteContextFn = AnyContext,\n  TBeforeLoadFn = AnyContext,\n  TSearchValidator = undefined,\n  TLoaderDeps extends Record<string, any> = {},\n  TLoaderFn = undefined,\n  TChildren = unknown,\n> extends Route<\n  TParentRoute,\n  '/404',\n  '/404',\n  '404',\n  '404',\n  TSearchValidator,\n  {},\n  TRouterContext,\n  TRouteContextFn,\n  TBeforeLoadFn,\n  TLoaderDeps,\n  TLoaderFn,\n  TChildren\n> {\n  constructor(\n    options: Omit<\n      RouteOptions<\n        TParentRoute,\n        string,\n        string,\n        string,\n        TSearchValidator,\n        {},\n        TLoaderDeps,\n        TLoaderFn,\n        TRouterContext,\n        TRouteContextFn,\n        TBeforeLoadFn\n      >,\n      | 'caseSensitive'\n      | 'parseParams'\n      | 'stringifyParams'\n      | 'path'\n      | 'id'\n      | 'params'\n    >,\n  ) {\n    super({\n      ...(options as any),\n      id: '404',\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}