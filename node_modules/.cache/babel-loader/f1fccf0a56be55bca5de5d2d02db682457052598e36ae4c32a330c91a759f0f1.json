{"ast":null,"code":"import * as React from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { useRouterState } from \"./useRouterState.js\";\nimport { matchContext } from \"./matchContext.js\";\nfunction useMatch(opts) {\n  const nearestMatchId = React.useContext(matchContext);\n  const matchSelection = useRouterState({\n    select: state => {\n      const match = state.matches.find(d => opts.from ? opts.from === d.routeId : d.id === nearestMatchId);\n      invariant(!((opts.shouldThrow ?? true) && !match), `Could not find ${opts.from ? `an active match from \"${opts.from}\"` : \"a nearest match!\"}`);\n      if (match === void 0) {\n        return void 0;\n      }\n      return opts.select ? opts.select(match) : match;\n    }\n  });\n  return matchSelection;\n}\nexport { useMatch };","map":{"version":3,"names":["useMatch","opts","nearestMatchId","React","useContext","matchContext","matchSelection","useRouterState","select","state","match","matches","find","d","from","routeId","id","invariant","shouldThrow"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react-test/node_modules/@tanstack/react-router/src/useMatch.tsx"],"sourcesContent":["import * as React from 'react'\nimport invariant from 'tiny-invariant'\nimport { useRouterState } from './useRouterState'\nimport { matchContext } from './matchContext'\nimport type { RegisteredRouter } from './router'\nimport type { AnyRoute } from './route'\nimport type { MakeRouteMatch } from './Matches'\nimport type { RouteIds } from './routeInfo'\nimport type { StrictOrFrom } from './utils'\n\nexport type UseMatchOptions<\n  TFrom,\n  TStrict extends boolean,\n  TRouteMatch,\n  TSelected,\n  TThrow extends boolean,\n> = StrictOrFrom<TFrom, TStrict> & {\n  select?: (match: TRouteMatch) => TSelected\n  shouldThrow?: TThrow\n}\n\nexport function useMatch<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TStrict extends boolean = true,\n  TRouteMatch = MakeRouteMatch<TRouteTree, TFrom, TStrict>,\n  TSelected = TRouteMatch,\n  TThrow extends boolean = true,\n>(\n  opts: UseMatchOptions<TFrom, TStrict, TRouteMatch, TSelected, TThrow>,\n): TThrow extends true ? TSelected : TSelected | undefined {\n  const nearestMatchId = React.useContext(matchContext)\n\n  const matchSelection = useRouterState({\n    select: (state) => {\n      const match = state.matches.find((d) =>\n        opts.from ? opts.from === d.routeId : d.id === nearestMatchId,\n      )\n      invariant(\n        !((opts.shouldThrow ?? true) && !match),\n        `Could not find ${opts.from ? `an active match from \"${opts.from}\"` : 'a nearest match!'}`,\n      )\n\n      if (match === undefined) {\n        return undefined\n      }\n\n      return opts.select ? opts.select(match as any) : match\n    },\n  })\n\n  return matchSelection as TSelected\n}\n"],"mappings":";;;;AAqBO,SAASA,SAQdC,IAAA,EACyD;EACnD,MAAAC,cAAA,GAAiBC,KAAA,CAAMC,UAAA,CAAWC,YAAY;EAEpD,MAAMC,cAAA,GAAiBC,cAAA,CAAe;IACpCC,MAAA,EAASC,KAAA,IAAU;MACX,MAAAC,KAAA,GAAQD,KAAA,CAAME,OAAA,CAAQC,IAAA,CAAMC,CAAA,IAChCZ,IAAA,CAAKa,IAAA,GAAOb,IAAA,CAAKa,IAAA,KAASD,CAAA,CAAEE,OAAA,GAAUF,CAAA,CAAEG,EAAA,KAAOd,cAAA;MAEjDe,SAAA,CACE,GAAGhB,IAAA,CAAKiB,WAAA,IAAe,SAAS,CAACR,KAAA,GACjC,kBAAkBT,IAAA,CAAKa,IAAA,GAAO,yBAAyBb,IAAA,CAAKa,IAAI,MAAM,kBAAkB;MAG1F,IAAIJ,KAAA,KAAU,QAAW;QAChB;MACT;MAEA,OAAOT,IAAA,CAAKO,MAAA,GAASP,IAAA,CAAKO,MAAA,CAAOE,KAAY,IAAIA,KAAA;IACnD;EAAA,CACD;EAEM,OAAAJ,cAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}