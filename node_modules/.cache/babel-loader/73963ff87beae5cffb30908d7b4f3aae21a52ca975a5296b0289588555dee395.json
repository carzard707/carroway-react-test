{"ast":null,"code":"import { useMatch } from \"./useMatch.js\";\nfunction useLoaderDeps(opts) {\n  return useMatch({\n    ...opts,\n    select: s => {\n      return typeof opts.select === \"function\" ? opts.select(s.loaderDeps) : s.loaderDeps;\n    }\n  });\n}\nexport { useLoaderDeps };","map":{"version":3,"names":["useLoaderDeps","opts","useMatch","select","s","loaderDeps"],"sources":["/Users/carzard707/Documents/GitHub/carroway-react/node_modules/@tanstack/react-router/src/useLoaderDeps.tsx"],"sourcesContent":["import { useMatch } from './useMatch'\nimport type { RegisteredRouter } from './router'\nimport type { AnyRoute } from './route'\nimport type { MakeRouteMatch } from './Matches'\nimport type { RouteIds } from './routeInfo'\nimport type { StrictOrFrom } from './utils'\n\nexport function useLoaderDeps<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TRouteMatch extends MakeRouteMatch<TRouteTree, TFrom> = MakeRouteMatch<\n    TRouteTree,\n    TFrom\n  >,\n  TSelected = Required<TRouteMatch>['loaderDeps'],\n>(\n  opts: StrictOrFrom<TFrom> & {\n    select?: (match: TRouteMatch) => TSelected\n  },\n): TSelected {\n  return useMatch({\n    ...opts,\n    select: (s) => {\n      return typeof opts.select === 'function'\n        ? opts.select(s.loaderDeps)\n        : s.loaderDeps\n    },\n  })\n}\n"],"mappings":";AAOO,SAASA,cASdC,IAAA,EAGW;EACX,OAAOC,QAAA,CAAS;IACd,GAAGD,IAAA;IACHE,MAAA,EAASC,CAAA,IAAM;MACN,cAAOH,IAAA,CAAKE,MAAA,KAAW,aAC1BF,IAAA,CAAKE,MAAA,CAAOC,CAAA,CAAEC,UAAU,IACxBD,CAAA,CAAEC,UAAA;IACR;EAAA,CACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}